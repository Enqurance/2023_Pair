        -:    0:Source:D:/BUAA_Files/Learning_Files/Senior_Three_2/BUAA_SE/Pair_Project/2023_Pair/lib/googletest/src/gtest-port.cc
        -:    0:Graph:D:\BUAA_Files\Learning_Files\Senior_Three_2\BUAA_SE\Pair_Project\2023_Pair\cmake-build-debug-coverage\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\BUAA_Files\Learning_Files\Senior_Three_2\BUAA_SE\Pair_Project\2023_Pair\cmake-build-debug-coverage\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:#include "gtest/internal/gtest-port.h"
        -:   31:
        -:   32:#include <limits.h>
        -:   33:#include <stdio.h>
        -:   34:#include <stdlib.h>
        -:   35:#include <string.h>
        -:   36:
        -:   37:#include <cstdint>
        -:   38:#include <fstream>
        -:   39:#include <memory>
        -:   40:
        -:   41:#ifdef GTEST_OS_WINDOWS
        -:   42:#include <io.h>
        -:   43:#include <sys/stat.h>
        -:   44:#include <windows.h>
        -:   45:
        -:   46:#include <map>  // Used in ThreadLocal.
        -:   47:#ifdef _MSC_VER
        -:   48:#include <crtdbg.h>
        -:   49:#endif  // _MSC_VER
        -:   50:#else
        -:   51:#include <unistd.h>
        -:   52:#endif  // GTEST_OS_WINDOWS
        -:   53:
        -:   54:#ifdef GTEST_OS_MAC
        -:   55:#include <mach/mach_init.h>
        -:   56:#include <mach/task.h>
        -:   57:#include <mach/vm_map.h>
        -:   58:#endif  // GTEST_OS_MAC
        -:   59:
        -:   60:#if defined(GTEST_OS_DRAGONFLY) || defined(GTEST_OS_FREEBSD) ||   \
        -:   61:    defined(GTEST_OS_GNU_KFREEBSD) || defined(GTEST_OS_NETBSD) || \
        -:   62:    defined(GTEST_OS_OPENBSD)
        -:   63:#include <sys/sysctl.h>
        -:   64:#if defined(GTEST_OS_DRAGONFLY) || defined(GTEST_OS_FREEBSD) || \
        -:   65:    defined(GTEST_OS_GNU_KFREEBSD)
        -:   66:#include <sys/user.h>
        -:   67:#endif
        -:   68:#endif
        -:   69:
        -:   70:#ifdef GTEST_OS_QNX
        -:   71:#include <devctl.h>
        -:   72:#include <fcntl.h>
        -:   73:#include <sys/procfs.h>
        -:   74:#endif  // GTEST_OS_QNX
        -:   75:
        -:   76:#ifdef GTEST_OS_AIX
        -:   77:#include <procinfo.h>
        -:   78:#include <sys/types.h>
        -:   79:#endif  // GTEST_OS_AIX
        -:   80:
        -:   81:#ifdef GTEST_OS_FUCHSIA
        -:   82:#include <zircon/process.h>
        -:   83:#include <zircon/syscalls.h>
        -:   84:#endif  // GTEST_OS_FUCHSIA
        -:   85:
        -:   86:#include "gtest/gtest-message.h"
        -:   87:#include "gtest/gtest-spi.h"
        -:   88:#include "gtest/internal/gtest-internal.h"
        -:   89:#include "gtest/internal/gtest-string.h"
        -:   90:#include "src/gtest-internal-inl.h"
        -:   91:
        -:   92:namespace testing {
        -:   93:namespace internal {
        -:   94:
        -:   95:#if defined(GTEST_OS_LINUX) || defined(GTEST_OS_GNU_HURD)
        -:   96:
        -:   97:namespace {
        -:   98:template <typename T>
        -:   99:T ReadProcFileField(const std::string& filename, int field) {
        -:  100:  std::string dummy;
        -:  101:  std::ifstream file(filename.c_str());
        -:  102:  while (field-- > 0) {
        -:  103:    file >> dummy;
        -:  104:  }
        -:  105:  T output = 0;
        -:  106:  file >> output;
        -:  107:  return output;
        -:  108:}
        -:  109:}  // namespace
        -:  110:
        -:  111:// Returns the number of active threads, or 0 when there is an error.
        -:  112:size_t GetThreadCount() {
        -:  113:  const std::string filename =
        -:  114:      (Message() << "/proc/" << getpid() << "/stat").GetString();
        -:  115:  return ReadProcFileField<size_t>(filename, 19);
        -:  116:}
        -:  117:
        -:  118:#elif defined(GTEST_OS_MAC)
        -:  119:
        -:  120:size_t GetThreadCount() {
        -:  121:  const task_t task = mach_task_self();
        -:  122:  mach_msg_type_number_t thread_count;
        -:  123:  thread_act_array_t thread_list;
        -:  124:  const kern_return_t status = task_threads(task, &thread_list, &thread_count);
        -:  125:  if (status == KERN_SUCCESS) {
        -:  126:    // task_threads allocates resources in thread_list and we need to free them
        -:  127:    // to avoid leaks.
        -:  128:    vm_deallocate(task, reinterpret_cast<vm_address_t>(thread_list),
        -:  129:                  sizeof(thread_t) * thread_count);
        -:  130:    return static_cast<size_t>(thread_count);
        -:  131:  } else {
        -:  132:    return 0;
        -:  133:  }
        -:  134:}
        -:  135:
        -:  136:#elif defined(GTEST_OS_DRAGONFLY) || defined(GTEST_OS_FREEBSD) || \
        -:  137:    defined(GTEST_OS_GNU_KFREEBSD) || defined(GTEST_OS_NETBSD)
        -:  138:
        -:  139:#ifdef GTEST_OS_NETBSD
        -:  140:#undef KERN_PROC
        -:  141:#define KERN_PROC KERN_PROC2
        -:  142:#define kinfo_proc kinfo_proc2
        -:  143:#endif
        -:  144:
        -:  145:#ifdef GTEST_OS_DRAGONFLY
        -:  146:#define KP_NLWP(kp) (kp.kp_nthreads)
        -:  147:#elif defined(GTEST_OS_FREEBSD) || defined(GTEST_OS_GNU_KFREEBSD)
        -:  148:#define KP_NLWP(kp) (kp.ki_numthreads)
        -:  149:#elif defined(GTEST_OS_NETBSD)
        -:  150:#define KP_NLWP(kp) (kp.p_nlwps)
        -:  151:#endif
        -:  152:
        -:  153:// Returns the number of threads running in the process, or 0 to indicate that
        -:  154:// we cannot detect it.
        -:  155:size_t GetThreadCount() {
        -:  156:  int mib[] = {
        -:  157:    CTL_KERN,
        -:  158:    KERN_PROC,
        -:  159:    KERN_PROC_PID,
        -:  160:    getpid(),
        -:  161:#ifdef GTEST_OS_NETBSD
        -:  162:    sizeof(struct kinfo_proc),
        -:  163:    1,
        -:  164:#endif
        -:  165:  };
        -:  166:  u_int miblen = sizeof(mib) / sizeof(mib[0]);
        -:  167:  struct kinfo_proc info;
        -:  168:  size_t size = sizeof(info);
        -:  169:  if (sysctl(mib, miblen, &info, &size, NULL, 0)) {
        -:  170:    return 0;
        -:  171:  }
        -:  172:  return static_cast<size_t>(KP_NLWP(info));
        -:  173:}
        -:  174:#elif defined(GTEST_OS_OPENBSD)
        -:  175:
        -:  176:// Returns the number of threads running in the process, or 0 to indicate that
        -:  177:// we cannot detect it.
        -:  178:size_t GetThreadCount() {
        -:  179:  int mib[] = {
        -:  180:      CTL_KERN,
        -:  181:      KERN_PROC,
        -:  182:      KERN_PROC_PID | KERN_PROC_SHOW_THREADS,
        -:  183:      getpid(),
        -:  184:      sizeof(struct kinfo_proc),
        -:  185:      0,
        -:  186:  };
        -:  187:  u_int miblen = sizeof(mib) / sizeof(mib[0]);
        -:  188:
        -:  189:  // get number of structs
        -:  190:  size_t size;
        -:  191:  if (sysctl(mib, miblen, NULL, &size, NULL, 0)) {
        -:  192:    return 0;
        -:  193:  }
        -:  194:
        -:  195:  mib[5] = static_cast<int>(size / static_cast<size_t>(mib[4]));
        -:  196:
        -:  197:  // populate array of structs
        -:  198:  struct kinfo_proc info[mib[5]];
        -:  199:  if (sysctl(mib, miblen, &info, &size, NULL, 0)) {
        -:  200:    return 0;
        -:  201:  }
        -:  202:
        -:  203:  // exclude empty members
        -:  204:  size_t nthreads = 0;
        -:  205:  for (size_t i = 0; i < size / static_cast<size_t>(mib[4]); i++) {
        -:  206:    if (info[i].p_tid != -1) nthreads++;
        -:  207:  }
        -:  208:  return nthreads;
        -:  209:}
        -:  210:
        -:  211:#elif defined(GTEST_OS_QNX)
        -:  212:
        -:  213:// Returns the number of threads running in the process, or 0 to indicate that
        -:  214:// we cannot detect it.
        -:  215:size_t GetThreadCount() {
        -:  216:  const int fd = open("/proc/self/as", O_RDONLY);
        -:  217:  if (fd < 0) {
        -:  218:    return 0;
        -:  219:  }
        -:  220:  procfs_info process_info;
        -:  221:  const int status =
        -:  222:      devctl(fd, DCMD_PROC_INFO, &process_info, sizeof(process_info), nullptr);
        -:  223:  close(fd);
        -:  224:  if (status == EOK) {
        -:  225:    return static_cast<size_t>(process_info.num_threads);
        -:  226:  } else {
        -:  227:    return 0;
        -:  228:  }
        -:  229:}
        -:  230:
        -:  231:#elif defined(GTEST_OS_AIX)
        -:  232:
        -:  233:size_t GetThreadCount() {
        -:  234:  struct procentry64 entry;
        -:  235:  pid_t pid = getpid();
        -:  236:  int status = getprocs64(&entry, sizeof(entry), nullptr, 0, &pid, 1);
        -:  237:  if (status == 1) {
        -:  238:    return entry.pi_thcount;
        -:  239:  } else {
        -:  240:    return 0;
        -:  241:  }
        -:  242:}
        -:  243:
        -:  244:#elif defined(GTEST_OS_FUCHSIA)
        -:  245:
        -:  246:size_t GetThreadCount() {
        -:  247:  int dummy_buffer;
        -:  248:  size_t avail;
        -:  249:  zx_status_t status =
        -:  250:      zx_object_get_info(zx_process_self(), ZX_INFO_PROCESS_THREADS,
        -:  251:                         &dummy_buffer, 0, nullptr, &avail);
        -:  252:  if (status == ZX_OK) {
        -:  253:    return avail;
        -:  254:  } else {
        -:  255:    return 0;
        -:  256:  }
        -:  257:}
        -:  258:
        -:  259:#else
        -:  260:
function _ZN7testing8internal14GetThreadCountEv called 0 returned 0% blocks executed 0%
    #####:  261:size_t GetThreadCount() {
        -:  262:  // There's no portable way to detect the number of threads, so we just
        -:  263:  // return 0 to indicate that we cannot detect it.
    #####:  264:  return 0;
    %%%%%:  264-block  0
        -:  265:}
        -:  266:
        -:  267:#endif  // GTEST_OS_LINUX
        -:  268:
        -:  269:#if defined(GTEST_IS_THREADSAFE) && defined(GTEST_OS_WINDOWS)
        -:  270:
function _ZN7testing8internal10AutoHandleC2Ev called 0 returned 0% blocks executed 0%
    #####:  271:AutoHandle::AutoHandle() : handle_(INVALID_HANDLE_VALUE) {}
        -:  272:
function _ZN7testing8internal10AutoHandleC2EPv called 0 returned 0% blocks executed 0%
    #####:  273:AutoHandle::AutoHandle(Handle handle) : handle_(handle) {}
        -:  274:
function _ZN7testing8internal10AutoHandleD2Ev called 0 returned 0% blocks executed 0%
    #####:  275:AutoHandle::~AutoHandle() { Reset(); }
    %%%%%:  275-block  0
call    0 never executed
        -:  276:
function _ZNK7testing8internal10AutoHandle3GetEv called 0 returned 0% blocks executed 0%
    #####:  277:AutoHandle::Handle AutoHandle::Get() const { return handle_; }
    %%%%%:  277-block  0
        -:  278:
function _ZN7testing8internal10AutoHandle5ResetEv called 0 returned 0% blocks executed 0%
    #####:  279:void AutoHandle::Reset() { Reset(INVALID_HANDLE_VALUE); }
    %%%%%:  279-block  0
call    0 never executed
        -:  280:
function _ZN7testing8internal10AutoHandle5ResetEPv called 0 returned 0% blocks executed 0%
    #####:  281:void AutoHandle::Reset(HANDLE handle) {
        -:  282:  // Resetting with the same handle we already own is invalid.
    #####:  283:  if (handle_ != handle) {
    %%%%%:  283-block  0
branch  0 never executed
branch  1 never executed
    #####:  284:    if (IsCloseable()) {
    %%%%%:  284-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  285:      ::CloseHandle(handle_);
    %%%%%:  285-block  0
call    0 never executed
        -:  286:    }
    #####:  287:    handle_ = handle;
    %%%%%:  287-block  0
        -:  288:  } else {
    #####:  289:    GTEST_CHECK_(!IsCloseable())
    %%%%%:  289-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  289-block  1
call    4 never executed
call    5 never executed
    %%%%%:  289-block  2
call    6 never executed
    $$$$$:  289-block  3
call    7 never executed
        -:  290:        << "Resetting a valid handle to itself is likely a programmer error "
    #####:  291:           "and thus not allowed.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  291-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  292:  }
    #####:  293:}
    %%%%%:  293-block  0
        -:  294:
function _ZNK7testing8internal10AutoHandle11IsCloseableEv called 0 returned 0% blocks executed 0%
    #####:  295:bool AutoHandle::IsCloseable() const {
        -:  296:  // Different Windows APIs may use either of these values to represent an
        -:  297:  // invalid handle.
    #####:  298:  return handle_ != nullptr && handle_ != INVALID_HANDLE_VALUE;
    %%%%%:  298-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  298-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  298-block  2
    %%%%%:  298-block  3
    %%%%%:  298-block  4
        -:  299:}
        -:  300:
function _ZN7testing8internal5MutexC2Ev called 16 returned 100% blocks executed 100%
       16:  301:Mutex::Mutex()
       16:  302:    : owner_thread_id_(0),
       16:  303:      type_(kDynamic),
       16:  304:      critical_section_init_phase_(0),
       16:  305:      critical_section_(new CRITICAL_SECTION) {
       16:  305-block  0
call    0 returned 16
       16:  306:  ::InitializeCriticalSection(critical_section_);
call    0 returned 16
       16:  307:}
        -:  308:
function _ZN7testing8internal5MutexD2Ev called 0 returned 0% blocks executed 0%
    #####:  309:Mutex::~Mutex() {
        -:  310:  // Static mutexes are leaked intentionally. It is not thread-safe to try
        -:  311:  // to clean them up.
    #####:  312:  if (type_ == kDynamic) {
    %%%%%:  312-block  0
branch  0 never executed
branch  1 never executed
    #####:  313:    ::DeleteCriticalSection(critical_section_);
    %%%%%:  313-block  0
call    0 never executed
    #####:  314:    delete critical_section_;
branch  0 never executed
branch  1 never executed
    %%%%%:  314-block  0
call    2 never executed
    #####:  315:    critical_section_ = nullptr;
    %%%%%:  315-block  0
        -:  316:  }
    #####:  317:}
        -:  318:
function _ZN7testing8internal5Mutex4LockEv called 0 returned 0% blocks executed 0%
    #####:  319:void Mutex::Lock() {
    #####:  320:  ThreadSafeLazyInit();
    %%%%%:  320-block  0
call    0 never executed
    #####:  321:  ::EnterCriticalSection(critical_section_);
call    0 never executed
    #####:  322:  owner_thread_id_ = ::GetCurrentThreadId();
call    0 never executed
    #####:  323:}
        -:  324:
function _ZN7testing8internal5Mutex6UnlockEv called 0 returned 0% blocks executed 0%
    #####:  325:void Mutex::Unlock() {
    #####:  326:  ThreadSafeLazyInit();
    %%%%%:  326-block  0
call    0 never executed
        -:  327:  // We don't protect writing to owner_thread_id_ here, as it's the
        -:  328:  // caller's responsibility to ensure that the current thread holds the
        -:  329:  // mutex when this is called.
    #####:  330:  owner_thread_id_ = 0;
    #####:  331:  ::LeaveCriticalSection(critical_section_);
call    0 never executed
    #####:  332:}
        -:  333:
        -:  334:// Does nothing if the current thread holds the mutex. Otherwise, crashes
        -:  335:// with high probability.
function _ZN7testing8internal5Mutex10AssertHeldEv called 0 returned 0% blocks executed 0%
    #####:  336:void Mutex::AssertHeld() {
    #####:  337:  ThreadSafeLazyInit();
    %%%%%:  337-block  0
call    0 never executed
    #####:  338:  GTEST_CHECK_(owner_thread_id_ == ::GetCurrentThreadId())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  338-block  0
call    4 never executed
call    5 never executed
    %%%%%:  338-block  1
call    6 never executed
    $$$$$:  338-block  2
call    7 never executed
    #####:  339:      << "The current thread is not holding the mutex @" << this;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  339-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  339-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  340:}
    %%%%%:  340-block  0
        -:  341:
        -:  342:namespace {
        -:  343:
        -:  344:#ifdef _MSC_VER
        -:  345:// Use the RAII idiom to flag mem allocs that are intentionally never
        -:  346:// deallocated. The motivation is to silence the false positive mem leaks
        -:  347:// that are reported by the debug version of MS's CRT which can only detect
        -:  348:// if an alloc is missing a matching deallocation.
        -:  349:// Example:
        -:  350://    MemoryIsNotDeallocated memory_is_not_deallocated;
        -:  351://    critical_section_ = new CRITICAL_SECTION;
        -:  352://
        -:  353:class MemoryIsNotDeallocated {
        -:  354: public:
        -:  355:  MemoryIsNotDeallocated() : old_crtdbg_flag_(0) {
        -:  356:    old_crtdbg_flag_ = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);
        -:  357:    // Set heap allocation block type to _IGNORE_BLOCK so that MS debug CRT
        -:  358:    // doesn't report mem leak if there's no matching deallocation.
        -:  359:    (void)_CrtSetDbgFlag(old_crtdbg_flag_ & ~_CRTDBG_ALLOC_MEM_DF);
        -:  360:  }
        -:  361:
        -:  362:  ~MemoryIsNotDeallocated() {
        -:  363:    // Restore the original _CRTDBG_ALLOC_MEM_DF flag
        -:  364:    (void)_CrtSetDbgFlag(old_crtdbg_flag_);
        -:  365:  }
        -:  366:
        -:  367: private:
        -:  368:  int old_crtdbg_flag_;
        -:  369:
        -:  370:  MemoryIsNotDeallocated(const MemoryIsNotDeallocated&) = delete;
        -:  371:  MemoryIsNotDeallocated& operator=(const MemoryIsNotDeallocated&) = delete;
        -:  372:};
        -:  373:#endif  // _MSC_VER
        -:  374:
        -:  375:}  // namespace
        -:  376:
        -:  377:// Initializes owner_thread_id_ and critical_section_ in static mutexes.
function _ZN7testing8internal5Mutex18ThreadSafeLazyInitEv called 0 returned 0% blocks executed 0%
    #####:  378:void Mutex::ThreadSafeLazyInit() {
        -:  379:  // Dynamic mutexes are initialized in the constructor.
    #####:  380:  if (type_ == kStatic) {
    %%%%%:  380-block  0
branch  0 never executed
branch  1 never executed
    #####:  381:    switch (
    #####:  382:        ::InterlockedCompareExchange(&critical_section_init_phase_, 1L, 0L)) {
    %%%%%:  382-block  0
    %%%%%:  382-block  1
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  383:      case 0:
        -:  384:        // If critical_section_init_phase_ was 0 before the exchange, we
        -:  385:        // are the first to test it and need to perform the initialization.
    #####:  386:        owner_thread_id_ = 0;
        -:  387:        {
        -:  388:          // Use RAII to flag that following mem alloc is never deallocated.
        -:  389:#ifdef _MSC_VER
        -:  390:          MemoryIsNotDeallocated memory_is_not_deallocated;
        -:  391:#endif  // _MSC_VER
    #####:  392:          critical_section_ = new CRITICAL_SECTION;
    %%%%%:  392-block  0
call    0 never executed
        -:  393:        }
    #####:  394:        ::InitializeCriticalSection(critical_section_);
call    0 never executed
        -:  395:        // Updates the critical_section_init_phase_ to 2 to signal
        -:  396:        // initialization complete.
    #####:  397:        GTEST_CHECK_(::InterlockedCompareExchange(&critical_section_init_phase_,
    %%%%%:  397-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  397-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  397-block  2
call    8 never executed
    $$$$$:  397-block  3
call    9 never executed
    $$$$$:  397-block  4
call   10 never executed
        -:  398:                                                  2L, 1L) == 1L);
    #####:  399:        break;
    %%%%%:  399-block  0
    #####:  400:      case 1:
        -:  401:        // Somebody else is already initializing the mutex; spin until they
        -:  402:        // are done.
    #####:  403:        while (::InterlockedCompareExchange(&critical_section_init_phase_, 2L,
    %%%%%:  403-block  0
    %%%%%:  403-block  1
    #####:  404:                                            2L) != 2L) {
    %%%%%:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:          // Possibly yields the rest of the thread's time slice to other
        -:  406:          // threads.
    #####:  407:          ::Sleep(0);
    %%%%%:  407-block  0
call    0 never executed
        -:  408:        }
    #####:  409:        break;
    %%%%%:  409-block  0
        -:  410:
    #####:  411:      case 2:
    #####:  412:        break;  // The mutex is already initialized and ready for use.
    %%%%%:  412-block  0
        -:  413:
    #####:  414:      default:
    #####:  415:        GTEST_CHECK_(false)
    %%%%%:  415-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  415-block  1
call    3 never executed
call    4 never executed
    %%%%%:  415-block  2
call    5 never executed
    $$$$$:  415-block  3
call    6 never executed
        -:  416:            << "Unexpected value of critical_section_init_phase_ "
    #####:  417:            << "while initializing a static mutex.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  417-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  417-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  418:    }
        -:  419:  }
    #####:  420:}
    %%%%%:  420-block  0
        -:  421:
        -:  422:namespace {
        -:  423:
        -:  424:class ThreadWithParamSupport : public ThreadWithParamBase {
        -:  425: public:
function _ZN7testing8internal12_GLOBAL__N_122ThreadWithParamSupport12CreateThreadEPNS0_19ThreadWithParamBase8RunnableEPNS0_12NotificationE called 0 returned 0% blocks executed 0%
    #####:  426:  static HANDLE CreateThread(Runnable* runnable,
        -:  427:                             Notification* thread_can_start) {
    #####:  428:    ThreadMainParam* param = new ThreadMainParam(runnable, thread_can_start);
    %%%%%:  428-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  428-block  1
call    3 never executed
        -:  429:    DWORD thread_id;
    #####:  430:    HANDLE thread_handle = ::CreateThread(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  431:        nullptr,  // Default security.
        -:  432:        0,        // Default stack size.
        -:  433:        &ThreadWithParamSupport::ThreadMain,
        -:  434:        param,        // Parameter to ThreadMainStatic
        -:  435:        0x0,          // Default creation flags.
        -:  436:        &thread_id);  // Need a valid pointer for the call to work under Win98.
    #####:  437:    GTEST_CHECK_(thread_handle != nullptr)
    %%%%%:  437-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  437-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  437-block  2
call    6 never executed
    %%%%%:  437-block  3
call    7 never executed
    $$$$$:  437-block  4
call    8 never executed
    $$$$$:  437-block  5
    #####:  438:        << "CreateThread failed with error " << ::GetLastError() << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  438-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  438-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  438-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  438-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  439:    if (thread_handle == nullptr) {
    %%%%%:  439-block  0
branch  0 never executed
branch  1 never executed
    #####:  440:      delete param;
    %%%%%:  440-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  440-block  1
call    2 never executed
call    3 never executed
        -:  441:    }
    #####:  442:    return thread_handle;
    %%%%%:  442-block  0
    %%%%%:  442-block  1
        -:  443:  }
        -:  444:
        -:  445: private:
        -:  446:  struct ThreadMainParam {
function _ZN7testing8internal12_GLOBAL__N_122ThreadWithParamSupport15ThreadMainParamC2EPNS0_19ThreadWithParamBase8RunnableEPNS0_12NotificationE called 0 returned 0% blocks executed 0%
    #####:  447:    ThreadMainParam(Runnable* runnable, Notification* thread_can_start)
    #####:  448:        : runnable_(runnable), thread_can_start_(thread_can_start) {}
    %%%%%:  448-block  0
call    0 never executed
        -:  449:    std::unique_ptr<Runnable> runnable_;
        -:  450:    // Does not own.
        -:  451:    Notification* thread_can_start_;
        -:  452:  };
        -:  453:
function _ZN7testing8internal12_GLOBAL__N_122ThreadWithParamSupport10ThreadMainEPv called 0 returned 0% blocks executed 0%
    #####:  454:  static DWORD WINAPI ThreadMain(void* ptr) {
        -:  455:    // Transfers ownership.
    #####:  456:    std::unique_ptr<ThreadMainParam> param(static_cast<ThreadMainParam*>(ptr));
    %%%%%:  456-block  0
call    0 never executed
    #####:  457:    if (param->thread_can_start_ != nullptr)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  458:      param->thread_can_start_->WaitForNotification();
    %%%%%:  458-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  459:    param->runnable_->Run();
    %%%%%:  459-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  460:    return 0;
    %%%%%:  460-block  0
    #####:  461:  }
    %%%%%:  461-block  0
call    0 never executed
    $$$$$:  461-block  1
call    1 never executed
        -:  462:
        -:  463:  // Prohibit instantiation.
        -:  464:  ThreadWithParamSupport();
        -:  465:
        -:  466:  ThreadWithParamSupport(const ThreadWithParamSupport&) = delete;
        -:  467:  ThreadWithParamSupport& operator=(const ThreadWithParamSupport&) = delete;
        -:  468:};
        -:  469:
        -:  470:}  // namespace
        -:  471:
function _ZN7testing8internal19ThreadWithParamBaseC2EPNS1_8RunnableEPNS0_12NotificationE called 0 returned 0% blocks executed 0%
    #####:  472:ThreadWithParamBase::ThreadWithParamBase(Runnable* runnable,
    #####:  473:                                         Notification* thread_can_start)
    #####:  474:    : thread_(
call    0 never executed
    #####:  475:          ThreadWithParamSupport::CreateThread(runnable, thread_can_start)) {}
    %%%%%:  475-block  0
call    0 never executed
        -:  476:
    #####:  477:ThreadWithParamBase::~ThreadWithParamBase() { Join(); }
------------------
_ZN7testing8internal19ThreadWithParamBaseD0Ev:
function _ZN7testing8internal19ThreadWithParamBaseD0Ev called 0 returned 0% blocks executed 0%
    #####:  477:ThreadWithParamBase::~ThreadWithParamBase() { Join(); }
    %%%%%:  477-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal19ThreadWithParamBaseD2Ev:
function _ZN7testing8internal19ThreadWithParamBaseD2Ev called 0 returned 0% blocks executed 0%
    #####:  477:ThreadWithParamBase::~ThreadWithParamBase() { Join(); }
    %%%%%:  477-block  0
call    0 never executed
call    1 never executed
------------------
        -:  478:
function _ZN7testing8internal19ThreadWithParamBase4JoinEv called 0 returned 0% blocks executed 0%
    #####:  479:void ThreadWithParamBase::Join() {
    #####:  480:  GTEST_CHECK_(::WaitForSingleObject(thread_.Get(), INFINITE) == WAIT_OBJECT_0)
    %%%%%:  480-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  480-block  1
call    5 never executed
call    6 never executed
    %%%%%:  480-block  2
call    7 never executed
    $$$$$:  480-block  3
call    8 never executed
    #####:  481:      << "Failed to join the thread with error " << ::GetLastError() << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  481-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  481-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  481-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  481-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  482:}
    %%%%%:  482-block  0
        -:  483:
        -:  484:// Maps a thread to a set of ThreadIdToThreadLocals that have values
        -:  485:// instantiated on that thread and notifies them when the thread exits.  A
        -:  486:// ThreadLocal instance is expected to persist until all threads it has
        -:  487:// values on have terminated.
        -:  488:class ThreadLocalRegistryImpl {
        -:  489: public:
        -:  490:  // Registers thread_local_instance as having value on the current thread.
        -:  491:  // Returns a value that can be used to identify the thread from other threads.
function _ZN7testing8internal23ThreadLocalRegistryImpl23GetValueOnCurrentThreadEPKNS0_15ThreadLocalBaseE called 0 returned 0% blocks executed 0%
    #####:  492:  static ThreadLocalValueHolderBase* GetValueOnCurrentThread(
        -:  493:      const ThreadLocalBase* thread_local_instance) {
        -:  494:#ifdef _MSC_VER
        -:  495:    MemoryIsNotDeallocated memory_is_not_deallocated;
        -:  496:#endif  // _MSC_VER
    #####:  497:    DWORD current_thread = ::GetCurrentThreadId();
    %%%%%:  497-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  498:    MutexLock lock(&mutex_);
    %%%%%:  498-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  499:    ThreadIdToThreadLocals* const thread_to_thread_locals =
    #####:  500:        GetThreadLocalsMapLocked();
    %%%%%:  500-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  501:    ThreadIdToThreadLocals::iterator thread_local_pos =
    #####:  502:        thread_to_thread_locals->find(current_thread);
    %%%%%:  502-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  503:    if (thread_local_pos == thread_to_thread_locals->end()) {
    %%%%%:  503-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  504:      thread_local_pos =
        -:  505:          thread_to_thread_locals
    #####:  506:              ->insert(std::make_pair(current_thread, ThreadLocalValues()))
    %%%%%:  506-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  506-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  506-block  2
call    7 never executed
call    8 never executed
    $$$$$:  506-block  3
call    9 never executed
    $$$$$:  506-block  4
    $$$$$:  506-block  5
call   10 never executed
    $$$$$:  506-block  6
        -:  507:              .first;
    #####:  508:      StartWatcherThreadFor(current_thread);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  509:    }
    #####:  510:    ThreadLocalValues& thread_local_values = thread_local_pos->second;
    %%%%%:  510-block  0
call    0 never executed
        -:  511:    ThreadLocalValues::iterator value_pos =
    #####:  512:        thread_local_values.find(thread_local_instance);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  513:    if (value_pos == thread_local_values.end()) {
    %%%%%:  513-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  514:      value_pos =
        -:  515:          thread_local_values
    #####:  516:              .insert(std::make_pair(
    %%%%%:  516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  516-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  516-block  2
call    6 never executed
    $$$$$:  516-block  3
call    7 never executed
    $$$$$:  516-block  4
        -:  517:                  thread_local_instance,
    #####:  518:                  std::shared_ptr<ThreadLocalValueHolderBase>(
    %%%%%:  518-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  518-block  1
call    4 never executed
    $$$$$:  518-block  2
    #####:  519:                      thread_local_instance->NewValueForCurrentThread())))
    %%%%%:  519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  520:              .first;
        -:  521:    }
    #####:  522:    return value_pos->second.get();
    %%%%%:  522-block  0
call    0 never executed
call    1 never executed
    %%%%%:  522-block  1
    #####:  523:  }
call    0 never executed
    $$$$$:  523-block  0
call    1 never executed
        -:  524:
function _ZN7testing8internal23ThreadLocalRegistryImpl22OnThreadLocalDestroyedEPKNS0_15ThreadLocalBaseE called 0 returned 0% blocks executed 0%
    #####:  525:  static void OnThreadLocalDestroyed(
        -:  526:      const ThreadLocalBase* thread_local_instance) {
    #####:  527:    std::vector<std::shared_ptr<ThreadLocalValueHolderBase> > value_holders;
    %%%%%:  527-block  0
call    0 never executed
        -:  528:    // Clean up the ThreadLocalValues data structure while holding the lock, but
        -:  529:    // defer the destruction of the ThreadLocalValueHolderBases.
        -:  530:    {
    #####:  531:      MutexLock lock(&mutex_);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  532:      ThreadIdToThreadLocals* const thread_to_thread_locals =
    #####:  533:          GetThreadLocalsMapLocked();
    %%%%%:  533-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  534:      for (ThreadIdToThreadLocals::iterator it =
    #####:  535:               thread_to_thread_locals->begin();
    %%%%%:  535-block  0
call    0 never executed
    #####:  536:           it != thread_to_thread_locals->end(); ++it) {
    %%%%%:  536-block  0
call    0 never executed
    %%%%%:  536-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  537:        ThreadLocalValues& thread_local_values = it->second;
    %%%%%:  537-block  0
call    0 never executed
        -:  538:        ThreadLocalValues::iterator value_pos =
    #####:  539:            thread_local_values.find(thread_local_instance);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  540:        if (value_pos != thread_local_values.end()) {
    %%%%%:  540-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  541:          value_holders.push_back(value_pos->second);
    %%%%%:  541-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  542:          thread_local_values.erase(value_pos);
    %%%%%:  542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  543:          // This 'if' can only be successful at most once, so theoretically we
        -:  544:          // could break out of the loop here, but we don't bother doing so.
        -:  545:        }
        -:  546:      }
    #####:  547:    }
    %%%%%:  547-block  0
call    0 never executed
    $$$$$:  547-block  1
call    1 never executed
        -:  548:    // Outside the lock, let the destructor for 'value_holders' deallocate the
        -:  549:    // ThreadLocalValueHolderBases.
    #####:  550:  }
call    0 never executed
    $$$$$:  550-block  0
call    1 never executed
        -:  551:
function _ZN7testing8internal23ThreadLocalRegistryImpl12OnThreadExitEm called 0 returned 0% blocks executed 0%
    #####:  552:  static void OnThreadExit(DWORD thread_id) {
    #####:  553:    GTEST_CHECK_(thread_id != 0) << ::GetLastError();
    %%%%%:  553-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  553-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  553-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  553-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  553-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  553-block  5
call   16 never executed
    $$$$$:  553-block  6
call   17 never executed
    $$$$$:  553-block  7
    #####:  554:    std::vector<std::shared_ptr<ThreadLocalValueHolderBase> > value_holders;
    %%%%%:  554-block  0
call    0 never executed
call    1 never executed
    $$$$$:  554-block  1
call    2 never executed
        -:  555:    // Clean up the ThreadIdToThreadLocals data structure while holding the
        -:  556:    // lock, but defer the destruction of the ThreadLocalValueHolderBases.
        -:  557:    {
    #####:  558:      MutexLock lock(&mutex_);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  559:      ThreadIdToThreadLocals* const thread_to_thread_locals =
    #####:  560:          GetThreadLocalsMapLocked();
    %%%%%:  560-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  561:      ThreadIdToThreadLocals::iterator thread_local_pos =
    #####:  562:          thread_to_thread_locals->find(thread_id);
    %%%%%:  562-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  563:      if (thread_local_pos != thread_to_thread_locals->end()) {
    %%%%%:  563-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  564:        ThreadLocalValues& thread_local_values = thread_local_pos->second;
    %%%%%:  564-block  0
call    0 never executed
    #####:  565:        for (ThreadLocalValues::iterator value_pos =
    #####:  566:                 thread_local_values.begin();
call    0 never executed
    #####:  567:             value_pos != thread_local_values.end(); ++value_pos) {
    %%%%%:  567-block  0
call    0 never executed
    %%%%%:  567-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  568:          value_holders.push_back(value_pos->second);
    %%%%%:  568-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  569:        }
    #####:  570:        thread_to_thread_locals->erase(thread_local_pos);
    %%%%%:  570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  571:      }
    #####:  572:    }
    %%%%%:  572-block  0
call    0 never executed
    $$$$$:  572-block  1
call    1 never executed
        -:  573:    // Outside the lock, let the destructor for 'value_holders' deallocate the
        -:  574:    // ThreadLocalValueHolderBases.
    #####:  575:  }
        -:  576:
        -:  577: private:
        -:  578:  // In a particular thread, maps a ThreadLocal object to its value.
        -:  579:  typedef std::map<const ThreadLocalBase*,
        -:  580:                   std::shared_ptr<ThreadLocalValueHolderBase> >
        -:  581:      ThreadLocalValues;
        -:  582:  // Stores all ThreadIdToThreadLocals having values in a thread, indexed by
        -:  583:  // thread's ID.
        -:  584:  typedef std::map<DWORD, ThreadLocalValues> ThreadIdToThreadLocals;
        -:  585:
        -:  586:  // Holds the thread id and thread handle that we pass from
        -:  587:  // StartWatcherThreadFor to WatcherThreadFunc.
        -:  588:  typedef std::pair<DWORD, HANDLE> ThreadIdAndHandle;
        -:  589:
function _ZN7testing8internal23ThreadLocalRegistryImpl21StartWatcherThreadForEm called 0 returned 0% blocks executed 0%
    #####:  590:  static void StartWatcherThreadFor(DWORD thread_id) {
        -:  591:    // The returned handle will be kept in thread_map and closed by
        -:  592:    // watcher_thread in WatcherThreadFunc.
        -:  593:    HANDLE thread =
    #####:  594:        ::OpenThread(SYNCHRONIZE | THREAD_QUERY_INFORMATION, FALSE, thread_id);
    %%%%%:  594-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  595:    GTEST_CHECK_(thread != nullptr);
    %%%%%:  595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  595-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  595-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  595-block  3
call   10 never executed
    $$$$$:  595-block  4
call   11 never executed
    $$$$$:  595-block  5
        -:  596:    // We need to pass a valid thread ID pointer into CreateThread for it
        -:  597:    // to work correctly under Win98.
        -:  598:    DWORD watcher_thread_id;
    #####:  599:    HANDLE watcher_thread = ::CreateThread(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  600:        nullptr,  // Default security.
        -:  601:        0,        // Default stack size
        -:  602:        &ThreadLocalRegistryImpl::WatcherThreadFunc,
    #####:  603:        reinterpret_cast<LPVOID>(new ThreadIdAndHandle(thread_id, thread)),
    %%%%%:  603-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  603-block  1
call    3 never executed
        -:  604:        CREATE_SUSPENDED, &watcher_thread_id);
    #####:  605:    GTEST_CHECK_(watcher_thread != nullptr)
    %%%%%:  605-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  605-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  605-block  2
call    6 never executed
    %%%%%:  605-block  3
call    7 never executed
    $$$$$:  605-block  4
call    8 never executed
    $$$$$:  605-block  5
    #####:  606:        << "CreateThread failed with error " << ::GetLastError() << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  606-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  606-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  606-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  606-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
        -:  607:    // Give the watcher thread the same priority as ours to avoid being
        -:  608:    // blocked by it.
    #####:  609:    ::SetThreadPriority(watcher_thread,
    %%%%%:  609-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  609-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  609-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  610:                        ::GetThreadPriority(::GetCurrentThread()));
    #####:  611:    ::ResumeThread(watcher_thread);
    %%%%%:  611-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  612:    ::CloseHandle(watcher_thread);
    %%%%%:  612-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  613:  }
    %%%%%:  613-block  0
        -:  614:
        -:  615:  // Monitors exit from a given thread and notifies those
        -:  616:  // ThreadIdToThreadLocals about thread termination.
function _ZN7testing8internal23ThreadLocalRegistryImpl17WatcherThreadFuncEPv called 0 returned 0% blocks executed 0%
    #####:  617:  static DWORD WINAPI WatcherThreadFunc(LPVOID param) {
    #####:  618:    const ThreadIdAndHandle* tah =
        -:  619:        reinterpret_cast<const ThreadIdAndHandle*>(param);
    #####:  620:    GTEST_CHECK_(::WaitForSingleObject(tah->second, INFINITE) == WAIT_OBJECT_0);
    %%%%%:  620-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  620-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  620-block  2
call    9 never executed
    $$$$$:  620-block  3
call   10 never executed
    #####:  621:    OnThreadExit(tah->first);
    %%%%%:  621-block  0
call    0 never executed
    #####:  622:    ::CloseHandle(tah->second);
call    0 never executed
    #####:  623:    delete tah;
branch  0 never executed
branch  1 never executed
    %%%%%:  623-block  0
call    2 never executed
    #####:  624:    return 0;
    %%%%%:  624-block  0
    %%%%%:  624-block  1
        -:  625:  }
        -:  626:
        -:  627:  // Returns map of thread local instances.
function _ZN7testing8internal23ThreadLocalRegistryImpl24GetThreadLocalsMapLockedEv called 0 returned 0% blocks executed 0%
    #####:  628:  static ThreadIdToThreadLocals* GetThreadLocalsMapLocked() {
    #####:  629:    mutex_.AssertHeld();
    %%%%%:  629-block  0
call    0 never executed
        -:  630:#ifdef _MSC_VER
        -:  631:    MemoryIsNotDeallocated memory_is_not_deallocated;
        -:  632:#endif  // _MSC_VER
    #####:  633:    static ThreadIdToThreadLocals* map = new ThreadIdToThreadLocals();
branch  0 never executed
branch  1 never executed
    %%%%%:  633-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  633-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  633-block  2
call    8 never executed
call    9 never executed
    $$$$$:  633-block  3
branch 10 never executed
branch 11 never executed
    $$$$$:  633-block  4
call   12 never executed
    #####:  634:    return map;
    %%%%%:  634-block  0
    %%%%%:  634-block  1
        -:  635:  }
        -:  636:
        -:  637:  // Protects access to GetThreadLocalsMapLocked() and its return value.
        -:  638:  static Mutex mutex_;
        -:  639:  // Protects access to GetThreadMapLocked() and its return value.
        -:  640:  static Mutex thread_map_mutex_;
        -:  641:};
        -:  642:
        -:  643:Mutex ThreadLocalRegistryImpl::mutex_(Mutex::kStaticMutex);  // NOLINT
        -:  644:Mutex ThreadLocalRegistryImpl::thread_map_mutex_(
        -:  645:    Mutex::kStaticMutex);  // NOLINT
        -:  646:
function _ZN7testing8internal19ThreadLocalRegistry23GetValueOnCurrentThreadEPKNS0_15ThreadLocalBaseE called 0 returned 0% blocks executed 0%
    #####:  647:ThreadLocalValueHolderBase* ThreadLocalRegistry::GetValueOnCurrentThread(
        -:  648:    const ThreadLocalBase* thread_local_instance) {
    #####:  649:  return ThreadLocalRegistryImpl::GetValueOnCurrentThread(
    %%%%%:  649-block  0
call    0 never executed
    #####:  650:      thread_local_instance);
        -:  651:}
        -:  652:
function _ZN7testing8internal19ThreadLocalRegistry22OnThreadLocalDestroyedEPKNS0_15ThreadLocalBaseE called 0 returned 0% blocks executed 0%
    #####:  653:void ThreadLocalRegistry::OnThreadLocalDestroyed(
        -:  654:    const ThreadLocalBase* thread_local_instance) {
    #####:  655:  ThreadLocalRegistryImpl::OnThreadLocalDestroyed(thread_local_instance);
    %%%%%:  655-block  0
call    0 never executed
    #####:  656:}
        -:  657:
        -:  658:#endif  // GTEST_IS_THREADSAFE && GTEST_OS_WINDOWS
        -:  659:
        -:  660:#ifdef GTEST_USES_POSIX_RE
        -:  661:
        -:  662:// Implements RE.  Currently only needed for death test.
        -:  663:
        -:  664:RE::~RE() {
        -:  665:  if (is_valid_) {
        -:  666:    // regfree'ing an invalid regex might crash because the content
        -:  667:    // of the regex is undefined. Since the regex's are essentially
        -:  668:    // the same, one cannot be valid (or invalid) without the other
        -:  669:    // being so too.
        -:  670:    regfree(&partial_regex_);
        -:  671:    regfree(&full_regex_);
        -:  672:  }
        -:  673:}
        -:  674:
        -:  675:// Returns true if and only if regular expression re matches the entire str.
        -:  676:bool RE::FullMatch(const char* str, const RE& re) {
        -:  677:  if (!re.is_valid_) return false;
        -:  678:
        -:  679:  regmatch_t match;
        -:  680:  return regexec(&re.full_regex_, str, 1, &match, 0) == 0;
        -:  681:}
        -:  682:
        -:  683:// Returns true if and only if regular expression re matches a substring of
        -:  684:// str (including str itself).
        -:  685:bool RE::PartialMatch(const char* str, const RE& re) {
        -:  686:  if (!re.is_valid_) return false;
        -:  687:
        -:  688:  regmatch_t match;
        -:  689:  return regexec(&re.partial_regex_, str, 1, &match, 0) == 0;
        -:  690:}
        -:  691:
        -:  692:// Initializes an RE from its string representation.
        -:  693:void RE::Init(const char* regex) {
        -:  694:  pattern_ = regex;
        -:  695:
        -:  696:  // Reserves enough bytes to hold the regular expression used for a
        -:  697:  // full match.
        -:  698:  const size_t full_regex_len = strlen(regex) + 10;
        -:  699:  char* const full_pattern = new char[full_regex_len];
        -:  700:
        -:  701:  snprintf(full_pattern, full_regex_len, "^(%s)$", regex);
        -:  702:  is_valid_ = regcomp(&full_regex_, full_pattern, REG_EXTENDED) == 0;
        -:  703:  // We want to call regcomp(&partial_regex_, ...) even if the
        -:  704:  // previous expression returns false.  Otherwise partial_regex_ may
        -:  705:  // not be properly initialized can may cause trouble when it's
        -:  706:  // freed.
        -:  707:  //
        -:  708:  // Some implementation of POSIX regex (e.g. on at least some
        -:  709:  // versions of Cygwin) doesn't accept the empty string as a valid
        -:  710:  // regex.  We change it to an equivalent form "()" to be safe.
        -:  711:  if (is_valid_) {
        -:  712:    const char* const partial_regex = (*regex == '\0') ? "()" : regex;
        -:  713:    is_valid_ = regcomp(&partial_regex_, partial_regex, REG_EXTENDED) == 0;
        -:  714:  }
        -:  715:  EXPECT_TRUE(is_valid_)
        -:  716:      << "Regular expression \"" << regex
        -:  717:      << "\" is not a valid POSIX Extended regular expression.";
        -:  718:
        -:  719:  delete[] full_pattern;
        -:  720:}
        -:  721:
        -:  722:#elif defined(GTEST_USES_SIMPLE_RE)
        -:  723:
        -:  724:// Returns true if and only if ch appears anywhere in str (excluding the
        -:  725:// terminating '\0' character).
function _ZN7testing8internal7IsInSetEcPKc called 0 returned 0% blocks executed 0%
    #####:  726:bool IsInSet(char ch, const char* str) {
    #####:  727:  return ch != '\0' && strchr(str, ch) != nullptr;
    %%%%%:  727-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  727-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  727-block  2
    %%%%%:  727-block  3
    %%%%%:  727-block  4
        -:  728:}
        -:  729:
        -:  730:// Returns true if and only if ch belongs to the given classification.
        -:  731:// Unlike similar functions in <ctype.h>, these aren't affected by the
        -:  732:// current locale.
function _ZN7testing8internal12IsAsciiDigitEc called 0 returned 0% blocks executed 0%
    #####:  733:bool IsAsciiDigit(char ch) { return '0' <= ch && ch <= '9'; }
    %%%%%:  733-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  733-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  733-block  2
    %%%%%:  733-block  3
    %%%%%:  733-block  4
function _ZN7testing8internal12IsAsciiPunctEc called 0 returned 0% blocks executed 0%
    #####:  734:bool IsAsciiPunct(char ch) {
    #####:  735:  return IsInSet(ch, "^-!\"#$%&'()*+,./:;<=>?@[\\]_`{|}~");
    %%%%%:  735-block  0
call    0 never executed
        -:  736:}
function _ZN7testing8internal8IsRepeatEc called 0 returned 0% blocks executed 0%
    #####:  737:bool IsRepeat(char ch) { return IsInSet(ch, "?*+"); }
    %%%%%:  737-block  0
call    0 never executed
function _ZN7testing8internal17IsAsciiWhiteSpaceEc called 0 returned 0% blocks executed 0%
    #####:  738:bool IsAsciiWhiteSpace(char ch) { return IsInSet(ch, " \f\n\r\t\v"); }
    %%%%%:  738-block  0
call    0 never executed
function _ZN7testing8internal15IsAsciiWordCharEc called 0 returned 0% blocks executed 0%
    #####:  739:bool IsAsciiWordChar(char ch) {
    #####:  740:  return ('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') ||
    %%%%%:  740-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  740-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  740-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  740-block  3
branch  6 never executed
branch  7 never executed
    #####:  741:         ('0' <= ch && ch <= '9') || ch == '_';
    %%%%%:  741-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  741-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  741-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  741-block  3
    %%%%%:  741-block  4
    %%%%%:  741-block  5
        -:  742:}
        -:  743:
        -:  744:// Returns true if and only if "\\c" is a supported escape sequence.
function _ZN7testing8internal13IsValidEscapeEc called 0 returned 0% blocks executed 0%
    #####:  745:bool IsValidEscape(char c) {
    #####:  746:  return (IsAsciiPunct(c) || IsInSet(c, "dDfnrsStvwW"));
    %%%%%:  746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  746-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  746-block  2
    %%%%%:  746-block  3
    %%%%%:  746-block  4
        -:  747:}
        -:  748:
        -:  749:// Returns true if and only if the given atom (specified by escaped and
        -:  750:// pattern) matches ch.  The result is undefined if the atom is invalid.
function _ZN7testing8internal15AtomMatchesCharEbcc called 0 returned 0% blocks executed 0%
    #####:  751:bool AtomMatchesChar(bool escaped, char pattern_char, char ch) {
    #####:  752:  if (escaped) {  // "\\p" where p is pattern_char.
    %%%%%:  752-block  0
branch  0 never executed
branch  1 never executed
    #####:  753:    switch (pattern_char) {
    %%%%%:  753-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  754:      case 'd':
    #####:  755:        return IsAsciiDigit(ch);
    %%%%%:  755-block  0
call    0 never executed
    #####:  756:      case 'D':
    #####:  757:        return !IsAsciiDigit(ch);
    %%%%%:  757-block  0
call    0 never executed
    #####:  758:      case 'f':
    #####:  759:        return ch == '\f';
    %%%%%:  759-block  0
    #####:  760:      case 'n':
    #####:  761:        return ch == '\n';
    %%%%%:  761-block  0
    #####:  762:      case 'r':
    #####:  763:        return ch == '\r';
    %%%%%:  763-block  0
    #####:  764:      case 's':
    #####:  765:        return IsAsciiWhiteSpace(ch);
    %%%%%:  765-block  0
call    0 never executed
    #####:  766:      case 'S':
    #####:  767:        return !IsAsciiWhiteSpace(ch);
    %%%%%:  767-block  0
call    0 never executed
    #####:  768:      case 't':
    #####:  769:        return ch == '\t';
    %%%%%:  769-block  0
    #####:  770:      case 'v':
    #####:  771:        return ch == '\v';
    %%%%%:  771-block  0
    #####:  772:      case 'w':
    #####:  773:        return IsAsciiWordChar(ch);
    %%%%%:  773-block  0
call    0 never executed
    #####:  774:      case 'W':
    #####:  775:        return !IsAsciiWordChar(ch);
    %%%%%:  775-block  0
call    0 never executed
        -:  776:    }
    #####:  777:    return IsAsciiPunct(pattern_char) && pattern_char == ch;
    %%%%%:  777-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  777-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  777-block  2
    %%%%%:  777-block  3
    %%%%%:  777-block  4
        -:  778:  }
        -:  779:
    #####:  780:  return (pattern_char == '.' && ch != '\n') || pattern_char == ch;
    %%%%%:  780-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  780-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  780-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  780-block  3
    %%%%%:  780-block  4
    %%%%%:  780-block  5
        -:  781:}
        -:  782:
        -:  783:// Helper function used by ValidateRegex() to format error messages.
function _ZN7testing8internalL22FormatRegexSyntaxErrorEPKci called 0 returned 0% blocks executed 0%
    #####:  784:static std::string FormatRegexSyntaxError(const char* regex, int index) {
    #####:  785:  return (Message() << "Syntax error at index " << index
    %%%%%:  785-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  785-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  785-block  2
call    7 never executed
    $$$$$:  785-block  3
call    8 never executed
    #####:  786:                    << " in simple regular expression \"" << regex << "\": ")
    %%%%%:  786-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  786-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  786-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  787:      .GetString();
    %%%%%:  787-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  787-block  1
        -:  788:}
        -:  789:
        -:  790:// Generates non-fatal failures and returns false if regex is invalid;
        -:  791:// otherwise returns true.
function _ZN7testing8internal13ValidateRegexEPKc called 0 returned 0% blocks executed 0%
    #####:  792:bool ValidateRegex(const char* regex) {
    #####:  793:  if (regex == nullptr) {
    %%%%%:  793-block  0
branch  0 never executed
branch  1 never executed
    #####:  794:    ADD_FAILURE() << "NULL is not a valid simple regular expression.";
    %%%%%:  794-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  794-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  794-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  794-block  3
call   10 never executed
call   11 never executed
    $$$$$:  794-block  4
call   12 never executed
    $$$$$:  794-block  5
    $$$$$:  794-block  6
call   13 never executed
    $$$$$:  794-block  7
call   14 never executed
    #####:  795:    return false;
        -:  796:  }
        -:  797:
    #####:  798:  bool is_valid = true;
        -:  799:
        -:  800:  // True if and only if ?, *, or + can follow the previous atom.
    #####:  801:  bool prev_repeatable = false;
    #####:  802:  for (int i = 0; regex[i]; i++) {
    %%%%%:  802-block  0
    %%%%%:  802-block  1
    %%%%%:  802-block  2
branch  0 never executed
branch  1 never executed
    #####:  803:    if (regex[i] == '\\') {  // An escape sequence
    %%%%%:  803-block  0
branch  0 never executed
branch  1 never executed
    #####:  804:      i++;
    #####:  805:      if (regex[i] == '\0') {
    %%%%%:  805-block  0
branch  0 never executed
branch  1 never executed
    #####:  806:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)
    %%%%%:  806-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  806-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  806-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  806-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  806-block  4
call   13 never executed
    $$$$$:  806-block  5
    $$$$$:  806-block  6
call   14 never executed
    $$$$$:  806-block  7
    $$$$$:  806-block  8
call   15 never executed
    $$$$$:  806-block  9
call   16 never executed
    #####:  807:                      << "'\\' cannot appear at the end.";
    %%%%%:  807-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  807-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  808:        return false;
        -:  809:      }
        -:  810:
    #####:  811:      if (!IsValidEscape(regex[i])) {
    %%%%%:  811-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  812:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)
    %%%%%:  812-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  812-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  812-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  812-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  812-block  4
call   13 never executed
    $$$$$:  812-block  5
    $$$$$:  812-block  6
call   14 never executed
    $$$$$:  812-block  7
    $$$$$:  812-block  8
call   15 never executed
    $$$$$:  812-block  9
call   16 never executed
    #####:  813:                      << "invalid escape sequence \"\\" << regex[i] << "\".";
    %%%%%:  813-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  813-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  813-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  813-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  814:        is_valid = false;
        -:  815:      }
    #####:  816:      prev_repeatable = true;
    %%%%%:  816-block  0
        -:  817:    } else {  // Not an escape sequence.
    #####:  818:      const char ch = regex[i];
        -:  819:
    #####:  820:      if (ch == '^' && i > 0) {
    %%%%%:  820-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  820-block  1
branch  2 never executed
branch  3 never executed
    #####:  821:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)
    %%%%%:  821-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  821-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  821-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  821-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  821-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:  821-block  5
call   15 never executed
    $$$$$:  821-block  6
    $$$$$:  821-block  7
call   16 never executed
    $$$$$:  821-block  8
    $$$$$:  821-block  9
call   17 never executed
    $$$$$:  821-block 10
    #####:  822:                      << "'^' can only appear at the beginning.";
    %%%%%:  822-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  822-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  823:        is_valid = false;
    #####:  824:      } else if (ch == '$' && regex[i + 1] != '\0') {
    %%%%%:  824-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  824-block  1
branch  2 never executed
branch  3 never executed
    #####:  825:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)
    %%%%%:  825-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  825-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  825-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  825-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  825-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:  825-block  5
call   15 never executed
    $$$$$:  825-block  6
    $$$$$:  825-block  7
call   16 never executed
    $$$$$:  825-block  8
    $$$$$:  825-block  9
call   17 never executed
    $$$$$:  825-block 10
    #####:  826:                      << "'$' can only appear at the end.";
    %%%%%:  826-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  826-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  827:        is_valid = false;
    #####:  828:      } else if (IsInSet(ch, "()[]{}|")) {
    %%%%%:  828-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  829:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i) << "'" << ch
    %%%%%:  829-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  829-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  829-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  829-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  829-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  829-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:  829-block  6
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$:  829-block  7
call   21 never executed
    $$$$$:  829-block  8
    $$$$$:  829-block  9
call   22 never executed
    $$$$$:  829-block 10
    $$$$$:  829-block 11
call   23 never executed
    $$$$$:  829-block 12
    #####:  830:                      << "' is unsupported.";
    %%%%%:  830-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  830-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  831:        is_valid = false;
    #####:  832:      } else if (IsRepeat(ch) && !prev_repeatable) {
    %%%%%:  832-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  832-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  832-block  2
    %%%%%:  832-block  3
    %%%%%:  832-block  4
branch  5 never executed
branch  6 never executed
    #####:  833:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i) << "'" << ch
    %%%%%:  833-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  833-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  833-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  833-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  833-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  833-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:  833-block  6
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$:  833-block  7
call   21 never executed
    $$$$$:  833-block  8
    $$$$$:  833-block  9
call   22 never executed
    $$$$$:  833-block 10
    $$$$$:  833-block 11
call   23 never executed
    $$$$$:  833-block 12
    #####:  834:                      << "' can only follow a repeatable token.";
    %%%%%:  834-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  834-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  835:        is_valid = false;
        -:  836:      }
        -:  837:
    #####:  838:      prev_repeatable = !IsInSet(ch, "^$?*+");
    %%%%%:  838-block  0
call    0 never executed
        -:  839:    }
        -:  840:  }
        -:  841:
    #####:  842:  return is_valid;
    %%%%%:  842-block  0
        -:  843:}
        -:  844:
        -:  845:// Matches a repeated regex atom followed by a valid simple regular
        -:  846:// expression.  The regex atom is defined as c if escaped is false,
        -:  847:// or \c otherwise.  repeat is the repetition meta character (?, *,
        -:  848:// or +).  The behavior is undefined if str contains too many
        -:  849:// characters to be indexable by size_t, in which case the test will
        -:  850:// probably time out anyway.  We are fine with this limitation as
        -:  851:// std::string has it too.
function _ZN7testing8internal29MatchRepetitionAndRegexAtHeadEbccPKcS2_ called 0 returned 0% blocks executed 0%
    #####:  852:bool MatchRepetitionAndRegexAtHead(bool escaped, char c, char repeat,
        -:  853:                                   const char* regex, const char* str) {
    #####:  854:  const size_t min_count = (repeat == '+') ? 1 : 0;
    %%%%%:  854-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  854-block  1
    %%%%%:  854-block  2
    #####:  855:  const size_t max_count = (repeat == '?') ? 1 : static_cast<size_t>(-1) - 1;
    %%%%%:  855-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  855-block  1
    %%%%%:  855-block  2
        -:  856:  // We cannot call numeric_limits::max() as it conflicts with the
        -:  857:  // max() macro on Windows.
        -:  858:
    #####:  859:  for (size_t i = 0; i <= max_count; ++i) {
    %%%%%:  859-block  0
    %%%%%:  859-block  1
    %%%%%:  859-block  2
branch  0 never executed
branch  1 never executed
        -:  860:    // We know that the atom matches each of the first i characters in str.
    #####:  861:    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {
    %%%%%:  861-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  861-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  861-block  2
    %%%%%:  861-block  3
    %%%%%:  861-block  4
branch  5 never executed
branch  6 never executed
        -:  862:      // We have enough matches at the head, and the tail matches too.
        -:  863:      // Since we only care about *whether* the pattern matches str
        -:  864:      // (as opposed to *how* it matches), there is no need to find a
        -:  865:      // greedy match.
    #####:  866:      return true;
    %%%%%:  866-block  0
        -:  867:    }
    #####:  868:    if (str[i] == '\0' || !AtomMatchesChar(escaped, c, str[i])) return false;
    %%%%%:  868-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  868-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  868-block  2
    %%%%%:  868-block  3
    %%%%%:  868-block  4
branch  5 never executed
branch  6 never executed
    %%%%%:  868-block  5
        -:  869:  }
    #####:  870:  return false;
    %%%%%:  870-block  0
        -:  871:}
        -:  872:
        -:  873:// Returns true if and only if regex matches a prefix of str. regex must
        -:  874:// be a valid simple regular expression and not start with "^", or the
        -:  875:// result is undefined.
function _ZN7testing8internal16MatchRegexAtHeadEPKcS2_ called 0 returned 0% blocks executed 0%
    #####:  876:bool MatchRegexAtHead(const char* regex, const char* str) {
    #####:  877:  if (*regex == '\0')  // An empty regex matches a prefix of anything.
    %%%%%:  877-block  0
branch  0 never executed
branch  1 never executed
    #####:  878:    return true;
    %%%%%:  878-block  0
        -:  879:
        -:  880:  // "$" only matches the end of a string.  Note that regex being
        -:  881:  // valid guarantees that there's nothing after "$" in it.
    #####:  882:  if (*regex == '$') return *str == '\0';
    %%%%%:  882-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  882-block  1
        -:  883:
        -:  884:  // Is the first thing in regex an escape sequence?
    #####:  885:  const bool escaped = *regex == '\\';
    #####:  886:  if (escaped) ++regex;
    %%%%%:  886-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  886-block  1
    #####:  887:  if (IsRepeat(regex[1])) {
    %%%%%:  887-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  888:    // MatchRepetitionAndRegexAtHead() calls MatchRegexAtHead(), so
        -:  889:    // here's an indirect recursion.  It terminates as the regex gets
        -:  890:    // shorter in each recursion.
    #####:  891:    return MatchRepetitionAndRegexAtHead(escaped, regex[0], regex[1], regex + 2,
    %%%%%:  891-block  0
call    0 never executed
    #####:  892:                                         str);
        -:  893:  } else {
        -:  894:    // regex isn't empty, isn't "$", and doesn't start with a
        -:  895:    // repetition.  We match the first atom of regex with the first
        -:  896:    // character of str and recurse.
    #####:  897:    return (*str != '\0') && AtomMatchesChar(escaped, *regex, *str) &&
    %%%%%:  897-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  897-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  897-block  2
    %%%%%:  897-block  3
    #####:  898:           MatchRegexAtHead(regex + 1, str + 1);
    %%%%%:  898-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  898-block  1
        -:  899:  }
        -:  900:}
        -:  901:
        -:  902:// Returns true if and only if regex matches any substring of str.  regex must
        -:  903:// be a valid simple regular expression, or the result is undefined.
        -:  904://
        -:  905:// The algorithm is recursive, but the recursion depth doesn't exceed
        -:  906:// the regex length, so we won't need to worry about running out of
        -:  907:// stack space normally.  In rare cases the time complexity can be
        -:  908:// exponential with respect to the regex length + the string length,
        -:  909:// but usually it's must faster (often close to linear).
function _ZN7testing8internal18MatchRegexAnywhereEPKcS2_ called 0 returned 0% blocks executed 0%
    #####:  910:bool MatchRegexAnywhere(const char* regex, const char* str) {
    #####:  911:  if (regex == nullptr || str == nullptr) return false;
    %%%%%:  911-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  911-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  911-block  2
        -:  912:
    #####:  913:  if (*regex == '^') return MatchRegexAtHead(regex + 1, str);
    %%%%%:  913-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  913-block  1
call    2 never executed
        -:  914:
        -:  915:  // A successful match can be anywhere in str.
        -:  916:  do {
    #####:  917:    if (MatchRegexAtHead(regex, str)) return true;
    %%%%%:  917-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  917-block  1
    #####:  918:  } while (*str++ != '\0');
    %%%%%:  918-block  0
branch  0 never executed
branch  1 never executed
    #####:  919:  return false;
    %%%%%:  919-block  0
        -:  920:}
        -:  921:
        -:  922:// Implements the RE class.
        -:  923:
function _ZN7testing8internal2RED2Ev called 0 returned 0% blocks executed 0%
    #####:  924:RE::~RE() = default;
    %%%%%:  924-block  0
call    0 never executed
call    1 never executed
        -:  925:
        -:  926:// Returns true if and only if regular expression re matches the entire str.
function _ZN7testing8internal2RE9FullMatchEPKcRKS1_ called 0 returned 0% blocks executed 0%
    #####:  927:bool RE::FullMatch(const char* str, const RE& re) {
    #####:  928:  return re.is_valid_ && MatchRegexAnywhere(re.full_pattern_.c_str(), str);
    %%%%%:  928-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  928-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  928-block  2
    %%%%%:  928-block  3
    %%%%%:  928-block  4
        -:  929:}
        -:  930:
        -:  931:// Returns true if and only if regular expression re matches a substring of
        -:  932:// str (including str itself).
function _ZN7testing8internal2RE12PartialMatchEPKcRKS1_ called 0 returned 0% blocks executed 0%
    #####:  933:bool RE::PartialMatch(const char* str, const RE& re) {
    #####:  934:  return re.is_valid_ && MatchRegexAnywhere(re.pattern_.c_str(), str);
    %%%%%:  934-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  934-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  934-block  2
    %%%%%:  934-block  3
    %%%%%:  934-block  4
        -:  935:}
        -:  936:
        -:  937:// Initializes an RE from its string representation.
function _ZN7testing8internal2RE4InitEPKc called 0 returned 0% blocks executed 0%
    #####:  938:void RE::Init(const char* regex) {
    #####:  939:  full_pattern_.clear();
    %%%%%:  939-block  0
call    0 never executed
    #####:  940:  pattern_.clear();
call    0 never executed
        -:  941:
    #####:  942:  if (regex != nullptr) {
branch  0 never executed
branch  1 never executed
    #####:  943:    pattern_ = regex;
    %%%%%:  943-block  0
call    0 never executed
        -:  944:  }
        -:  945:
    #####:  946:  is_valid_ = ValidateRegex(regex);
    %%%%%:  946-block  0
call    0 never executed
    #####:  947:  if (!is_valid_) {
branch  0 never executed
branch  1 never executed
        -:  948:    // No need to calculate the full pattern when the regex is invalid.
    #####:  949:    return;
    %%%%%:  949-block  0
        -:  950:  }
        -:  951:
        -:  952:  // Reserves enough bytes to hold the regular expression used for a
        -:  953:  // full match: we need space to prepend a '^' and append a '$'.
    #####:  954:  full_pattern_.reserve(pattern_.size() + 2);
    %%%%%:  954-block  0
call    0 never executed
call    1 never executed
        -:  955:
    #####:  956:  if (pattern_.empty() || pattern_.front() != '^') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  956-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  956-block  1
    %%%%%:  956-block  2
    %%%%%:  956-block  3
branch  6 never executed
branch  7 never executed
    #####:  957:    full_pattern_.push_back('^');  // Makes sure full_pattern_ starts with '^'.
    %%%%%:  957-block  0
call    0 never executed
        -:  958:  }
        -:  959:
    #####:  960:  full_pattern_.append(pattern_);
    %%%%%:  960-block  0
call    0 never executed
        -:  961:
    #####:  962:  if (pattern_.empty() || pattern_.back() != '$') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  962-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  962-block  1
    %%%%%:  962-block  2
    %%%%%:  962-block  3
branch  6 never executed
branch  7 never executed
    #####:  963:    full_pattern_.push_back('$');  // Makes sure full_pattern_ ends with '$'.
    %%%%%:  963-block  0
call    0 never executed
        -:  964:  }
        -:  965:}
        -:  966:
        -:  967:#endif  // GTEST_USES_POSIX_RE
        -:  968:
        -:  969:const char kUnknownFile[] = "unknown file";
        -:  970:
        -:  971:// Formats a source file path and a line number as they would appear
        -:  972:// in an error message from the compiler used to compile this code.
function _ZN7testing8internal18FormatFileLocationB5cxx11EPKci called 0 returned 0% blocks executed 0%
    #####:  973:GTEST_API_ ::std::string FormatFileLocation(const char* file, int line) {
    #####:  974:  const std::string file_name(file == nullptr ? kUnknownFile : file);
    %%%%%:  974-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  974-block  1
    %%%%%:  974-block  2
    %%%%%:  974-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  974-block  4
        -:  975:
    #####:  976:  if (line < 0) {
branch  0 never executed
branch  1 never executed
    #####:  977:    return file_name + ":";
    %%%%%:  977-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  978:  }
        -:  979:#ifdef _MSC_VER
        -:  980:  return file_name + "(" + StreamableToString(line) + "):";
        -:  981:#else
    #####:  982:  return file_name + ":" + StreamableToString(line) + ":";
    %%%%%:  982-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  982-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  982-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  982-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  982-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:  982-block  5
call   15 never executed
    $$$$$:  982-block  6
    $$$$$:  982-block  7
call   16 never executed
    $$$$$:  982-block  8
    $$$$$:  982-block  9
call   17 never executed
    $$$$$:  982-block 10
        -:  983:#endif  // _MSC_VER
    #####:  984:}
    %%%%%:  984-block  0
call    0 never executed
    $$$$$:  984-block  1
call    1 never executed
        -:  985:
        -:  986:// Formats a file location for compiler-independent XML output.
        -:  987:// Although this function is not platform dependent, we put it next to
        -:  988:// FormatFileLocation in order to contrast the two functions.
        -:  989:// Note that FormatCompilerIndependentFileLocation() does NOT append colon
        -:  990:// to the file location it produces, unlike FormatFileLocation().
function _ZN7testing8internal37FormatCompilerIndependentFileLocationB5cxx11EPKci called 0 returned 0% blocks executed 0%
    #####:  991:GTEST_API_ ::std::string FormatCompilerIndependentFileLocation(const char* file,
        -:  992:                                                               int line) {
    #####:  993:  const std::string file_name(file == nullptr ? kUnknownFile : file);
    %%%%%:  993-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  993-block  1
    %%%%%:  993-block  2
    %%%%%:  993-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  993-block  4
        -:  994:
    #####:  995:  if (line < 0)
branch  0 never executed
branch  1 never executed
    #####:  996:    return file_name;
    %%%%%:  996-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  997:  else
    #####:  998:    return file_name + ":" + StreamableToString(line);
    %%%%%:  998-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  998-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  998-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  998-block  3
call    9 never executed
call   10 never executed
    $$$$$:  998-block  4
call   11 never executed
    $$$$$:  998-block  5
    $$$$$:  998-block  6
call   12 never executed
    $$$$$:  998-block  7
    #####:  999:}
    %%%%%:  999-block  0
call    0 never executed
    $$$$$:  999-block  1
call    1 never executed
        -: 1000:
function _ZN7testing8internal8GTestLogC2ENS0_16GTestLogSeverityEPKci called 0 returned 0% blocks executed 0%
    #####: 1001:GTestLog::GTestLog(GTestLogSeverity severity, const char* file, int line)
    #####: 1002:    : severity_(severity) {
    #####: 1003:  const char* const marker = severity == GTEST_INFO      ? "[  INFO ]"
    %%%%%: 1003-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1003-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1003-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 1003-block  3
    %%%%%: 1003-block  4
    %%%%%: 1003-block  5
    %%%%%: 1003-block  6
    %%%%%: 1003-block  7
    %%%%%: 1003-block  8
        -: 1004:                             : severity == GTEST_WARNING ? "[WARNING]"
        -: 1005:                             : severity == GTEST_ERROR   ? "[ ERROR ]"
        -: 1006:                                                         : "[ FATAL ]";
    #####: 1007:  GetStream() << ::std::endl
    %%%%%: 1007-block  0
call    0 never executed
call    1 never executed
    #####: 1008:              << marker << " " << FormatFileLocation(file, line).c_str()
    %%%%%: 1008-block  0
call    0 never executed
    $$$$$: 1008-block  1
call    1 never executed
    #####: 1009:              << ": ";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1009-block  0
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1010:}
        -: 1011:
        -: 1012:// Flushes the buffers and, if severity is GTEST_FATAL, aborts the program.
function _ZN7testing8internal8GTestLogD2Ev called 0 returned 0% blocks executed 0%
    #####: 1013:GTestLog::~GTestLog() {
    #####: 1014:  GetStream() << ::std::endl;
    %%%%%: 1014-block  0
call    0 never executed
call    1 never executed
    #####: 1015:  if (severity_ == GTEST_FATAL) {
branch  0 never executed
branch  1 never executed
    #####: 1016:    fflush(stderr);
    %%%%%: 1016-block  0
call    0 never executed
call    1 never executed
    #####: 1017:    posix::Abort();
call    0 never executed
        -: 1018:  }
    #####: 1019:}
        -: 1020:
        -: 1021:// Disable Microsoft deprecation warnings for POSIX functions called from
        -: 1022:// this class (creat, dup, dup2, and close)
        -: 1023:GTEST_DISABLE_MSC_DEPRECATED_PUSH_()
        -: 1024:
        -: 1025:#if GTEST_HAS_STREAM_REDIRECTION
        -: 1026:
        -: 1027:// Object that captures an output stream (stdout/stderr).
        -: 1028:class CapturedStream {
        -: 1029: public:
        -: 1030:  // The ctor redirects the stream to a temporary file.
function _ZN7testing8internal14CapturedStreamC1Ei called 0 returned 0% blocks executed 0%
    #####: 1031:  explicit CapturedStream(int fd) : fd_(fd), uncaptured_fd_(dup(fd)) {
    %%%%%: 1031-block  0
call    0 never executed
call    1 never executed
        -: 1032:#ifdef GTEST_OS_WINDOWS
    #####: 1033:    char temp_dir_path[MAX_PATH + 1] = {'\0'};   // NOLINT
    #####: 1034:    char temp_file_path[MAX_PATH + 1] = {'\0'};  // NOLINT
        -: 1035:
    #####: 1036:    ::GetTempPathA(sizeof(temp_dir_path), temp_dir_path);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1037:    const UINT success = ::GetTempFileNameA(temp_dir_path, "gtest_redir",
    %%%%%: 1037-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1038:                                            0,  // Generate unique file name.
        -: 1039:                                            temp_file_path);
    #####: 1040:    GTEST_CHECK_(success != 0)
    %%%%%: 1040-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1040-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1040-block  2
call    6 never executed
    %%%%%: 1040-block  3
call    7 never executed
    $$$$$: 1040-block  4
call    8 never executed
    $$$$$: 1040-block  5
    #####: 1041:        << "Unable to create a temporary file in " << temp_dir_path;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1041-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1041-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1042:    const int captured_fd = creat(temp_file_path, _S_IREAD | _S_IWRITE);
    %%%%%: 1042-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1043:    GTEST_CHECK_(captured_fd != -1)
    %%%%%: 1043-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1043-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1043-block  2
call    6 never executed
    %%%%%: 1043-block  3
call    7 never executed
    $$$$$: 1043-block  4
call    8 never executed
    $$$$$: 1043-block  5
    #####: 1044:        << "Unable to open temporary file " << temp_file_path;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1044-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1044-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1045:    filename_ = temp_file_path;
    %%%%%: 1045-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1046:#else
        -: 1047:    // There's no guarantee that a test has write access to the current
        -: 1048:    // directory, so we create the temporary file in a temporary directory.
        -: 1049:    std::string name_template;
        -: 1050:
        -: 1051:#ifdef GTEST_OS_LINUX_ANDROID
        -: 1052:    // Note: Android applications are expected to call the framework's
        -: 1053:    // Context.getExternalStorageDirectory() method through JNI to get
        -: 1054:    // the location of the world-writable SD Card directory. However,
        -: 1055:    // this requires a Context handle, which cannot be retrieved
        -: 1056:    // globally from native code. Doing so also precludes running the
        -: 1057:    // code as part of a regular standalone executable, which doesn't
        -: 1058:    // run in a Dalvik process (e.g. when running it through 'adb shell').
        -: 1059:    //
        -: 1060:    // The location /data/local/tmp is directly accessible from native code.
        -: 1061:    // '/sdcard' and other variants cannot be relied on, as they are not
        -: 1062:    // guaranteed to be mounted, or may have a delay in mounting.
        -: 1063:    name_template = "/data/local/tmp/";
        -: 1064:#elif defined(GTEST_OS_IOS)
        -: 1065:    char user_temp_dir[PATH_MAX + 1];
        -: 1066:
        -: 1067:    // Documented alternative to NSTemporaryDirectory() (for obtaining creating
        -: 1068:    // a temporary directory) at
        -: 1069:    // https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html#//apple_ref/doc/uid/TP40002585-SW10
        -: 1070:    //
        -: 1071:    // _CS_DARWIN_USER_TEMP_DIR (as well as _CS_DARWIN_USER_CACHE_DIR) is not
        -: 1072:    // documented in the confstr() man page at
        -: 1073:    // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/confstr.3.html#//apple_ref/doc/man/3/confstr
        -: 1074:    // but are still available, according to the WebKit patches at
        -: 1075:    // https://trac.webkit.org/changeset/262004/webkit
        -: 1076:    // https://trac.webkit.org/changeset/263705/webkit
        -: 1077:    //
        -: 1078:    // The confstr() implementation falls back to getenv("TMPDIR"). See
        -: 1079:    // https://opensource.apple.com/source/Libc/Libc-1439.100.3/gen/confstr.c.auto.html
        -: 1080:    ::confstr(_CS_DARWIN_USER_TEMP_DIR, user_temp_dir, sizeof(user_temp_dir));
        -: 1081:
        -: 1082:    name_template = user_temp_dir;
        -: 1083:    if (name_template.back() != GTEST_PATH_SEP_[0])
        -: 1084:      name_template.push_back(GTEST_PATH_SEP_[0]);
        -: 1085:#else
        -: 1086:    name_template = "/tmp/";
        -: 1087:#endif
        -: 1088:    name_template.append("gtest_captured_stream.XXXXXX");
        -: 1089:
        -: 1090:    // mkstemp() modifies the string bytes in place, and does not go beyond the
        -: 1091:    // string's length. This results in well-defined behavior in C++17.
        -: 1092:    //
        -: 1093:    // The const_cast is needed below C++17. The constraints on std::string
        -: 1094:    // implementations in C++11 and above make assumption behind the const_cast
        -: 1095:    // fairly safe.
        -: 1096:    const int captured_fd = ::mkstemp(const_cast<char*>(name_template.data()));
        -: 1097:    if (captured_fd == -1) {
        -: 1098:      GTEST_LOG_(WARNING)
        -: 1099:          << "Failed to create tmp file " << name_template
        -: 1100:          << " for test; does the test have access to the /tmp directory?";
        -: 1101:    }
        -: 1102:    filename_ = std::move(name_template);
        -: 1103:#endif  // GTEST_OS_WINDOWS
    #####: 1104:    fflush(nullptr);
    %%%%%: 1104-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1105:    dup2(captured_fd, fd_);
    %%%%%: 1105-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1106:    close(captured_fd);
    %%%%%: 1106-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1107:  }
    %%%%%: 1107-block  0
    $$$$$: 1107-block  1
call    0 never executed
        -: 1108:
function _ZN7testing8internal14CapturedStreamD1Ev called 0 returned 0% blocks executed 0%
    #####: 1109:  ~CapturedStream() { remove(filename_.c_str()); }
    %%%%%: 1109-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1110:
function _ZN7testing8internal14CapturedStream17GetCapturedStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 1111:  std::string GetCapturedString() {
    #####: 1112:    if (uncaptured_fd_ != -1) {
    %%%%%: 1112-block  0
branch  0 never executed
branch  1 never executed
        -: 1113:      // Restores the original stream.
    #####: 1114:      fflush(nullptr);
    %%%%%: 1114-block  0
call    0 never executed
    #####: 1115:      dup2(uncaptured_fd_, fd_);
call    0 never executed
    #####: 1116:      close(uncaptured_fd_);
call    0 never executed
    #####: 1117:      uncaptured_fd_ = -1;
        -: 1118:    }
        -: 1119:
    #####: 1120:    FILE* const file = posix::FOpen(filename_.c_str(), "r");
    %%%%%: 1120-block  0
call    0 never executed
call    1 never executed
    #####: 1121:    if (file == nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 1122:      GTEST_LOG_(FATAL) << "Failed to open tmp file " << filename_
    %%%%%: 1122-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1122-block  1
call    2 never executed
    $$$$$: 1122-block  2
call    3 never executed
    $$$$$: 1122-block  3
call    4 never executed
    #####: 1123:                        << " for capturing stream.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1123-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1123-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1124:    }
    #####: 1125:    const std::string content = ReadEntireFile(file);
    %%%%%: 1125-block  0
call    0 never executed
    #####: 1126:    posix::FClose(file);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1127:    return content;
    %%%%%: 1127-block  0
    %%%%%: 1127-block  1
    =====: 1128:  }
    $$$$$: 1128-block  0
call    0 never executed
        -: 1129:
        -: 1130: private:
        -: 1131:  const int fd_;  // A stream to capture.
        -: 1132:  int uncaptured_fd_;
        -: 1133:  // Name of the temporary file holding the stderr output.
        -: 1134:  ::std::string filename_;
        -: 1135:
        -: 1136:  CapturedStream(const CapturedStream&) = delete;
        -: 1137:  CapturedStream& operator=(const CapturedStream&) = delete;
        -: 1138:};
        -: 1139:
        -: 1140:GTEST_DISABLE_MSC_DEPRECATED_POP_()
        -: 1141:
        -: 1142:static CapturedStream* g_captured_stderr = nullptr;
        -: 1143:static CapturedStream* g_captured_stdout = nullptr;
        -: 1144:
        -: 1145:// Starts capturing an output stream (stdout/stderr).
function _ZN7testing8internalL13CaptureStreamEiPKcPPNS0_14CapturedStreamE called 0 returned 0% blocks executed 0%
    #####: 1146:static void CaptureStream(int fd, const char* stream_name,
        -: 1147:                          CapturedStream** stream) {
    #####: 1148:  if (*stream != nullptr) {
    %%%%%: 1148-block  0
branch  0 never executed
branch  1 never executed
    #####: 1149:    GTEST_LOG_(FATAL) << "Only one " << stream_name
    %%%%%: 1149-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1149-block  1
call    2 never executed
    $$$$$: 1149-block  2
call    3 never executed
    $$$$$: 1149-block  3
call    4 never executed
    #####: 1150:                      << " capturer can exist at a time.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1150-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1150-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1151:  }
    #####: 1152:  *stream = new CapturedStream(fd);
    %%%%%: 1152-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1152-block  1
call    4 never executed
    #####: 1153:}
    %%%%%: 1153-block  0
        -: 1154:
        -: 1155:// Stops capturing the output stream and returns the captured string.
function _ZN7testing8internalL17GetCapturedStreamEPPNS0_14CapturedStreamE called 0 returned 0% blocks executed 0%
    #####: 1156:static std::string GetCapturedStream(CapturedStream** captured_stream) {
    #####: 1157:  const std::string content = (*captured_stream)->GetCapturedString();
    %%%%%: 1157-block  0
call    0 never executed
        -: 1158:
    #####: 1159:  delete *captured_stream;
branch  0 never executed
branch  1 never executed
    %%%%%: 1159-block  0
call    2 never executed
call    3 never executed
    #####: 1160:  *captured_stream = nullptr;
        -: 1161:
    #####: 1162:  return content;
    %%%%%: 1162-block  0
        -: 1163:}
        -: 1164:
        -: 1165:#if defined(_MSC_VER) || defined(__BORLANDC__)
        -: 1166:// MSVC and C++Builder do not provide a definition of STDERR_FILENO.
        -: 1167:const int kStdOutFileno = 1;
        -: 1168:const int kStdErrFileno = 2;
        -: 1169:#else
        -: 1170:const int kStdOutFileno = STDOUT_FILENO;
        -: 1171:const int kStdErrFileno = STDERR_FILENO;
        -: 1172:#endif  // defined(_MSC_VER) || defined(__BORLANDC__)
        -: 1173:
        -: 1174:// Starts capturing stdout.
function _ZN7testing8internal13CaptureStdoutEv called 0 returned 0% blocks executed 0%
    #####: 1175:void CaptureStdout() {
    #####: 1176:  CaptureStream(kStdOutFileno, "stdout", &g_captured_stdout);
    %%%%%: 1176-block  0
call    0 never executed
    #####: 1177:}
        -: 1178:
        -: 1179:// Starts capturing stderr.
function _ZN7testing8internal13CaptureStderrEv called 0 returned 0% blocks executed 0%
    #####: 1180:void CaptureStderr() {
    #####: 1181:  CaptureStream(kStdErrFileno, "stderr", &g_captured_stderr);
    %%%%%: 1181-block  0
call    0 never executed
    #####: 1182:}
        -: 1183:
        -: 1184:// Stops capturing stdout and returns the captured string.
function _ZN7testing8internal17GetCapturedStdoutB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 1185:std::string GetCapturedStdout() {
    #####: 1186:  return GetCapturedStream(&g_captured_stdout);
    %%%%%: 1186-block  0
call    0 never executed
        -: 1187:}
        -: 1188:
        -: 1189:// Stops capturing stderr and returns the captured string.
function _ZN7testing8internal17GetCapturedStderrB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 1190:std::string GetCapturedStderr() {
    #####: 1191:  return GetCapturedStream(&g_captured_stderr);
    %%%%%: 1191-block  0
call    0 never executed
        -: 1192:}
        -: 1193:
        -: 1194:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -: 1195:
function _ZN7testing8internal11GetFileSizeEP6_iobuf called 0 returned 0% blocks executed 0%
    #####: 1196:size_t GetFileSize(FILE* file) {
    #####: 1197:  fseek(file, 0, SEEK_END);
    %%%%%: 1197-block  0
call    0 never executed
    #####: 1198:  return static_cast<size_t>(ftell(file));
call    0 never executed
        -: 1199:}
        -: 1200:
function _ZN7testing8internal14ReadEntireFileB5cxx11EP6_iobuf called 0 returned 0% blocks executed 0%
    #####: 1201:std::string ReadEntireFile(FILE* file) {
    #####: 1202:  const size_t file_size = GetFileSize(file);
    %%%%%: 1202-block  0
call    0 never executed
    #####: 1203:  char* const buffer = new char[file_size];
call    0 never executed
        -: 1204:
    #####: 1205:  size_t bytes_last_read = 0;  // # of bytes read in the last fread()
    #####: 1206:  size_t bytes_read = 0;       // # of bytes read so far
        -: 1207:
    #####: 1208:  fseek(file, 0, SEEK_SET);
call    0 never executed
        -: 1209:
        -: 1210:  // Keeps reading the file until we cannot read further or the
        -: 1211:  // pre-determined file size is reached.
        -: 1212:  do {
        -: 1213:    bytes_last_read =
    #####: 1214:        fread(buffer + bytes_read, 1, file_size - bytes_read, file);
    %%%%%: 1214-block  0
call    0 never executed
    #####: 1215:    bytes_read += bytes_last_read;
    #####: 1216:  } while (bytes_last_read > 0 && bytes_read < file_size);
branch  0 never executed
branch  1 never executed
    %%%%%: 1216-block  0
branch  2 never executed
branch  3 never executed
        -: 1217:
    #####: 1218:  const std::string content(buffer, bytes_read);
    %%%%%: 1218-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1219:  delete[] buffer;
branch  0 never executed
branch  1 never executed
    %%%%%: 1219-block  0
call    2 never executed
        -: 1220:
    #####: 1221:  return content;
    %%%%%: 1221-block  0
    %%%%%: 1221-block  1
        -: 1222:}
        -: 1223:
        -: 1224:#ifdef GTEST_HAS_DEATH_TEST
        -: 1225:static const std::vector<std::string>* g_injected_test_argvs =
        -: 1226:    nullptr;  // Owned.
        -: 1227:
function _ZN7testing8internal18GetInjectableArgvsB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 1228:std::vector<std::string> GetInjectableArgvs() {
    #####: 1229:  if (g_injected_test_argvs != nullptr) {
    %%%%%: 1229-block  0
branch  0 never executed
branch  1 never executed
    #####: 1230:    return *g_injected_test_argvs;
    %%%%%: 1230-block  0
call    0 never executed
        -: 1231:  }
    #####: 1232:  return GetArgvs();
    %%%%%: 1232-block  0
call    0 never executed
        -: 1233:}
        -: 1234:
function _ZN7testing8internal18SetInjectableArgvsEPKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE called 0 returned 0% blocks executed 0%
    #####: 1235:void SetInjectableArgvs(const std::vector<std::string>* new_argvs) {
    #####: 1236:  if (g_injected_test_argvs != new_argvs) delete g_injected_test_argvs;
    %%%%%: 1236-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1236-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1236-block  2
call    4 never executed
call    5 never executed
    #####: 1237:  g_injected_test_argvs = new_argvs;
    #####: 1238:}
        -: 1239:
function _ZN7testing8internal18SetInjectableArgvsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE called 0 returned 0% blocks executed 0%
    #####: 1240:void SetInjectableArgvs(const std::vector<std::string>& new_argvs) {
    #####: 1241:  SetInjectableArgvs(
call    0 never executed
    %%%%%: 1241-block  0
call    1 never executed
call    2 never executed
    $$$$$: 1241-block  1
call    3 never executed
    $$$$$: 1241-block  2
    #####: 1242:      new std::vector<std::string>(new_argvs.begin(), new_argvs.end()));
    %%%%%: 1242-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1242-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 1242-block  2
call    8 never executed
    $$$$$: 1242-block  3
    #####: 1243:}
        -: 1244:
function _ZN7testing8internal20ClearInjectableArgvsEv called 0 returned 0% blocks executed 0%
    #####: 1245:void ClearInjectableArgvs() {
    #####: 1246:  delete g_injected_test_argvs;
    %%%%%: 1246-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1246-block  1
call    2 never executed
call    3 never executed
    #####: 1247:  g_injected_test_argvs = nullptr;
    #####: 1248:}
        -: 1249:#endif  // GTEST_HAS_DEATH_TEST
        -: 1250:
        -: 1251:#ifdef GTEST_OS_WINDOWS_MOBILE
        -: 1252:namespace posix {
        -: 1253:void Abort() {
        -: 1254:  DebugBreak();
        -: 1255:  TerminateProcess(GetCurrentProcess(), 1);
        -: 1256:}
        -: 1257:}  // namespace posix
        -: 1258:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1259:
        -: 1260:// Returns the name of the environment variable corresponding to the
        -: 1261:// given flag.  For example, FlagToEnvVar("foo") will return
        -: 1262:// "GTEST_FOO" in the open-source version.
function _ZN7testing8internalL12FlagToEnvVarEPKc called 21 returned 100% blocks executed 71%
       21: 1263:static std::string FlagToEnvVar(const char* flag) {
        -: 1264:  const std::string full_flag =
       21: 1265:      (Message() << GTEST_FLAG_PREFIX_ << flag).GetString();
       21: 1265-block  0
call    0 returned 21
branch  1 taken 21 (fallthrough)
branch  2 taken 0 (throw)
       21: 1265-block  1
call    3 returned 21
branch  4 taken 21 (fallthrough)
branch  5 taken 0 (throw)
       21: 1265-block  2
call    6 returned 21
branch  7 taken 21 (fallthrough)
branch  8 taken 0 (throw)
       21: 1265-block  3
call    9 returned 21
branch 10 taken 21 (fallthrough)
branch 11 taken 0 (throw)
    $$$$$: 1265-block  4
        -: 1266:
       21: 1267:  Message env_var;
call    0 returned 21
branch  1 taken 21 (fallthrough)
branch  2 taken 0 (throw)
      435: 1268:  for (size_t i = 0; i != full_flag.length(); i++) {
       21: 1268-block  0
      435: 1268-block  1
call    0 returned 435
branch  1 taken 414
branch  2 taken 21 (fallthrough)
      414: 1269:    env_var << ToUpper(full_flag.c_str()[i]);
      414: 1269-block  0
call    0 returned 414
call    1 returned 414
call    2 returned 414
branch  3 taken 414 (fallthrough)
branch  4 taken 0 (throw)
      414: 1269-block  1
    $$$$$: 1269-block  2
        -: 1270:  }
        -: 1271:
       42: 1272:  return env_var.GetString();
       21: 1272-block  0
call    0 returned 21
branch  1 taken 21 (fallthrough)
branch  2 taken 0 (throw)
       21: 1272-block  1
       21: 1273:}
       21: 1273-block  0
call    0 returned 21
call    1 returned 21
    $$$$$: 1273-block  1
call    2 never executed
    $$$$$: 1273-block  2
call    3 never executed
        -: 1274:
        -: 1275:// Parses 'str' for a 32-bit signed integer.  If successful, writes
        -: 1276:// the result to *value and returns true; otherwise leaves *value
        -: 1277:// unchanged and returns false.
function _ZN7testing8internal10ParseInt32ERKNS_7MessageEPKcPi called 0 returned 0% blocks executed 0%
    #####: 1278:bool ParseInt32(const Message& src_text, const char* str, int32_t* value) {
        -: 1279:  // Parses the environment variable as a decimal integer.
    #####: 1280:  char* end = nullptr;
    #####: 1281:  const long long_value = strtol(str, &end, 10);  // NOLINT
    %%%%%: 1281-block  0
call    0 never executed
        -: 1282:
        -: 1283:  // Has strtol() consumed all characters in the string?
    #####: 1284:  if (*end != '\0') {
branch  0 never executed
branch  1 never executed
        -: 1285:    // No - an invalid character was encountered.
    #####: 1286:    Message msg;
    %%%%%: 1286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1287:    msg << "WARNING: " << src_text
    %%%%%: 1287-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1287-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1288:        << " is expected to be a 32-bit integer, but actually"
    %%%%%: 1288-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1289:        << " has value \"" << str << "\".\n";
    %%%%%: 1289-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1289-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1289-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1290:    printf("%s", msg.GetString().c_str());
    %%%%%: 1290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1290-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1290-block  2
call    7 never executed
    $$$$$: 1290-block  3
call    8 never executed
    $$$$$: 1290-block  4
    #####: 1291:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1291-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1292:    return false;
    #####: 1293:  }
    %%%%%: 1293-block  0
call    0 never executed
    $$$$$: 1293-block  1
call    1 never executed
        -: 1294:
        -: 1295:  // Is the parsed value in the range of an int32_t?
    #####: 1296:  const auto result = static_cast<int32_t>(long_value);
    #####: 1297:  if (long_value == LONG_MAX || long_value == LONG_MIN ||
    %%%%%: 1297-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1297-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1297-block  2
branch  4 never executed
branch  5 never executed
        -: 1298:      // The parsed value overflows as a long.  (strtol() returns
        -: 1299:      // LONG_MAX or LONG_MIN when the input overflows.)
        -: 1300:      result != long_value
        -: 1301:      // The parsed value overflows as an int32_t.
        -: 1302:  ) {
    #####: 1303:    Message msg;
    %%%%%: 1303-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1304:    msg << "WARNING: " << src_text
    %%%%%: 1304-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1304-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1305:        << " is expected to be a 32-bit integer, but actually"
    %%%%%: 1305-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1306:        << " has value " << str << ", which overflows.\n";
    %%%%%: 1306-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1306-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1306-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1307:    printf("%s", msg.GetString().c_str());
    %%%%%: 1307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1307-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1307-block  2
call    7 never executed
    $$$$$: 1307-block  3
call    8 never executed
    $$$$$: 1307-block  4
    #####: 1308:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1308-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1309:    return false;
    #####: 1310:  }
    %%%%%: 1310-block  0
call    0 never executed
    $$$$$: 1310-block  1
call    1 never executed
        -: 1311:
    #####: 1312:  *value = result;
    #####: 1313:  return true;
    %%%%%: 1313-block  0
        -: 1314:}
        -: 1315:
        -: 1316:// Reads and returns the Boolean environment variable corresponding to
        -: 1317:// the given flag; if it's not set, returns default_value.
        -: 1318://
        -: 1319:// The value is considered true if and only if it's not "0".
function _ZN7testing8internal16BoolFromGTestEnvEPKcb called 12 returned 100% blocks executed 90%
       12: 1320:bool BoolFromGTestEnv(const char* flag, bool default_value) {
        -: 1321:#if defined(GTEST_GET_BOOL_FROM_ENV_)
        -: 1322:  return GTEST_GET_BOOL_FROM_ENV_(flag, default_value);
        -: 1323:#else
       12: 1324:  const std::string env_var = FlagToEnvVar(flag);
       12: 1324-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 1325:  const char* const string_value = posix::GetEnv(env_var.c_str());
       12: 1325-block  0
call    0 returned 12
call    1 returned 12
      12*: 1326:  return string_value == nullptr ? default_value
branch  0 taken 12 (fallthrough)
branch  1 taken 0
      24*: 1327:                                 : strcmp(string_value, "0") != 0;
       12: 1327-block  0
    %%%%%: 1327-block  1
       12: 1327-block  2
        -: 1328:#endif  // defined(GTEST_GET_BOOL_FROM_ENV_)
       12: 1329:}
       12: 1329-block  0
call    0 returned 12
        -: 1330:
        -: 1331:// Reads and returns a 32-bit integer stored in the environment
        -: 1332:// variable corresponding to the given flag; if it isn't set or
        -: 1333:// doesn't represent a valid 32-bit integer, returns default_value.
function _ZN7testing8internal17Int32FromGTestEnvEPKci called 3 returned 100% blocks executed 24%
        3: 1334:int32_t Int32FromGTestEnv(const char* flag, int32_t default_value) {
        -: 1335:#if defined(GTEST_GET_INT32_FROM_ENV_)
        -: 1336:  return GTEST_GET_INT32_FROM_ENV_(flag, default_value);
        -: 1337:#else
        3: 1338:  const std::string env_var = FlagToEnvVar(flag);
        3: 1338-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 1339:  const char* const string_value = posix::GetEnv(env_var.c_str());
        3: 1339-block  0
call    0 returned 3
call    1 returned 3
        3: 1340:  if (string_value == nullptr) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 1341:    // The environment variable is not set.
        3: 1342:    return default_value;
        3: 1342-block  0
        -: 1343:  }
        -: 1344:
    #####: 1345:  int32_t result = default_value;
    #####: 1346:  if (!ParseInt32(Message() << "Environment variable " << env_var, string_value,
    %%%%%: 1346-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1346-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1346-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1346-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1346-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 1346-block  5
call   15 never executed
    $$$$$: 1346-block  6
        -: 1347:                  &result)) {
    #####: 1348:    printf("The default value %s is used.\n",
    %%%%%: 1348-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1349:           (Message() << default_value).GetString().c_str());
    %%%%%: 1349-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1349-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1349-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1349-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1349-block  4
call   11 never executed
    $$$$$: 1349-block  5
    $$$$$: 1349-block  6
call   12 never executed
    $$$$$: 1349-block  7
    #####: 1350:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1350-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1351:    return default_value;
    %%%%%: 1351-block  0
        -: 1352:  }
        -: 1353:
    #####: 1354:  return result;
    %%%%%: 1354-block  0
        -: 1355:#endif  // defined(GTEST_GET_INT32_FROM_ENV_)
        3: 1356:}
        3: 1356-block  0
call    0 returned 3
    $$$$$: 1356-block  1
call    1 never executed
        -: 1357:
        -: 1358:// As a special case for the 'output' flag, if GTEST_OUTPUT is not
        -: 1359:// set, we look for XML_OUTPUT_FILE, which is set by the Bazel build
        -: 1360:// system.  The value of XML_OUTPUT_FILE is a filename without the
        -: 1361:// "xml:" prefix of GTEST_OUTPUT.
        -: 1362:// Note that this is meant to be called at the call site so it does
        -: 1363:// not check that the flag is 'output'
        -: 1364:// In essence this checks an env variable called XML_OUTPUT_FILE
        -: 1365:// and if it is set we prepend "xml:" to its value, if it not set we return ""
function _ZN7testing8internal25OutputFlagAlsoCheckEnvVarB5cxx11Ev called 1 returned 100% blocks executed 31%
        1: 1366:std::string OutputFlagAlsoCheckEnvVar() {
        1: 1367:  std::string default_value_for_output_flag = "";
        1: 1367-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 1367-block  1
call    4 never executed
        1: 1368:  const char* xml_output_file_env = posix::GetEnv("XML_OUTPUT_FILE");
call    0 returned 1
        1: 1369:  if (nullptr != xml_output_file_env) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1370:    default_value_for_output_flag = std::string("xml:") + xml_output_file_env;
    %%%%%: 1370-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1370-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1370-block  2
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 1370-block  3
call   11 never executed
    $$$$$: 1370-block  4
    $$$$$: 1370-block  5
call   12 never executed
    $$$$$: 1370-block  6
        -: 1371:  }
        1: 1372:  return default_value_for_output_flag;
        1: 1372-block  0
        1: 1372-block  1
    =====: 1373:}
    $$$$$: 1373-block  0
call    0 never executed
        -: 1374:
        -: 1375:// Reads and returns the string environment variable corresponding to
        -: 1376:// the given flag; if it's not set, returns default_value.
function _ZN7testing8internal18StringFromGTestEnvEPKcS2_ called 6 returned 100% blocks executed 100%
        6: 1377:const char* StringFromGTestEnv(const char* flag, const char* default_value) {
        -: 1378:#if defined(GTEST_GET_STRING_FROM_ENV_)
        -: 1379:  return GTEST_GET_STRING_FROM_ENV_(flag, default_value);
        -: 1380:#else
        6: 1381:  const std::string env_var = FlagToEnvVar(flag);
        6: 1381-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 1382:  const char* const value = posix::GetEnv(env_var.c_str());
        6: 1382-block  0
call    0 returned 6
call    1 returned 6
       12: 1383:  return value == nullptr ? default_value : value;
branch  0 taken 5 (fallthrough)
branch  1 taken 1
        5: 1383-block  0
        1: 1383-block  1
        6: 1383-block  2
        -: 1384:#endif  // defined(GTEST_GET_STRING_FROM_ENV_)
        6: 1385:}
        6: 1385-block  0
call    0 returned 6
        -: 1386:
        -: 1387:}  // namespace internal
        -: 1388:}  // namespace testing
