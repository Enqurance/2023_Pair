        -:    0:Source:D:/BUAA_Files/Learning_Files/Senior_Three_2/BUAA_SE/Pair_Project/2023_Pair/lib/googletest/src/gtest-filepath.cc
        -:    0:Graph:D:\BUAA_Files\Learning_Files\Senior_Three_2\BUAA_SE\Pair_Project\2023_Pair\cmake-build-debug-coverage\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\BUAA_Files\Learning_Files\Senior_Three_2\BUAA_SE\Pair_Project\2023_Pair\cmake-build-debug-coverage\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:#include "gtest/internal/gtest-filepath.h"
        -:   31:
        -:   32:#include <stdlib.h>
        -:   33:
        -:   34:#include "gtest/gtest-message.h"
        -:   35:#include "gtest/internal/gtest-port.h"
        -:   36:
        -:   37:#ifdef GTEST_OS_WINDOWS_MOBILE
        -:   38:#include <windows.h>
        -:   39:#elif defined(GTEST_OS_WINDOWS)
        -:   40:#include <direct.h>
        -:   41:#include <io.h>
        -:   42:#else
        -:   43:#include <limits.h>
        -:   44:
        -:   45:#include <climits>  // Some Linux distributions define PATH_MAX here.
        -:   46:#endif              // GTEST_OS_WINDOWS_MOBILE
        -:   47:
        -:   48:#include "gtest/internal/gtest-string.h"
        -:   49:
        -:   50:#ifdef GTEST_OS_WINDOWS
        -:   51:#define GTEST_PATH_MAX_ _MAX_PATH
        -:   52:#elif defined(PATH_MAX)
        -:   53:#define GTEST_PATH_MAX_ PATH_MAX
        -:   54:#elif defined(_XOPEN_PATH_MAX)
        -:   55:#define GTEST_PATH_MAX_ _XOPEN_PATH_MAX
        -:   56:#else
        -:   57:#define GTEST_PATH_MAX_ _POSIX_PATH_MAX
        -:   58:#endif  // GTEST_OS_WINDOWS
        -:   59:
        -:   60:#if GTEST_HAS_FILE_SYSTEM
        -:   61:
        -:   62:namespace testing {
        -:   63:namespace internal {
        -:   64:
        -:   65:#ifdef GTEST_OS_WINDOWS
        -:   66:// On Windows, '\\' is the standard path separator, but many tools and the
        -:   67:// Windows API also accept '/' as an alternate path separator. Unless otherwise
        -:   68:// noted, a file path can contain either kind of path separators, or a mixture
        -:   69:// of them.
        -:   70:const char kPathSeparator = '\\';
        -:   71:const char kAlternatePathSeparator = '/';
        -:   72:const char kAlternatePathSeparatorString[] = "/";
        -:   73:#ifdef GTEST_OS_WINDOWS_MOBILE
        -:   74:// Windows CE doesn't have a current directory. You should not use
        -:   75:// the current directory in test on Windows CE, but this at least
        -:   76:// provides a reasonable fallback.
        -:   77:const char kCurrentDirectoryString[] = "\\";
        -:   78:// Windows CE doesn't define INVALID_FILE_ATTRIBUTES
        -:   79:const DWORD kInvalidFileAttributes = 0xffffffff;
        -:   80:#else
        -:   81:const char kCurrentDirectoryString[] = ".\\";
        -:   82:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:   83:#else
        -:   84:const char kPathSeparator = '/';
        -:   85:const char kCurrentDirectoryString[] = "./";
        -:   86:#endif  // GTEST_OS_WINDOWS
        -:   87:
        -:   88:// Returns whether the given character is a valid path separator.
function _ZN7testing8internalL15IsPathSeparatorEc called 79 returned 100% blocks executed 100%
       79:   89:static bool IsPathSeparator(char c) {
        -:   90:#if GTEST_HAS_ALT_PATH_SEP_
       79:   91:  return (c == kPathSeparator) || (c == kAlternatePathSeparator);
       79:   91-block  0
branch  0 taken 72 (fallthrough)
branch  1 taken 7
       72:   91-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 72
        7:   91-block  2
       72:   91-block  3
       79:   91-block  4
        -:   92:#else
        -:   93:  return c == kPathSeparator;
        -:   94:#endif
        -:   95:}
        -:   96:
        -:   97:// Returns the current working directory, or "" if unsuccessful.
function _ZN7testing8internal8FilePath13GetCurrentDirEv called 1 returned 100% blocks executed 61%
        1:   98:FilePath FilePath::GetCurrentDir() {
        -:   99:#if defined(GTEST_OS_WINDOWS_MOBILE) || defined(GTEST_OS_WINDOWS_PHONE) || \
        -:  100:    defined(GTEST_OS_WINDOWS_RT) || defined(GTEST_OS_ESP8266) ||           \
        -:  101:    defined(GTEST_OS_ESP32) || defined(GTEST_OS_XTENSA) ||                 \
        -:  102:    defined(GTEST_OS_QURT)
        -:  103:  // These platforms do not have a current directory, so we just return
        -:  104:  // something reasonable.
        -:  105:  return FilePath(kCurrentDirectoryString);
        -:  106:#elif defined(GTEST_OS_WINDOWS)
        1:  107:  char cwd[GTEST_PATH_MAX_ + 1] = {'\0'};
       1*:  108:  return FilePath(_getcwd(cwd, sizeof(cwd)) == nullptr ? "" : cwd);
        1:  108-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  108-block  1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  108-block  2
    %%%%%:  108-block  3
        1:  108-block  4
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  108-block  5
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  108-block  6
call   12 returned 1
call   13 returned 1
        1:  108-block  7
    $$$$$:  108-block  8
call   14 never executed
    $$$$$:  108-block  9
    $$$$$:  108-block 10
call   15 never executed
    $$$$$:  108-block 11
        -:  109:#else
        -:  110:  char cwd[GTEST_PATH_MAX_ + 1] = {'\0'};
        -:  111:  char* result = getcwd(cwd, sizeof(cwd));
        -:  112:#ifdef GTEST_OS_NACL
        -:  113:  // getcwd will likely fail in NaCl due to the sandbox, so return something
        -:  114:  // reasonable. The user may have provided a shim implementation for getcwd,
        -:  115:  // however, so fallback only when failure is detected.
        -:  116:  return FilePath(result == nullptr ? kCurrentDirectoryString : cwd);
        -:  117:#endif  // GTEST_OS_NACL
        -:  118:  return FilePath(result == nullptr ? "" : cwd);
        -:  119:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  120:}
        -:  121:
        -:  122:// Returns a copy of the FilePath with the case-insensitive extension removed.
        -:  123:// Example: FilePath("dir/file.exe").RemoveExtension("EXE") returns
        -:  124:// FilePath("dir/file"). If a case-insensitive extension is not
        -:  125:// found, returns a copy of the original FilePath.
function _ZNK7testing8internal8FilePath15RemoveExtensionEPKc called 0 returned 0% blocks executed 0%
    #####:  126:FilePath FilePath::RemoveExtension(const char* extension) const {
    #####:  127:  const std::string dot_extension = std::string(".") + extension;
    %%%%%:  127-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  127-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:  127-block  2
    $$$$$:  127-block  3
    #####:  128:  if (String::EndsWithCaseInsensitive(pathname_, dot_extension)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  128-block  0
branch  3 never executed
branch  4 never executed
        -:  129:    return FilePath(
    #####:  130:        pathname_.substr(0, pathname_.length() - dot_extension.length()));
    %%%%%:  130-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  130-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  130-block  2
call    8 never executed
    $$$$$:  130-block  3
call    9 never executed
    $$$$$:  130-block  4
        -:  131:  }
    #####:  132:  return *this;
    %%%%%:  132-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  133:}
    %%%%%:  133-block  0
call    0 never executed
    $$$$$:  133-block  1
call    1 never executed
        -:  134:
        -:  135:// Returns a pointer to the last occurrence of a valid path separator in
        -:  136:// the FilePath. On Windows, for example, both '/' and '\' are valid path
        -:  137:// separators. Returns NULL if no path separator was found.
function _ZNK7testing8internal8FilePath21FindLastPathSeparatorEv called 0 returned 0% blocks executed 0%
    #####:  138:const char* FilePath::FindLastPathSeparator() const {
    #####:  139:  const char* const last_sep = strrchr(c_str(), kPathSeparator);
    %%%%%:  139-block  0
call    0 never executed
        -:  140:#if GTEST_HAS_ALT_PATH_SEP_
    #####:  141:  const char* const last_alt_sep = strrchr(c_str(), kAlternatePathSeparator);
call    0 never executed
        -:  142:  // Comparing two pointers of which only one is NULL is undefined.
    #####:  143:  if (last_alt_sep != nullptr &&
branch  0 never executed
branch  1 never executed
    %%%%%:  143-block  0
branch  2 never executed
branch  3 never executed
    #####:  144:      (last_sep == nullptr || last_alt_sep > last_sep)) {
    %%%%%:  144-block  0
branch  0 never executed
branch  1 never executed
    #####:  145:    return last_alt_sep;
    %%%%%:  145-block  0
        -:  146:  }
        -:  147:#endif
    #####:  148:  return last_sep;
    %%%%%:  148-block  0
        -:  149:}
        -:  150:
function _ZNK7testing8internal8FilePath19CalculateRootLengthEv called 0 returned 0% blocks executed 0%
    #####:  151:size_t FilePath::CalculateRootLength() const {
    #####:  152:  const auto& path = pathname_;
    #####:  153:  auto s = path.begin();
    %%%%%:  153-block  0
call    0 never executed
    #####:  154:  auto end = path.end();
call    0 never executed
        -:  155:#ifdef GTEST_OS_WINDOWS
    #####:  156:  if (end - s >= 2 && s[1] == ':' && (end - s == 2 || IsPathSeparator(s[2])) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  156-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  156-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  156-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  156-block  3
    %%%%%:  156-block  4
    %%%%%:  156-block  5
branch 13 never executed
branch 14 never executed
    #####:  157:      (('A' <= s[0] && s[0] <= 'Z') || ('a' <= s[0] && s[0] <= 'z'))) {
    %%%%%:  157-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  157-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  157-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  157-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  158:    // A typical absolute path like "C:\Windows" or "D:"
    #####:  159:    s += 2;
    %%%%%:  159-block  0
call    0 never executed
    #####:  160:    if (s != end) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  161:      ++s;
    %%%%%:  161-block  0
call    0 never executed
        -:  162:    }
    #####:  163:  } else if (end - s >= 3 && IsPathSeparator(*s) && IsPathSeparator(*(s + 1)) &&
    %%%%%:  163-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  163-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  163-block  2
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  163-block  3
    %%%%%:  163-block  4
    #####:  164:             !IsPathSeparator(*(s + 2))) {
    %%%%%:  164-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  164-block  1
branch  5 never executed
branch  6 never executed
        -:  165:    // Move past the "\\" prefix in a UNC path like "\\Server\Share\Folder"
    #####:  166:    s += 2;
    %%%%%:  166-block  0
call    0 never executed
        -:  167:    // Skip 2 components and their following separators ("Server\" and "Share\")
    #####:  168:    for (int i = 0; i < 2; ++i) {
    %%%%%:  168-block  0
    %%%%%:  168-block  1
branch  0 never executed
branch  1 never executed
    #####:  169:      while (s != end) {
    %%%%%:  169-block  0
    %%%%%:  169-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  170:        bool stop = IsPathSeparator(*s);
    %%%%%:  170-block  0
call    0 never executed
call    1 never executed
    #####:  171:        ++s;
call    0 never executed
    #####:  172:        if (stop) {
branch  0 never executed
branch  1 never executed
    #####:  173:          break;
    %%%%%:  173-block  0
        -:  174:        }
        -:  175:      }
        -:  176:    }
    #####:  177:  } else if (s != end && IsPathSeparator(*s)) {
    %%%%%:  177-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  177-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  177-block  2
    %%%%%:  177-block  3
    %%%%%:  177-block  4
branch  7 never executed
branch  8 never executed
        -:  178:    // A drive-rooted path like "\Windows"
    #####:  179:    ++s;
    %%%%%:  179-block  0
call    0 never executed
        -:  180:  }
        -:  181:#else
        -:  182:  if (s != end && IsPathSeparator(*s)) {
        -:  183:    ++s;
        -:  184:  }
        -:  185:#endif
    #####:  186:  return static_cast<size_t>(s - path.begin());
    %%%%%:  186-block  0
call    0 never executed
call    1 never executed
        -:  187:}
        -:  188:
        -:  189:// Returns a copy of the FilePath with the directory part removed.
        -:  190:// Example: FilePath("path/to/file").RemoveDirectoryName() returns
        -:  191:// FilePath("file"). If there is no directory part ("just_a_file"), it returns
        -:  192:// the FilePath unmodified. If there is no file part ("just_a_dir/") it
        -:  193:// returns an empty FilePath ("").
        -:  194:// On Windows platform, '\' is the path separator, otherwise it is '/'.
function _ZNK7testing8internal8FilePath19RemoveDirectoryNameEv called 0 returned 0% blocks executed 0%
    #####:  195:FilePath FilePath::RemoveDirectoryName() const {
    #####:  196:  const char* const last_sep = FindLastPathSeparator();
    %%%%%:  196-block  0
call    0 never executed
    #####:  197:  return last_sep ? FilePath(last_sep + 1) : *this;
branch  0 never executed
branch  1 never executed
    %%%%%:  197-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  197-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  197-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  197-block  3
branch 12 never executed
branch 13 never executed
    %%%%%:  197-block  4
call   14 never executed
    %%%%%:  197-block  5
branch 15 never executed
branch 16 never executed
    %%%%%:  197-block  6
call   17 never executed
    %%%%%:  197-block  7
    %%%%%:  197-block  8
    $$$$$:  197-block  9
branch 18 never executed
branch 19 never executed
    $$$$$:  197-block 10
call   20 never executed
    $$$$$:  197-block 11
    $$$$$:  197-block 12
branch 21 never executed
branch 22 never executed
    $$$$$:  197-block 13
call   23 never executed
        -:  198:}
        -:  199:
        -:  200:// RemoveFileName returns the directory path with the filename removed.
        -:  201:// Example: FilePath("path/to/file").RemoveFileName() returns "path/to/".
        -:  202:// If the FilePath is "a_file" or "/a_file", RemoveFileName returns
        -:  203:// FilePath("./") or, on Windows, FilePath(".\\"). If the filepath does
        -:  204:// not have a file, like "just/a/dir/", it returns the FilePath unmodified.
        -:  205:// On Windows platform, '\' is the path separator, otherwise it is '/'.
function _ZNK7testing8internal8FilePath14RemoveFileNameEv called 0 returned 0% blocks executed 0%
    #####:  206:FilePath FilePath::RemoveFileName() const {
    #####:  207:  const char* const last_sep = FindLastPathSeparator();
    %%%%%:  207-block  0
call    0 never executed
    #####:  208:  std::string dir;
call    0 never executed
    #####:  209:  if (last_sep) {
branch  0 never executed
branch  1 never executed
    #####:  210:    dir = std::string(c_str(), static_cast<size_t>(last_sep + 1 - c_str()));
    %%%%%:  210-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  210-block  1
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  210-block  2
call    9 never executed
    $$$$$:  210-block  3
        -:  211:  } else {
    #####:  212:    dir = kCurrentDirectoryString;
    %%%%%:  212-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  213:  }
    #####:  214:  return FilePath(dir);
    %%%%%:  214-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  214-block  1
    #####:  215:}
    %%%%%:  215-block  0
call    0 never executed
    $$$$$:  215-block  1
call    1 never executed
        -:  216:
        -:  217:// Helper functions for naming files in a directory for xml output.
        -:  218:
        -:  219:// Given directory = "dir", base_name = "test", number = 0,
        -:  220:// extension = "xml", returns "dir/test.xml". If number is greater
        -:  221:// than zero (e.g., 12), returns "dir/test_12.xml".
        -:  222:// On Windows platform, uses \ as the separator rather than /.
function _ZN7testing8internal8FilePath12MakeFileNameERKS1_S3_iPKc called 0 returned 0% blocks executed 0%
    #####:  223:FilePath FilePath::MakeFileName(const FilePath& directory,
        -:  224:                                const FilePath& base_name, int number,
        -:  225:                                const char* extension) {
    #####:  226:  std::string file;
    %%%%%:  226-block  0
call    0 never executed
    #####:  227:  if (number == 0) {
branch  0 never executed
branch  1 never executed
    #####:  228:    file = base_name.string() + "." + extension;
    %%%%%:  228-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  228-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  228-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  228-block  3
call   10 never executed
    $$$$$:  228-block  4
        -:  229:  } else {
        -:  230:    file =
    #####:  231:        base_name.string() + "_" + StreamableToString(number) + "." + extension;
    %%%%%:  231-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  231-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  231-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  231-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  231-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  231-block  5
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    $$$$$:  231-block  6
call   22 never executed
    $$$$$:  231-block  7
    $$$$$:  231-block  8
call   23 never executed
    $$$$$:  231-block  9
    $$$$$:  231-block 10
call   24 never executed
    $$$$$:  231-block 11
    $$$$$:  231-block 12
call   25 never executed
    $$$$$:  231-block 13
        -:  232:  }
    #####:  233:  return ConcatPaths(directory, FilePath(file));
    %%%%%:  233-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  233-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  233-block  2
call    6 never executed
    %%%%%:  233-block  3
    $$$$$:  233-block  4
call    7 never executed
    $$$$$:  233-block  5
    #####:  234:}
call    0 never executed
    $$$$$:  234-block  0
call    1 never executed
        -:  235:
        -:  236:// Given directory = "dir", relative_path = "test.xml", returns "dir/test.xml".
        -:  237:// On Windows, uses \ as the separator rather than /.
function _ZN7testing8internal8FilePath11ConcatPathsERKS1_S3_ called 0 returned 0% blocks executed 0%
    #####:  238:FilePath FilePath::ConcatPaths(const FilePath& directory,
        -:  239:                               const FilePath& relative_path) {
    #####:  240:  if (directory.IsEmpty()) return relative_path;
    %%%%%:  240-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  240-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  241:  const FilePath dir(directory.RemoveTrailingPathSeparator());
    %%%%%:  241-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  242:  return FilePath(dir.string() + kPathSeparator + relative_path.string());
    %%%%%:  242-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  242-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  242-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  242-block  3
call   11 never executed
call   12 never executed
    $$$$$:  242-block  4
call   13 never executed
    $$$$$:  242-block  5
    $$$$$:  242-block  6
call   14 never executed
    $$$$$:  242-block  7
    #####:  243:}
call    0 never executed
    $$$$$:  243-block  0
call    1 never executed
        -:  244:
        -:  245:// Returns true if pathname describes something findable in the file-system,
        -:  246:// either a file, directory, or whatever.
function _ZNK7testing8internal8FilePath21FileOrDirectoryExistsEv called 0 returned 0% blocks executed 0%
    #####:  247:bool FilePath::FileOrDirectoryExists() const {
        -:  248:#ifdef GTEST_OS_WINDOWS_MOBILE
        -:  249:  LPCWSTR unicode = String::AnsiToUtf16(pathname_.c_str());
        -:  250:  const DWORD attributes = GetFileAttributes(unicode);
        -:  251:  delete[] unicode;
        -:  252:  return attributes != kInvalidFileAttributes;
        -:  253:#else
    #####:  254:  posix::StatStruct file_stat{};
    #####:  255:  return posix::Stat(pathname_.c_str(), &file_stat) == 0;
    %%%%%:  255-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  255-block  1
    %%%%%:  255-block  2
        -:  256:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  257:}
        -:  258:
        -:  259:// Returns true if pathname describes a directory in the file-system
        -:  260:// that exists.
function _ZNK7testing8internal8FilePath15DirectoryExistsEv called 0 returned 0% blocks executed 0%
    #####:  261:bool FilePath::DirectoryExists() const {
    #####:  262:  bool result = false;
        -:  263:#ifdef GTEST_OS_WINDOWS
        -:  264:  // Don't strip off trailing separator if path is a root directory on
        -:  265:  // Windows (like "C:\\").
    #####:  266:  const FilePath& path(IsRootDirectory() ? *this
    %%%%%:  266-block  0
call    0 never executed
    #####:  267:                                         : RemoveTrailingPathSeparator());
branch  0 never executed
branch  1 never executed
    %%%%%:  267-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  267-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  268:#else
        -:  269:  const FilePath& path(*this);
        -:  270:#endif
        -:  271:
        -:  272:#ifdef GTEST_OS_WINDOWS_MOBILE
        -:  273:  LPCWSTR unicode = String::AnsiToUtf16(path.c_str());
        -:  274:  const DWORD attributes = GetFileAttributes(unicode);
        -:  275:  delete[] unicode;
        -:  276:  if ((attributes != kInvalidFileAttributes) &&
        -:  277:      (attributes & FILE_ATTRIBUTE_DIRECTORY)) {
        -:  278:    result = true;
        -:  279:  }
        -:  280:#else
    #####:  281:  posix::StatStruct file_stat{};
    #####:  282:  result =
    #####:  283:      posix::Stat(path.c_str(), &file_stat) == 0 && posix::IsDir(file_stat);
    %%%%%:  283-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  283-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:  283-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  283-block  3
    %%%%%:  283-block  4
        -:  284:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  285:
    #####:  286:  return result;
    %%%%%:  286-block  0
    #####:  287:}
    %%%%%:  287-block  0
call    0 never executed
    $$$$$:  287-block  1
call    1 never executed
        -:  288:
        -:  289:// Returns true if pathname describes a root directory. (Windows has one
        -:  290:// root directory per disk drive. UNC share roots are also included.)
function _ZNK7testing8internal8FilePath15IsRootDirectoryEv called 0 returned 0% blocks executed 0%
    #####:  291:bool FilePath::IsRootDirectory() const {
    #####:  292:  size_t root_length = CalculateRootLength();
    %%%%%:  292-block  0
call    0 never executed
    #####:  293:  return root_length > 0 && root_length == pathname_.size() &&
branch  0 never executed
branch  1 never executed
    %%%%%:  293-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  293-block  1
    %%%%%:  293-block  2
    #####:  294:         IsPathSeparator(pathname_[root_length - 1]);
    %%%%%:  294-block  0
call    0 never executed
call    1 never executed
    %%%%%:  294-block  1
        -:  295:}
        -:  296:
        -:  297:// Returns true if pathname describes an absolute path.
function _ZNK7testing8internal8FilePath14IsAbsolutePathEv called 0 returned 0% blocks executed 0%
    #####:  298:bool FilePath::IsAbsolutePath() const { return CalculateRootLength() > 0; }
    %%%%%:  298-block  0
call    0 never executed
        -:  299:
        -:  300:// Returns a pathname for a file that does not currently exist. The pathname
        -:  301:// will be directory/base_name.extension or
        -:  302:// directory/base_name_<number>.extension if directory/base_name.extension
        -:  303:// already exists. The number will be incremented until a pathname is found
        -:  304:// that does not already exist.
        -:  305:// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.
        -:  306:// There could be a race condition if two or more processes are calling this
        -:  307:// function at the same time -- they could both pick the same filename.
function _ZN7testing8internal8FilePath22GenerateUniqueFileNameERKS1_S3_PKc called 0 returned 0% blocks executed 0%
    #####:  308:FilePath FilePath::GenerateUniqueFileName(const FilePath& directory,
        -:  309:                                          const FilePath& base_name,
        -:  310:                                          const char* extension) {
    #####:  311:  FilePath full_pathname;
    %%%%%:  311-block  0
call    0 never executed
    #####:  312:  int number = 0;
        -:  313:  do {
    #####:  314:    full_pathname.Set(MakeFileName(directory, base_name, number++, extension));
    %%%%%:  314-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  314-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  314-block  2
call    6 never executed
    $$$$$:  314-block  3
call    7 never executed
    $$$$$:  314-block  4
    #####:  315:  } while (full_pathname.FileOrDirectoryExists());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  315-block  0
branch  3 never executed
branch  4 never executed
    #####:  316:  return full_pathname;
    %%%%%:  316-block  0
    %%%%%:  316-block  1
    =====:  317:}
    $$$$$:  317-block  0
call    0 never executed
        -:  318:
        -:  319:// Returns true if FilePath ends with a path separator, which indicates that
        -:  320:// it is intended to represent a directory. Returns false otherwise.
        -:  321:// This does NOT check that a directory (or file) actually exists.
function _ZNK7testing8internal8FilePath11IsDirectoryEv called 0 returned 0% blocks executed 0%
    #####:  322:bool FilePath::IsDirectory() const {
    #####:  323:  return !pathname_.empty() &&
    %%%%%:  323-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  323-block  1
    %%%%%:  323-block  2
    #####:  324:         IsPathSeparator(pathname_.c_str()[pathname_.length() - 1]);
    %%%%%:  324-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%:  324-block  1
        -:  325:}
        -:  326:
        -:  327:// Create directories so that path exists. Returns true if successful or if
        -:  328:// the directories already exist; returns false if unable to create directories
        -:  329:// for any reason.
function _ZNK7testing8internal8FilePath28CreateDirectoriesRecursivelyEv called 0 returned 0% blocks executed 0%
    #####:  330:bool FilePath::CreateDirectoriesRecursively() const {
    #####:  331:  if (!this->IsDirectory()) {
    %%%%%:  331-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  332:    return false;
    %%%%%:  332-block  0
        -:  333:  }
        -:  334:
    #####:  335:  if (pathname_.length() == 0 || this->DirectoryExists()) {
    %%%%%:  335-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  335-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  335-block  2
branch  6 never executed
branch  7 never executed
    %%%%%:  335-block  3
    %%%%%:  335-block  4
    %%%%%:  335-block  5
branch  8 never executed
branch  9 never executed
    #####:  336:    return true;
    %%%%%:  336-block  0
        -:  337:  }
        -:  338:
    #####:  339:  const FilePath parent(this->RemoveTrailingPathSeparator().RemoveFileName());
    %%%%%:  339-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  339-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  339-block  2
    #####:  340:  return parent.CreateDirectoriesRecursively() && this->CreateFolder();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  340-block  0
branch  3 never executed
branch  4 never executed
    %%%%%:  340-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  340-block  2
branch  8 never executed
branch  9 never executed
    %%%%%:  340-block  3
    %%%%%:  340-block  4
    #####:  341:}
    %%%%%:  341-block  0
call    0 never executed
    $$$$$:  341-block  1
call    1 never executed
        -:  342:
        -:  343:// Create the directory so that path exists. Returns true if successful or
        -:  344:// if the directory already exists; returns false if unable to create the
        -:  345:// directory for any reason, including if the parent directory does not
        -:  346:// exist. Not named "CreateDirectory" because that's a macro on Windows.
function _ZNK7testing8internal8FilePath12CreateFolderEv called 0 returned 0% blocks executed 0%
    #####:  347:bool FilePath::CreateFolder() const {
        -:  348:#ifdef GTEST_OS_WINDOWS_MOBILE
        -:  349:  FilePath removed_sep(this->RemoveTrailingPathSeparator());
        -:  350:  LPCWSTR unicode = String::AnsiToUtf16(removed_sep.c_str());
        -:  351:  int result = CreateDirectory(unicode, nullptr) ? 0 : -1;
        -:  352:  delete[] unicode;
        -:  353:#elif defined(GTEST_OS_WINDOWS)
    #####:  354:  int result = _mkdir(pathname_.c_str());
    %%%%%:  354-block  0
call    0 never executed
call    1 never executed
        -:  355:#elif defined(GTEST_OS_ESP8266) || defined(GTEST_OS_XTENSA) || \
        -:  356:    defined(GTEST_OS_QURT)
        -:  357:  // do nothing
        -:  358:  int result = 0;
        -:  359:#else
        -:  360:  int result = mkdir(pathname_.c_str(), 0777);
        -:  361:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  362:
    #####:  363:  if (result == -1) {
branch  0 never executed
branch  1 never executed
    #####:  364:    return this->DirectoryExists();  // An error is OK if the directory exists.
    %%%%%:  364-block  0
call    0 never executed
        -:  365:  }
    #####:  366:  return true;  // No error.
    %%%%%:  366-block  0
        -:  367:}
        -:  368:
        -:  369:// If input name has a trailing separator character, remove it and return the
        -:  370:// name, otherwise return the name string unmodified.
        -:  371:// On Windows platform, uses \ as the separator, other platforms use /.
function _ZNK7testing8internal8FilePath27RemoveTrailingPathSeparatorEv called 0 returned 0% blocks executed 0%
    #####:  372:FilePath FilePath::RemoveTrailingPathSeparator() const {
    #####:  373:  return IsDirectory() ? FilePath(pathname_.substr(0, pathname_.length() - 1))
    %%%%%:  373-block  0
call    0 never executed
    %%%%%:  373-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  373-block  2
branch  5 never executed
branch  6 never executed
    %%%%%:  373-block  3
call    7 never executed
    %%%%%:  373-block  4
    $$$$$:  373-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:  373-block  6
call   10 never executed
    #####:  374:                       : *this;
branch  0 never executed
branch  1 never executed
    %%%%%:  374-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  374-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  374-block  2
        -:  375:}
        -:  376:
        -:  377:// Removes any redundant separators that might be in the pathname.
        -:  378:// For example, "bar///foo" becomes "bar/foo". Does not eliminate other
        -:  379:// redundancies that might be in a pathname involving "." or "..".
        -:  380:// Note that "\\Host\Share" does not contain a redundancy on Windows!
function _ZN7testing8internal8FilePath9NormalizeEv called 1 returned 100% blocks executed 66%
        1:  381:void FilePath::Normalize() {
        1:  382:  auto out = pathname_.begin();
        1:  382-block  0
call    0 returned 1
        -:  383:
        1:  384:  auto i = pathname_.cbegin();
call    0 returned 1
        -:  385:#ifdef GTEST_OS_WINDOWS
        -:  386:  // UNC paths are treated specially
       2*:  387:  if (pathname_.end() - i >= 3 && IsPathSeparator(*i) &&
call    0 returned 1
call    1 returned 1
        1:  387-block  0
call    2 returned 1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
branch  6 never executed
branch  7 never executed
       2*:  388:      IsPathSeparator(*(i + 1)) && !IsPathSeparator(*(i + 2))) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
    %%%%%:  388-block  0
call    2 never executed
call    3 never executed
call    4 never executed
    %%%%%:  388-block  1
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  388-block  2
        1:  388-block  3
        1:  388-block  4
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    #####:  389:    *(out++) = kPathSeparator;
    %%%%%:  389-block  0
call    0 never executed
call    1 never executed
    #####:  390:    *(out++) = kPathSeparator;
call    0 never executed
call    1 never executed
        -:  391:  }
        -:  392:#endif
       79:  393:  while (i != pathname_.end()) {
        1:  393-block  0
       79:  393-block  1
call    0 returned 79
call    1 returned 79
branch  2 taken 78
branch  3 taken 1 (fallthrough)
       78:  394:    const char character = *i;
       78:  394-block  0
call    0 returned 78
       78:  395:    if (!IsPathSeparator(character)) {
call    0 returned 78
branch  1 taken 71 (fallthrough)
branch  2 taken 7
       71:  396:      *(out++) = character;
       71:  396-block  0
call    0 returned 71
call    1 returned 71
       7*:  397:    } else if (out == pathname_.begin() || *std::prev(out) != kPathSeparator) {
        7:  397-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0
        7:  397-block  1
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0 (throw)
        7:  397-block  2
call    7 returned 7
branch  8 taken 7 (fallthrough)
branch  9 taken 0
        7:  397-block  3
    %%%%%:  397-block  4
        7:  397-block  5
branch 10 taken 7 (fallthrough)
branch 11 taken 0
    $$$$$:  397-block  6
    $$$$$:  397-block  7
        7:  398:      *(out++) = kPathSeparator;
        7:  398-block  0
call    0 returned 7
call    1 returned 7
        -:  399:    }
       78:  400:    ++i;
       78:  400-block  0
call    0 returned 78
        -:  401:  }
        -:  402:
        1:  403:  pathname_.erase(out, pathname_.end());
        1:  403-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  403-block  1
    $$$$$:  403-block  2
    $$$$$:  403-block  3
        1:  404:}
        1:  404-block  0
        -:  405:
        -:  406:}  // namespace internal
        -:  407:}  // namespace testing
        -:  408:
        -:  409:#endif  // GTEST_HAS_FILE_SYSTEM
