        -:    0:Source:D:/BUAA_Files/Learning_Files/Senior_Three_2/BUAA_SE/Pair_Project/2023_Pair/src/Core.h
        -:    0:Graph:D:\BUAA_Files\Learning_Files\Senior_Three_2\BUAA_SE\Pair_Project\2023_Pair\cmake-build-debug-coverage\CMakeFiles\coretest.dir\test\coretest\coretest.cpp.gcno
        -:    0:Data:D:\BUAA_Files\Learning_Files\Senior_Three_2\BUAA_SE\Pair_Project\2023_Pair\cmake-build-debug-coverage\CMakeFiles\coretest.dir\test\coretest\coretest.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Enqurance on 2023/3/10.
        -:    3://
        -:    4:
        -:    5:#ifndef WORDLIST_CORE_H
        -:    6:#define WORDLIST_CORE_H
        -:    7:
        -:    8:#ifdef WORDLIST_CORE_EXPORTS
        -:    9:#define WORDLIST_CORE_API __declspec(dllexport)
        -:   10:#else
        -:   11:#define WORDLIST_CORE_API __declspec(dllimport)
        -:   12:#endif
        -:   13:
        -:   14:#include "bits/stdc++.h"
        -:   15:#include "Node.h"
        -:   16:
        -:   17:using namespace std;
        -:   18:
        -:   19:#define MAX 10000
        -:   20:
        -:   21:class Core {
        -:   22:private:
        -:   23:    // dp算法
        -:   24:    int dp[MAX] = {0};
        -:   25:    int lastWord[MAX] = {-1};
        -:   26:    // dfs算法
        -:   27:    bool vis[MAX] = {false};
        -:   28:    // 最终结果
        -:   29:    vector<string> longest_chain;
        -:   30:    int longest_size = 0;
        -:   31:    vector<vector<string>> all_chains;
        -:   32:    int all_chains_size = 0;
        -:   33:
        -:   34:    // 建图相关
        -:   35:    vector<Node *> nodes;
        -:   36:    int nodes_size = -1;
        -:   37:    int inDegree[MAX] = {0};
        -:   38:
        -:   39:    vector<string> words;
        -:   40:    int words_size;
        -:   41:
        -:   42:    bool enable_loop = false;
        -:   43:    bool loop_exist = false;
        -:   44:    char head = 0;
        -:   45:    char tail = 0;
        -:   46:    char reject = 0;
        -:   47:
        -:   48:    vector<Node *> nodes_with_diff_head[26];    // 不同开头的单词
        -:   49:
function _ZN4Core12create_nodesEb called 2 returned 100% blocks executed 80%
        2:   50:    void create_nodes(bool is_word_chain) {       /* 创建节点，生成图 */
        2:   51:        int cnt = 0;
       24:   52:        for (int i = 0; i < words_size; i++) {
        2:   52-block  0
       22:   52-block  1
       24:   52-block  2
branch  0 taken 22
branch  1 taken 2 (fallthrough)
      22*:   53:            Node *n = new Node(words[i], cnt++, (is_word_chain) ? (int )words[i].length() : 1);
       22:   53-block  0
call    0 returned 22
call    1 returned 22
branch  2 taken 22 (fallthrough)
branch  3 taken 0 (throw)
       22:   53-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 22
    %%%%%:   53-block  2
call    6 never executed
call    7 never executed
       22:   53-block  3
       22:   53-block  4
call    8 returned 22
branch  9 taken 22 (fallthrough)
branch 10 taken 0 (throw)
       22:   53-block  5
call   11 returned 22
branch 12 taken 22 (fallthrough)
branch 13 taken 0 (throw)
       22:   53-block  6
call   14 returned 22
    $$$$$:   53-block  7
call   15 never executed
    $$$$$:   53-block  8
call   16 never executed
    $$$$$:   53-block  9
       22:   54:            nodes.push_back(n);
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:   55:            nodes_with_diff_head[n->get_s() - 'a'].push_back(n);
       22:   55-block  0
call    0 returned 22
call    1 returned 22
branch  2 taken 22 (fallthrough)
branch  3 taken 0 (throw)
        -:   56:        }
        2:   57:        nodes_size = cnt;
       24:   58:        for (int i = 0; i < nodes_size; i++) {
        2:   58-block  0
       22:   58-block  1
       24:   58-block  2
branch  0 taken 22
branch  1 taken 2 (fallthrough)
      264:   59:            for (int j = 0; j < nodes_size; j++) {
       22:   59-block  0
      242:   59-block  1
      264:   59-block  2
branch  0 taken 242
branch  1 taken 22 (fallthrough)
      242:   60:                if (i == j) continue;
      242:   60-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 220
       22:   60-block  1
      220:   61:                if (nodes[i]->get_e() == nodes[j]->get_s()) {
      220:   61-block  0
call    0 returned 220
call    1 returned 220
call    2 returned 220
call    3 returned 220
branch  4 taken 10 (fallthrough)
branch  5 taken 210
       10:   62:                    nodes[i]->addToNodes(nodes[j]);
       10:   62-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
       10:   63:                    inDegree[j]++;
        -:   64:                }
        -:   65:            }
        -:   66:        }
        2:   67:    }
        2:   67-block  0
        -:   68:
function _ZN4Core12check_circleEv called 2 returned 100% blocks executed 92%
        2:   69:    void check_circle() {
        2:   70:        queue<Node *> q;
        2:   70-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   71:        int count = 0;
        -:   72:        int tmp_inDegree[MAX];
        2:   73:        memcpy(tmp_inDegree, inDegree, sizeof (inDegree));
       24:   74:        for (int i = 0; i < nodes_size; i++) {
        2:   74-block  0
       22:   74-block  1
       24:   74-block  2
branch  0 taken 22
branch  1 taken 2 (fallthrough)
       22:   75:            if (tmp_inDegree[i] == 0) {
       22:   75-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 10
       12:   76:                count++;
       12:   77:                q.push(nodes[i]);
       12:   77-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
        -:   78:            }
        -:   79:        }
       24:   80:        while (!q.empty()) {
        2:   80-block  0
       24:   80-block  1
call    0 returned 24
branch  1 taken 22
branch  2 taken 2 (fallthrough)
       22:   81:            Node *tmp = q.front();
       22:   81-block  0
call    0 returned 22
       22:   82:            q.pop();
call    0 returned 22
       22:   83:            int toNode_size = (int )(tmp->toNodes).size();
call    0 returned 22
       32:   84:            for (int i = 0; i < toNode_size; i++) {
       10:   84-block  0
       32:   84-block  1
branch  0 taken 10
branch  1 taken 22 (fallthrough)
       10:   85:                int toNode_id = tmp->toNodes[i]->get_id();
       10:   85-block  0
call    0 returned 10
call    1 returned 10
       10:   86:                tmp_inDegree[toNode_id]--;
       10:   87:                if (tmp_inDegree[toNode_id] == 0) {
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10:   88:                    count++;
       10:   89:                    q.push(nodes[toNode_id]);
       10:   89-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
        -:   90:                }
        -:   91:            }
        -:   92:        }
        2:   93:        loop_exist = count != nodes_size;
        2:   94:    }
        2:   94-block  0
call    0 returned 2
    $$$$$:   94-block  1
call    1 never executed
        -:   95:
function _ZN4Core13dfs_all_chainEiSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####:   96:    void dfs_all_chain(int id, vector<string> cur_chain) {
    #####:   97:        vis[id] = true;
    #####:   98:        cur_chain.push_back(nodes[id]->get_context());
    %%%%%:   98-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   98-block  1
call    5 never executed
    $$$$$:   98-block  2
call    6 never executed
    $$$$$:   98-block  3
call    7 never executed
    #####:   99:        if (cur_chain.size() >= 2) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  100:            all_chains.push_back(cur_chain);
    %%%%%:  100-block  0
call    0 never executed
    #####:  101:            all_chains_size++;
        -:  102:        }
    #####:  103:        int toNode_size = (int )(nodes[id]->toNodes).size();
    %%%%%:  103-block  0
call    0 never executed
call    1 never executed
    #####:  104:        for (int i = 0; i < toNode_size; i++) {
    %%%%%:  104-block  0
    %%%%%:  104-block  1
branch  0 never executed
branch  1 never executed
    #####:  105:            int toNode_id = nodes[id]->toNodes[i]->get_id();
    %%%%%:  105-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  106:            if (!vis[toNode_id]) {
branch  0 never executed
branch  1 never executed
    #####:  107:                dfs_all_chain(toNode_id, cur_chain);
    %%%%%:  107-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  107-block  1
call    4 never executed
    $$$$$:  107-block  2
call    5 never executed
        -:  108:            }
        -:  109:        }
    #####:  110:    }
    %%%%%:  110-block  0
        -:  111:
function _ZN4Core16dp_longest_chainEv called 1 returned 100% blocks executed 30%
        1:  112:    void dp_longest_chain() {
        -:  113:        // 局部变量初始化
        1:  114:        queue<Node *> q;
        1:  114-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  115:        int tmp_inDegree[MAX];
        1:  116:        memcpy(tmp_inDegree, inDegree, sizeof (inDegree));
        1:  117:        memset(lastWord, -1, sizeof (lastWord));
        -:  118:
        -:  119:        // 入度为0的，且符合要求开头字母的，先入队
       12:  120:        for (int i = 0; i < nodes_size; i++) {
        1:  120-block  0
       11:  120-block  1
       12:  120-block  2
branch  0 taken 11
branch  1 taken 1 (fallthrough)
       11:  121:            if (tmp_inDegree[i] == 0) {
       11:  121-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 5
        -:  122:                // 有要求指定开头字母，或者没有要求
        -:  123:                // 有要求指定不能开头的字母，或者没有要求
       6*:  124:                if ((head == 0 || nodes[i]->get_s() == head) &&
        6:  124-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  124-block  1
call    2 returned 6
call    3 returned 6
branch  4 taken 0 (fallthrough)
branch  5 taken 6
    %%%%%:  124-block  2
        6:  124-block  3
        6:  124-block  4
branch  6 taken 0 (fallthrough)
branch  7 taken 6
    #####:  125:                    (reject == 0 || reject != nodes[i]->get_s())) {
    %%%%%:  125-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  125-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  126:                    q.push(nodes[i]);
    %%%%%:  126-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  127:                    dp[i] = nodes[i]->get_v();
    %%%%%:  127-block  0
call    0 never executed
call    1 never executed
        -:  128:                }
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:        // 根据拓扑排序迭代
        1:  133:        while (!q.empty()) {
        1:  133-block  0
        1:  133-block  1
call    0 returned 1
branch  1 taken 0
branch  2 taken 1 (fallthrough)
    #####:  134:            Node *tmp = q.front();
    %%%%%:  134-block  0
call    0 never executed
    #####:  135:            q.pop();
call    0 never executed
    #####:  136:            int toNode_size = (int )(tmp->toNodes).size();
call    0 never executed
    #####:  137:            for (int i = 0; i < toNode_size; i++) {
    %%%%%:  137-block  0
    %%%%%:  137-block  1
branch  0 never executed
branch  1 never executed
    #####:  138:                int toNode_id = tmp->toNodes[i]->get_id();
    %%%%%:  138-block  0
call    0 never executed
call    1 never executed
    #####:  139:                if (dp[tmp->get_id()] + tmp->get_v() > dp[toNode_id]) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  140:                    lastWord[toNode_id] = tmp->get_id();
    %%%%%:  140-block  0
call    0 never executed
    #####:  141:                    dp[toNode_id] = dp[tmp->get_id()] + tmp->get_v();
call    0 never executed
call    1 never executed
        -:  142:                }
    #####:  143:                tmp_inDegree[toNode_id]--;
    #####:  144:                if (tmp_inDegree[toNode_id] == 0) {
    %%%%%:  144-block  0
branch  0 never executed
branch  1 never executed
    #####:  145:                    if ((head == 0 || nodes[i]->get_s() == head) &&
    %%%%%:  145-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  145-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  145-block  2
    %%%%%:  145-block  3
    %%%%%:  145-block  4
branch  6 never executed
branch  7 never executed
    #####:  146:                        (reject == 0 || reject != nodes[i]->get_s())) {
    %%%%%:  146-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  146-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  147:                        q.push(nodes[toNode_id]);
    %%%%%:  147-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  148:                    }
        -:  149:                }
        -:  150:            }
        -:  151:        }
        -:  152:
        -:  153:        // 最终遍历结果，找到最长的链
        1:  154:        int max_length = 0, max_index;
       12:  155:        for (int i = 0; i < nodes_size; i++) {
        1:  155-block  0
       11:  155-block  1
       12:  155-block  2
branch  0 taken 11
branch  1 taken 1 (fallthrough)
      11*:  156:            if (dp[i] > max_length && (tail == 0 || tail == nodes[i]->get_e())) {
       11:  156-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    %%%%%:  156-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  156-block  2
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  156-block  3
       11:  156-block  4
       11:  156-block  5
branch  8 taken 0 (fallthrough)
branch  9 taken 11
    #####:  157:                max_index = i;
    #####:  158:                max_length = dp[i];
    %%%%%:  158-block  0
        -:  159:            }
        -:  160:        }
        -:  161:
        -:  162:        // 没有长度超过2的单词链
        1:  163:        if (max_length < 2) return;
        1:  163-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  163-block  1
        -:  164:
        -:  165:        // 将结果保存并返回
    #####:  166:        while (max_index != -1) {
    %%%%%:  166-block  0
    %%%%%:  166-block  1
branch  0 never executed
branch  1 never executed
    #####:  167:            longest_chain.push_back(nodes[max_index]->get_context());
    %%%%%:  167-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  167-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  167-block  2
call    7 never executed
    $$$$$:  167-block  3
call    8 never executed
    $$$$$:  167-block  4
    #####:  168:            max_index = lastWord[max_index];
        -:  169:        }
    #####:  170:        reverse(longest_chain.begin(), longest_chain.end());
    %%%%%:  170-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
       1*:  171:    }
    %%%%%:  171-block  0
        1:  171-block  1
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  171-block  2
call    3 never executed
        -:  172:
function _ZN4Core17dfs_longest_chainEiiSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####:  173:    void dfs_longest_chain(int id, int cur_v, vector<string> cur_chain) {
    #####:  174:        cur_chain.push_back(nodes[id]->get_context());
    %%%%%:  174-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  174-block  1
call    5 never executed
    $$$$$:  174-block  2
call    6 never executed
    $$$$$:  174-block  3
call    7 never executed
    #####:  175:        cur_v += nodes[id]->get_v();
call    0 never executed
call    1 never executed
    #####:  176:        if ((cur_v > longest_size) && (tail == 0 || nodes[id]->get_e() == tail) && cur_chain.size() >= 2) {
branch  0 never executed
branch  1 never executed
    %%%%%:  176-block  0
branch  2 never executed
branch  3 never executed
    %%%%%:  176-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  176-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  176-block  3
    %%%%%:  176-block  4
    %%%%%:  176-block  5
branch 11 never executed
branch 12 never executed
    #####:  177:            longest_chain.assign(cur_chain.begin(), cur_chain.end());
    %%%%%:  177-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  178:            longest_size = cur_v;
        -:  179:        }
    #####:  180:        int toNode_size = (int )(nodes[id]->toNodes).size();
    %%%%%:  180-block  0
call    0 never executed
call    1 never executed
    #####:  181:        for (int i = 0; i < toNode_size; i++) {
    %%%%%:  181-block  0
    %%%%%:  181-block  1
branch  0 never executed
branch  1 never executed
    #####:  182:            int toNode_id = nodes[id]->toNodes[i]->get_id();
    %%%%%:  182-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  183:            if ((head == 0 || head == nodes[toNode_id]->get_s()) &&
branch  0 never executed
branch  1 never executed
    %%%%%:  183-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  183-block  1
    %%%%%:  183-block  2
    %%%%%:  183-block  3
branch  6 never executed
branch  7 never executed
    #####:  184:                (reject == 0 || reject != nodes[toNode_id]->get_s())) {
    %%%%%:  184-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  184-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  185:                dfs_longest_chain(toNode_id, cur_v + nodes[toNode_id]->get_v(), cur_chain);
    %%%%%:  185-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  185-block  1
call    6 never executed
    $$$$$:  185-block  2
call    7 never executed
        -:  186:            }
        -:  187:        }
    #####:  188:    }
    %%%%%:  188-block  0
        -:  189:
        -:  190:public:
function _ZN4CoreC1ERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEibcccb called 1 returned 100% blocks executed 50%
        1:  191:    Core(const vector<string> &words, int words_size, bool enableLoop,
       27:  192:         char head, char tail, char reject, bool graph_mode) {
        1:  192-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
       26:  192-block  1
call    4 returned 26
       27:  192-block  2
branch  5 taken 26
branch  6 taken 1 (fallthrough)
    $$$$$:  192-block  3
    $$$$$:  192-block  4
call    7 never executed
        1:  193:        this->words = words;
        1:  193-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  194:        this->words_size = words_size;
        1:  195:        this->enable_loop = enableLoop;
        1:  196:        this->head = head;
        1:  197:        this->tail = tail;
        1:  198:        this->reject = reject;
        1:  199:        create_nodes(graph_mode);
        1:  199-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  200:        check_circle();
        1:  200-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  201:    }
        1:  201-block  0
    $$$$$:  201-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  201-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:  201-block  3
call    4 never executed
    $$$$$:  201-block  4
call    5 never executed
    $$$$$:  201-block  5
call    6 never executed
    $$$$$:  201-block  6
call    7 never executed
        -:  202:
function _ZN4CoreC1ERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEi called 1 returned 100% blocks executed 50%
       27:  203:    Core(const vector<string> &words, int words_size) {
        1:  203-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
       26:  203-block  1
call    4 returned 26
       27:  203-block  2
branch  5 taken 26
branch  6 taken 1 (fallthrough)
    $$$$$:  203-block  3
    $$$$$:  203-block  4
call    7 never executed
        1:  204:        this->words = words;
        1:  204-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  205:        this->words_size = words_size;
        1:  206:        this->enable_loop = false;
        1:  207:        this->head = 0;
        1:  208:        this->tail = 0;
        1:  209:        this->reject = 0;
        1:  210:        create_nodes(false);
        1:  210-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  211:        check_circle();
        1:  211-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  212:    }
        1:  212-block  0
    $$$$$:  212-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  212-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:  212-block  3
call    4 never executed
    $$$$$:  212-block  4
call    5 never executed
    $$$$$:  212-block  5
call    6 never executed
    $$$$$:  212-block  6
call    7 never executed
        -:  213:
        -:  214:    // 不要求和其他参数联合使用
function _ZN4Core15genAllWordChainERSt6vectorIS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EESaIS8_EE called 0 returned 0% blocks executed 0%
    #####:  215:    int genAllWordChain(vector<vector<string>> &result) {
    #####:  216:        for (int i = 0; i < nodes_size; i++) {
    %%%%%:  216-block  0
    %%%%%:  216-block  1
    %%%%%:  216-block  2
branch  0 never executed
branch  1 never executed
    #####:  217:            cout << nodes[i]->get_id() << " " << nodes[i]->get_context() << ":" << endl;
    %%%%%:  217-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  217-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  217-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  217-block  3
call   15 never executed
    $$$$$:  217-block  4
call   16 never executed
    $$$$$:  217-block  5
call   17 never executed
    #####:  218:            int size = (int )nodes[i]->toNodes.size();
call    0 never executed
call    1 never executed
    #####:  219:            for (int j = 0; j < size; j++) {
    %%%%%:  219-block  0
branch  0 never executed
branch  1 never executed
    #####:  220:                cout << nodes[i]->toNodes[j]->get_context() << endl;
    %%%%%:  220-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  220-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  220-block  2
call    9 never executed
    $$$$$:  220-block  3
call   10 never executed
    $$$$$:  220-block  4
call   11 never executed
    #####:  221:                cout << endl;
call    0 never executed
        -:  222:            }
        -:  223:        }
    #####:  224:        for (int i = 0; i < 26; i++) {
    %%%%%:  224-block  0
    %%%%%:  224-block  1
    %%%%%:  224-block  2
branch  0 never executed
branch  1 never executed
    #####:  225:            int size = (int )nodes_with_diff_head[i].size();
    %%%%%:  225-block  0
call    0 never executed
    #####:  226:            for (int j = 0; j < size; j++) {
    %%%%%:  226-block  0
branch  0 never executed
branch  1 never executed
    #####:  227:                memset(vis, false, nodes_size);
    #####:  228:                dfs_all_chain(nodes_with_diff_head[i][j]->get_id(), *new vector<string>);
    %%%%%:  228-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  228-block  1
call    8 never executed
    $$$$$:  228-block  2
call    9 never executed
        -:  229:            }
        -:  230:        }
    #####:  231:        result = all_chains;
    %%%%%:  231-block  0
call    0 never executed
    #####:  232:        return all_chains_size;
    %%%%%:  232-block  0
        -:  233:    }
        -:  234:
function _ZN4Core20genMaxWordCountChainERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 1 returned 100% blocks executed 21%
        1:  235:    int genMaxWordCountChain(vector<string> &result) {
        1:  236:        if (loop_exist) {
        1:  236-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  237:            for (int i = 0; i < nodes_size; i++) {
    %%%%%:  237-block  0
    %%%%%:  237-block  1
    %%%%%:  237-block  2
branch  0 never executed
branch  1 never executed
    #####:  238:                if ((head == 0 || head == nodes[i]->get_s()) &&
    %%%%%:  238-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  238-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  238-block  2
    %%%%%:  238-block  3
    %%%%%:  238-block  4
branch  6 never executed
branch  7 never executed
    #####:  239:                    (reject == 0 || reject != nodes[i]->get_s())) {
    %%%%%:  239-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  239-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  240:                    dfs_longest_chain(i, 0, *new vector<string>);
    %%%%%:  240-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  240-block  1
call    6 never executed
    $$$$$:  240-block  2
call    7 never executed
        -:  241:                }
        -:  242:            }
        -:  243:        } else {
        1:  244:            dp_longest_chain();
        1:  244-block  0
call    0 returned 1
        -:  245:        }
        1:  246:        result = longest_chain;
        1:  246-block  0
call    0 returned 1
        1:  247:        return longest_size;
        1:  247-block  0
        -:  248:    }
        -:  249:};
        -:  250:
        -:  251://指针数组result的长度上限为20000，超出上限时报错并保证返回值正确，此时输出到solution.txt中的单词链可以为空
        -:  252://如果采用推荐的API接口，由于各组之间需要互换前后端，且推荐的API接口中返回值已经具有实际意义
        -:  253://因此不宜采用直接返回报错码的方式处理，因此各位不要在返回值上承载异常信息，保证返回值正确
        -:  254:
        -:  255:// 函数返回值为单词链的总数
function _Z14gen_chains_allRKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEiRS_IS7_SaIS7_EE called 0 returned 0% blocks executed 0%
    #####:  256:int gen_chains_all(const vector<string> &words, int len, vector<vector<string>> &result) {
    #####:  257:    Core core = *new Core(words, len);
    %%%%%:  257-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  257-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  257-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  257-block  3
call    9 never executed
    #####:  258:    return core.genAllWordChain(result);
    %%%%%:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  258-block  1
    %%%%%:  258-block  2
    #####:  259:}
    %%%%%:  259-block  0
call    0 never executed
    $$$$$:  259-block  1
call    1 never executed
        -:  260:
        -:  261:// 函数返回值为单词链的长度
function _Z14gen_chain_wordRKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEiRS7_cccb called 1 returned 100% blocks executed 69%
        1:  262:int gen_chain_word(const vector<string> &words, int len, vector<string> &result,
        -:  263:                   char head, char tail, char reject, bool enable_loop) {
        1:  264:    Core core = *new Core(words, len, enable_loop, head, tail, reject, false);
        1:  264-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  264-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  264-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
    $$$$$:  264-block  3
call    9 never executed
        2:  265:    return core.genMaxWordCountChain(result);
        1:  265-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  265-block  1
        1:  265-block  2
        1:  266:}
        1:  266-block  0
call    0 returned 1
    $$$$$:  266-block  1
call    1 never executed
        -:  267:
        -:  268:// 函数返回值为单词链的长度
function _Z14gen_chain_charRKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEiRS7_cccb called 0 returned 0% blocks executed 0%
    #####:  269:int gen_chain_char(const vector<string> &words, int len, vector<string> &result,
        -:  270:                   char head, char tail, char reject, bool enable_loop) {
    #####:  271:    Core core = *new Core(words, len, enable_loop, head, tail, reject, true);
    %%%%%:  271-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  271-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  271-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  271-block  3
call    9 never executed
    #####:  272:    return core.genMaxWordCountChain(result);
    %%%%%:  272-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  272-block  1
    %%%%%:  272-block  2
    #####:  273:}
    %%%%%:  273-block  0
call    0 never executed
    $$$$$:  273-block  1
call    1 never executed
        -:  274:
        -:  275:
        -:  276:#endif //WORDLIST_CORE_H
