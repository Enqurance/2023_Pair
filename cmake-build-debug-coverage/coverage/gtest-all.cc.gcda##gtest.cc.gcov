        -:    0:Source:D:/BUAA_Files/Learning_Files/Senior_Three_2/BUAA_SE/Pair_Project/2023_Pair/lib/googletest/src/gtest.cc
        -:    0:Graph:D:\BUAA_Files\Learning_Files\Senior_Three_2\BUAA_SE\Pair_Project\2023_Pair\cmake-build-debug-coverage\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\BUAA_Files\Learning_Files\Senior_Three_2\BUAA_SE\Pair_Project\2023_Pair\cmake-build-debug-coverage\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:
        -:   35:#include <ctype.h>
        -:   36:#include <stdarg.h>
        -:   37:#include <stdio.h>
        -:   38:#include <stdlib.h>
        -:   39:#include <time.h>
        -:   40:#include <wchar.h>
        -:   41:#include <wctype.h>
        -:   42:
        -:   43:#include <algorithm>
        -:   44:#include <chrono>  // NOLINT
        -:   45:#include <cmath>
        -:   46:#include <cstdint>
        -:   47:#include <initializer_list>
        -:   48:#include <iomanip>
        -:   49:#include <ios>
        -:   50:#include <iterator>
        -:   51:#include <limits>
        -:   52:#include <list>
        -:   53:#include <map>
        -:   54:#include <ostream>  // NOLINT
        -:   55:#include <sstream>
        -:   56:#include <unordered_set>
        -:   57:#include <vector>
        -:   58:
        -:   59:#include "gtest/gtest-assertion-result.h"
        -:   60:#include "gtest/gtest-spi.h"
        -:   61:#include "gtest/internal/custom/gtest.h"
        -:   62:#include "gtest/internal/gtest-port.h"
        -:   63:
        -:   64:#ifdef GTEST_OS_LINUX
        -:   65:
        -:   66:#include <fcntl.h>   // NOLINT
        -:   67:#include <limits.h>  // NOLINT
        -:   68:#include <sched.h>   // NOLINT
        -:   69:// Declares vsnprintf().  This header is not available on Windows.
        -:   70:#include <strings.h>   // NOLINT
        -:   71:#include <sys/mman.h>  // NOLINT
        -:   72:#include <sys/time.h>  // NOLINT
        -:   73:#include <unistd.h>    // NOLINT
        -:   74:
        -:   75:#include <string>
        -:   76:
        -:   77:#elif defined(GTEST_OS_ZOS)
        -:   78:#include <sys/time.h>  // NOLINT
        -:   79:
        -:   80:// On z/OS we additionally need strings.h for strcasecmp.
        -:   81:#include <strings.h>   // NOLINT
        -:   82:
        -:   83:#elif defined(GTEST_OS_WINDOWS_MOBILE)  // We are on Windows CE.
        -:   84:
        -:   85:#include <windows.h>  // NOLINT
        -:   86:#undef min
        -:   87:
        -:   88:#elif defined(GTEST_OS_WINDOWS)  // We are on Windows proper.
        -:   89:
        -:   90:#include <windows.h>  // NOLINT
        -:   91:#undef min
        -:   92:
        -:   93:#ifdef _MSC_VER
        -:   94:#include <crtdbg.h>  // NOLINT
        -:   95:#endif
        -:   96:
        -:   97:#include <io.h>         // NOLINT
        -:   98:#include <sys/stat.h>   // NOLINT
        -:   99:#include <sys/timeb.h>  // NOLINT
        -:  100:#include <sys/types.h>  // NOLINT
        -:  101:
        -:  102:#ifdef GTEST_OS_WINDOWS_MINGW
        -:  103:#include <sys/time.h>  // NOLINT
        -:  104:#endif                 // GTEST_OS_WINDOWS_MINGW
        -:  105:
        -:  106:#else
        -:  107:
        -:  108:// cpplint thinks that the header is already included, so we want to
        -:  109:// silence it.
        -:  110:#include <sys/time.h>  // NOLINT
        -:  111:#include <unistd.h>    // NOLINT
        -:  112:
        -:  113:#endif  // GTEST_OS_LINUX
        -:  114:
        -:  115:#if GTEST_HAS_EXCEPTIONS
        -:  116:#include <stdexcept>
        -:  117:#endif
        -:  118:
        -:  119:#if GTEST_CAN_STREAM_RESULTS_
        -:  120:#include <arpa/inet.h>   // NOLINT
        -:  121:#include <netdb.h>       // NOLINT
        -:  122:#include <sys/socket.h>  // NOLINT
        -:  123:#include <sys/types.h>   // NOLINT
        -:  124:#endif
        -:  125:
        -:  126:#include "src/gtest-internal-inl.h"
        -:  127:
        -:  128:#ifdef GTEST_OS_WINDOWS
        -:  129:#define vsnprintf _vsnprintf
        -:  130:#endif  // GTEST_OS_WINDOWS
        -:  131:
        -:  132:#ifdef GTEST_OS_MAC
        -:  133:#ifndef GTEST_OS_IOS
        -:  134:#include <crt_externs.h>
        -:  135:#endif
        -:  136:#endif
        -:  137:
        -:  138:#ifdef GTEST_HAS_ABSL
        -:  139:#include "absl/debugging/failure_signal_handler.h"
        -:  140:#include "absl/debugging/stacktrace.h"
        -:  141:#include "absl/debugging/symbolize.h"
        -:  142:#include "absl/flags/parse.h"
        -:  143:#include "absl/flags/usage.h"
        -:  144:#include "absl/strings/str_cat.h"
        -:  145:#include "absl/strings/str_replace.h"
        -:  146:#endif  // GTEST_HAS_ABSL
        -:  147:
        -:  148:// Checks builtin compiler feature |x| while avoiding an extra layer of #ifdefs
        -:  149:// at the callsite.
        -:  150:#if defined(__has_builtin)
        -:  151:#define GTEST_HAS_BUILTIN(x) __has_builtin(x)
        -:  152:#else
        -:  153:#define GTEST_HAS_BUILTIN(x) 0
        -:  154:#endif  // defined(__has_builtin)
        -:  155:
        -:  156:namespace testing {
        -:  157:
        -:  158:using internal::CountIf;
        -:  159:using internal::ForEach;
        -:  160:using internal::GetElementOr;
        -:  161:using internal::Shuffle;
        -:  162:
        -:  163:// Constants.
        -:  164:
        -:  165:// A test whose test suite name or test name matches this filter is
        -:  166:// disabled and not run.
        -:  167:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  168:
        -:  169:// A test suite whose name matches this filter is considered a death
        -:  170:// test suite and will be run before test suites whose name doesn't
        -:  171:// match this filter.
        -:  172:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  173:
        -:  174:// A test filter that matches everything.
        -:  175:static const char kUniversalFilter[] = "*";
        -:  176:
        -:  177:// The default output format.
        -:  178:static const char kDefaultOutputFormat[] = "xml";
        -:  179:// The default output file.
        -:  180:static const char kDefaultOutputFile[] = "test_detail";
        -:  181:
        -:  182:// The environment variable name for the test shard index.
        -:  183:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  184:// The environment variable name for the total number of test shards.
        -:  185:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  186:// The environment variable name for the test shard status file.
        -:  187:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  188:
        -:  189:namespace internal {
        -:  190:
        -:  191:// The text used in failure messages to indicate the start of the
        -:  192:// stack trace.
        -:  193:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  194:
        -:  195:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  196:// is specified on the command line.
        -:  197:bool g_help_flag = false;
        -:  198:
        -:  199:#if GTEST_HAS_FILE_SYSTEM
        -:  200:// Utility function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  201:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  202:  FILE* fileout = nullptr;
    #####:  203:  FilePath output_file_path(output_file);
    %%%%%:  203-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  204:  FilePath output_dir(output_file_path.RemoveFileName());
    %%%%%:  204-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  205:
    #####:  206:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  206-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  206-block  1
branch  3 never executed
branch  4 never executed
    #####:  207:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  207-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  207-block  1
        -:  208:  }
    #####:  209:  if (fileout == nullptr) {
    %%%%%:  209-block  0
branch  0 never executed
branch  1 never executed
    #####:  210:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  210-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  210-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  210-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  210-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  210-block  4
call   13 never executed
    $$$$$:  210-block  5
call   14 never executed
    $$$$$:  210-block  6
        -:  211:  }
    #####:  212:  return fileout;
    %%%%%:  212-block  0
    #####:  213:}
    %%%%%:  213-block  0
call    0 never executed
call    1 never executed
    $$$$$:  213-block  1
call    2 never executed
    $$$$$:  213-block  2
call    3 never executed
        -:  214:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  215:
        -:  216:}  // namespace internal
        -:  217:
        -:  218:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  219:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1:  220:static const char* GetDefaultFilter() {
        -:  221:  const char* const testbridge_test_only =
        1:  222:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  222-block  0
call    0 returned 1
        1:  223:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  224:    return testbridge_test_only;
    %%%%%:  224-block  0
        -:  225:  }
        1:  226:  return kUniversalFilter;
        1:  226-block  0
        -:  227:}
        -:  228:
        -:  229:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  230:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 1 returned 100% blocks executed 80%
        1:  231:static bool GetDefaultFailFast() {
        -:  232:  const char* const testbridge_test_runner_fail_fast =
        1:  233:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  233-block  0
call    0 returned 1
        1:  234:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  235:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  235-block  0
        -:  236:  }
        1:  237:  return false;
        1:  237-block  0
        -:  238:}
        -:  239:
        -:  240:}  // namespace testing
        -:  241:
        -:  242:GTEST_DEFINE_bool_(
        -:  243:    fail_fast,
        -:  244:    testing::internal::BoolFromGTestEnv("fail_fast",
        -:  245:                                        testing::GetDefaultFailFast()),
        -:  246:    "True if and only if a test failure should stop further test execution.");
        -:  247:
        -:  248:GTEST_DEFINE_bool_(
        -:  249:    also_run_disabled_tests,
        -:  250:    testing::internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  251:    "Run disabled test too, in addition to the test normally being run.");
        -:  252:
        -:  253:GTEST_DEFINE_bool_(
        -:  254:    break_on_failure,
        -:  255:    testing::internal::BoolFromGTestEnv("break_on_failure", false),
        -:  256:    "True if and only if a failed assertion should be a debugger "
        -:  257:    "break-point.");
        -:  258:
        -:  259:GTEST_DEFINE_bool_(catch_exceptions,
        -:  260:                   testing::internal::BoolFromGTestEnv("catch_exceptions",
        -:  261:                                                       true),
        -:  262:                   "True if and only if " GTEST_NAME_
        -:  263:                   " should catch exceptions and treat them as test failures.");
        -:  264:
        -:  265:GTEST_DEFINE_string_(
        -:  266:    color, testing::internal::StringFromGTestEnv("color", "auto"),
        -:  267:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  268:    "and auto.  'auto' means to use colors if the output is "
        -:  269:    "being sent to a terminal and the TERM environment variable "
        -:  270:    "is set to a terminal type that supports colors.");
        -:  271:
        -:  272:GTEST_DEFINE_string_(
        -:  273:    filter,
        -:  274:    testing::internal::StringFromGTestEnv("filter",
        -:  275:                                          testing::GetDefaultFilter()),
        -:  276:    "A colon-separated list of glob (not regex) patterns "
        -:  277:    "for filtering the test to run, optionally followed by a "
        -:  278:    "'-' and a : separated list of negative patterns (test to "
        -:  279:    "exclude).  A test is run if it matches one of the positive "
        -:  280:    "patterns and does not match any of the negative patterns.");
        -:  281:
        -:  282:GTEST_DEFINE_bool_(
        -:  283:    install_failure_signal_handler,
        -:  284:    testing::internal::BoolFromGTestEnv("install_failure_signal_handler",
        -:  285:                                        false),
        -:  286:    "If true and supported on the current platform, " GTEST_NAME_
        -:  287:    " should "
        -:  288:    "install a signal handler that dumps debugging information when fatal "
        -:  289:    "signals are raised.");
        -:  290:
        -:  291:GTEST_DEFINE_bool_(list_tests, false, "List all test without running them.");
        -:  292:
        -:  293:// The net priority order after flag processing is thus:
        -:  294://   --gtest_output command line flag
        -:  295://   GTEST_OUTPUT environment variable
        -:  296://   XML_OUTPUT_FILE environment variable
        -:  297://   ''
        -:  298:GTEST_DEFINE_string_(
        -:  299:    output,
        -:  300:    testing::internal::StringFromGTestEnv(
        -:  301:        "output", testing::internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  302:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  303:    "optionally followed by a colon and an output file name or directory. "
        -:  304:    "A directory is indicated by a trailing pathname separator. "
        -:  305:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  306:    "If a directory is specified, output files will be created "
        -:  307:    "within that directory, with file-names based on the test "
        -:  308:    "executable's name and, if necessary, made unique by adding "
        -:  309:    "digits.");
        -:  310:
        -:  311:GTEST_DEFINE_bool_(
        -:  312:    brief, testing::internal::BoolFromGTestEnv("brief", false),
        -:  313:    "True if only test failures should be displayed in text output.");
        -:  314:
        -:  315:GTEST_DEFINE_bool_(print_time,
        -:  316:                   testing::internal::BoolFromGTestEnv("print_time", true),
        -:  317:                   "True if and only if " GTEST_NAME_
        -:  318:                   " should display elapsed time in text output.");
        -:  319:
        -:  320:GTEST_DEFINE_bool_(print_utf8,
        -:  321:                   testing::internal::BoolFromGTestEnv("print_utf8", true),
        -:  322:                   "True if and only if " GTEST_NAME_
        -:  323:                   " prints UTF8 characters as text.");
        -:  324:
        -:  325:GTEST_DEFINE_int32_(
        -:  326:    random_seed, testing::internal::Int32FromGTestEnv("random_seed", 0),
        -:  327:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  328:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  329:
        -:  330:GTEST_DEFINE_int32_(
        -:  331:    repeat, testing::internal::Int32FromGTestEnv("repeat", 1),
        -:  332:    "How many times to repeat each test.  Specify a negative number "
        -:  333:    "for repeating forever.  Useful for shaking out flaky test.");
        -:  334:
        -:  335:GTEST_DEFINE_bool_(
        -:  336:    recreate_environments_when_repeating,
        -:  337:    testing::internal::BoolFromGTestEnv("recreate_environments_when_repeating",
        -:  338:                                        false),
        -:  339:    "Controls whether global test environments are recreated for each repeat "
        -:  340:    "of the test. If set to false the global test environments are only set "
        -:  341:    "up once, for the first iteration, and only torn down once, for the last. "
        -:  342:    "Useful for shaking out flaky test with stable, expensive test "
        -:  343:    "environments. If --gtest_repeat is set to a negative number, meaning "
        -:  344:    "there is no last run, the environments will always be recreated to avoid "
        -:  345:    "leaks.");
        -:  346:
        -:  347:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  348:                   "True if and only if " GTEST_NAME_
        -:  349:                   " should include internal stack frames when "
        -:  350:                   "printing test failure stack traces.");
        -:  351:
        -:  352:GTEST_DEFINE_bool_(shuffle,
        -:  353:                   testing::internal::BoolFromGTestEnv("shuffle", false),
        -:  354:                   "True if and only if " GTEST_NAME_
        -:  355:                   " should randomize test' order on every run.");
        -:  356:
        -:  357:GTEST_DEFINE_int32_(
        -:  358:    stack_trace_depth,
        -:  359:    testing::internal::Int32FromGTestEnv("stack_trace_depth",
        -:  360:                                         testing::kMaxStackTraceDepth),
        -:  361:    "The maximum number of stack frames to print when an "
        -:  362:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  363:
        -:  364:GTEST_DEFINE_string_(
        -:  365:    stream_result_to,
        -:  366:    testing::internal::StringFromGTestEnv("stream_result_to", ""),
        -:  367:    "This flag specifies the host name and the port number on which to stream "
        -:  368:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  369:    "Linux.");
        -:  370:
        -:  371:GTEST_DEFINE_bool_(
        -:  372:    throw_on_failure,
        -:  373:    testing::internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  374:    "When this flag is specified, a failed assertion will throw an exception "
        -:  375:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  376:    "otherwise. For use with an external test framework.");
        -:  377:
        -:  378:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  379:GTEST_DEFINE_string_(
        -:  380:    flagfile, testing::internal::StringFromGTestEnv("flagfile", ""),
        -:  381:    "This flag specifies the flagfile to read command-line flags from.");
        -:  382:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  383:
        -:  384:namespace testing {
        -:  385:namespace internal {
        -:  386:
        -:  387:const uint32_t Random::kMaxRange;
        -:  388:
        -:  389:// Generates a random number from [0, range), using a Linear
        -:  390:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  391:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  392:uint32_t Random::Generate(uint32_t range) {
        -:  393:  // These constants are the same as are used in glibc's rand(3).
        -:  394:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  395:  state_ = static_cast<uint32_t>(1103515245ULL * state_ + 12345U) % kMaxRange;
        -:  396:
    #####:  397:  GTEST_CHECK_(range > 0) << "Cannot generate a number in the range [0, 0).";
    %%%%%:  397-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  397-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  397-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  397-block  3
call   11 never executed
    $$$$$:  397-block  4
call   12 never executed
    $$$$$:  397-block  5
call   13 never executed
    #####:  398:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  398-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  398-block  1
call    3 never executed
call    4 never executed
    %%%%%:  398-block  2
call    5 never executed
    $$$$$:  398-block  3
call    6 never executed
    #####:  399:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  399-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  399-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  400:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  400-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  400-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  400-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  400-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  401:
        -:  402:  // Converting via modulus introduces a bit of downward bias, but
        -:  403:  // it's simple, and a linear congruential generator isn't too good
        -:  404:  // to begin with.
    #####:  405:  return state_ % range;
    %%%%%:  405-block  0
    %%%%%:  405-block  1
        -:  406:}
        -:  407:
        -:  408:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  409:// Google Test.  Useful for catching the user mistake of not initializing
        -:  410:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2:  411:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
        2:  411-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:  412:
        -:  413:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  414:// results of calling a given int-returning method on each.
        -:  415:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 5 returned 100% blocks executed 91%
        5:  416:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  417:                                int (TestSuite::*method)() const) {
        5:  418:  int sum = 0;
       10:  419:  for (size_t i = 0; i < case_list.size(); i++) {
        5:  419-block  0
       10:  419-block  1
call    0 returned 10
branch  1 taken 5
branch  2 taken 5 (fallthrough)
       5*:  420:    sum += (case_list[i]->*method)();
        5:  420-block  0
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    %%%%%:  420-block  1
        5:  420-block  2
        5:  420-block  3
call    3 returned 5
        -:  421:  }
        5:  422:  return sum;
        5:  422-block  0
        -:  423:}
        -:  424:
        -:  425:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  426:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  427:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  427-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  427-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  427-block  2
    %%%%%:  427-block  3
    %%%%%:  427-block  4
        -:  428:}
        -:  429:
        -:  430:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 2 returned 100% blocks executed 88%
        2:  431:static bool TestSuiteFailed(const TestSuite* test_suite) {
       2*:  432:  return test_suite->should_run() && test_suite->Failed();
        2:  432-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  432-block  1
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%:  432-block  2
        2:  432-block  3
        2:  432-block  4
        -:  433:}
        -:  434:
        -:  435:// Returns true if and only if test_suite contains at least one test that
        -:  436:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 2 returned 100% blocks executed 100%
        2:  437:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
        2:  438:  return test_suite->should_run();
        2:  438-block  0
call    0 returned 2
        -:  439:}
        -:  440:
        -:  441:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  442:AssertHelper::AssertHelper(TestPartResult::Type type, const char* file,
    #####:  443:                           int line, const char* message)
    #####:  444:    : data_(new AssertHelperData(type, file, line, message)) {}
    %%%%%:  444-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  444-block  1
    $$$$$:  444-block  2
call    4 never executed
        -:  445:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  446:AssertHelper::~AssertHelper() { delete data_; }
    %%%%%:  446-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  446-block  1
call    2 never executed
call    3 never executed
        -:  447:
        -:  448:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  449:void AssertHelper::operator=(const Message& message) const {
    #####:  450:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%:  450-block  0
call    0 never executed
    #####:  451:      data_->type, data_->file, data_->line,
    %%%%%:  451-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  452:      AppendUserMessage(data_->message, message),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  452-block  0
call    3 never executed
    $$$$$:  452-block  1
call    4 never executed
    $$$$$:  452-block  2
    #####:  453:      UnitTest::GetInstance()->impl()->CurrentOsStackTraceExceptTop(1)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    $$$$$:  453-block  0
call    4 never executed
        -:  454:      // Skips the stack frame for this function itself.
        -:  455:  );  // NOLINT
    #####:  456:}
        -:  457:
        -:  458:namespace {
        -:  459:
        -:  460:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  461:// to creates test cases for it, a synthetic test case is
        -:  462:// inserted to report ether an error or a log message.
        -:  463://
        -:  464:// This configuration bit will likely be removed at some point.
        -:  465:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  466:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  467:
        -:  468:// A test that fails at a given file/line location with a given message.
        -:  469:class FailureTest : public Test {
        -:  470: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC2ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  471:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  472:                       bool as_error)
    #####:  473:      : loc_(loc),
    #####:  474:        error_message_(std::move(error_message)),
    %%%%%:  474-block  0
call    0 never executed
call    1 never executed
    #####:  475:        as_error_(as_error) {}
    %%%%%:  475-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  475-block  1
call    4 never executed
        -:  476:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  477:  void TestBody() override {
    #####:  478:    if (as_error_) {
    %%%%%:  478-block  0
branch  0 never executed
branch  1 never executed
    #####:  479:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  479-block  0
call    3 never executed
    $$$$$:  479-block  1
call    4 never executed
    $$$$$:  479-block  2
    #####:  480:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  480-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  480-block  1
call    4 never executed
    %%%%%:  480-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$:  480-block  3
call    9 never executed
        -:  481:    } else {
    #####:  482:      std::cout << error_message_ << std::endl;
    %%%%%:  482-block  0
call    0 never executed
call    1 never executed
        -:  483:    }
    #####:  484:  }
    %%%%%:  484-block  0
        -:  485:
        -:  486: private:
        -:  487:  const CodeLocation loc_;
        -:  488:  const std::string error_message_;
        -:  489:  const bool as_error_;
        -:  490:};
        -:  491:
        -:  492:}  // namespace
        -:  493:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:  494:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        1:  495:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        1:  495-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  496:}
        -:  497:
        -:  498:// Add a given test_suit to the list of them allow to go un-instantiated.
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  499:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  500:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  500-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  500-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  500-block  2
call    8 never executed
call    9 never executed
    $$$$$:  500-block  3
call   10 never executed
    $$$$$:  500-block  4
    $$$$$:  500-block  5
call   11 never executed
    #####:  501:}
        -:  502:
        -:  503:// If this parameterized test suite has no instantiations (and that
        -:  504:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  505:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  506:                             bool has_test_p) {
    #####:  507:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  508:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  508-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  508-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  508-block  2
    $$$$$:  508-block  3
        -:  509:
    #####:  510:  const char kMissingInstantiation[] =  //
        -:  511:      " is defined via TEST_P, but never instantiated. None of the test cases "
        -:  512:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  513:      "ones provided expand to nothing."
        -:  514:      "\n\n"
        -:  515:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  516:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  517:      "placed in a library that may be linked in to get other utilities.)";
        -:  518:
    #####:  519:  const char kMissingTestCase[] =  //
        -:  520:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no test are "
        -:  521:      "defined via TEST_P . No test cases will run."
        -:  522:      "\n\n"
        -:  523:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  524:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  525:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  526:      "removed but the rest got left behind.";
        -:  527:
        -:  528:  std::string message =
    #####:  529:      "Parameterized test suite " + name +
    %%%%%:  529-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  529-block  1
    %%%%%:  529-block  2
    %%%%%:  529-block  3
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  529-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$:  529-block  5
    $$$$$:  529-block  6
    #####:  530:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  530-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  530-block  1
        -:  531:      "\n\n"
        -:  532:      "To suppress this error for this test suite, insert the following line "
        -:  533:      "(in a non-header) in the namespace it is defined in:"
        -:  534:      "\n\n"
    #####:  535:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  535-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  535-block  1
    #####:  536:      name + ");";
    %%%%%:  536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  537:
    #####:  538:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  538-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  538-block  1
    #####:  539:  RegisterTest(  //
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  539-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  539-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  539-block  2
call   11 never executed
    $$$$$:  539-block  3
call   12 never executed
    $$$$$:  539-block  4
        -:  540:      "GoogleTestVerification", full_name.c_str(),
        -:  541:      nullptr,  // No type parameter.
        -:  542:      nullptr,  // No value parameter.
function _ZZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEbENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  543:      location.file.c_str(), location.line, [message, location] {
    #####:  544:        return new FailureTest(location, message,
    #####:  545:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  545-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  545-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  545-block  2
call    7 never executed
    %%%%%:  545-block  3
    $$$$$:  545-block  4
call    8 never executed
    $$$$$:  545-block  5
call    9 never executed
        -:  546:      });
    #####:  547:}
call    0 never executed
call    1 never executed
    $$$$$:  547-block  0
call    2 never executed
    $$$$$:  547-block  1
call    3 never executed
        -:  548:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  549:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  550:                                        CodeLocation code_location) {
    #####:  551:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  551-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  551-block  1
call    6 never executed
    $$$$$:  551-block  2
call    7 never executed
        -:  552:      test_suite_name, code_location);
    #####:  553:}
        -:  554:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  555:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
    #####:  556:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterInstantiation(
    %%%%%:  556-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  557:      case_name);
    #####:  558:}
        -:  559:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  560:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  561:    const char* test_suite_name, CodeLocation code_location) {
    #####:  562:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  562-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  562-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  562-block  2
call    7 never executed
call    8 never executed
    $$$$$:  562-block  3
call    9 never executed
    $$$$$:  562-block  4
    $$$$$:  562-block  5
call   10 never executed
    $$$$$:  562-block  6
    #####:  563:                  TypeParameterizedTestSuiteInfo(code_location));
    %%%%%:  563-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    $$$$$:  563-block  1
call    6 never executed
    $$$$$:  563-block  2
    $$$$$:  563-block  3
call    7 never executed
    #####:  564:}
        -:  565:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  566:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  567:    const char* test_suite_name) {
    #####:  568:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  568-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  568-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  568-block  2
call    7 never executed
call    8 never executed
    $$$$$:  568-block  3
call    9 never executed
    $$$$$:  568-block  4
    $$$$$:  568-block  5
call   10 never executed
    $$$$$:  568-block  6
    #####:  569:  if (it != suites_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  570:    it->second.instantiated = true;
    %%%%%:  570-block  0
call    0 never executed
        -:  571:  } else {
    #####:  572:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  572-block  1
call    3 never executed
    %%%%%:  572-block  2
call    4 never executed
    $$$$$:  572-block  3
call    5 never executed
    $$$$$:  572-block  4
    #####:  573:                      << test_suite_name << "'";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  573-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  573-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  574:  }
    #####:  575:}
    %%%%%:  575-block  0
        -:  576:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 1 returned 100% blocks executed 12%
        1:  577:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        1:  578:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        1:  578-block  0
call    0 returned 1
       1*:  579:  for (const auto& testcase : suites_) {
call    0 returned 1
call    1 returned 1
    %%%%%:  579-block  0
call    2 never executed
    %%%%%:  579-block  1
call    3 never executed
        1:  579-block  2
call    4 returned 1
branch  5 taken 0
branch  6 taken 1 (fallthrough)
    #####:  580:    if (testcase.second.instantiated) continue;
branch  0 never executed
branch  1 never executed
    %%%%%:  580-block  0
    %%%%%:  580-block  1
    #####:  581:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  581-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  581-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  581-block  2
    $$$$$:  581-block  3
        -:  582:
        -:  583:    std::string message =
    #####:  584:        "Type parameterized test suite " + testcase.first +
    %%%%%:  584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  584-block  1
    $$$$$:  584-block  2
        -:  585:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  586:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  587:        "\n\n"
        -:  588:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  589:        "part of binaries that intend to use them. (As opposed to, for "
        -:  590:        "example, being placed in a library that may be linked in to get other "
        -:  591:        "utilities.)"
        -:  592:        "\n\n"
        -:  593:        "To suppress this error for this test suite, insert the following line "
        -:  594:        "(in a non-header) in the namespace it is defined in:"
        -:  595:        "\n\n"
    #####:  596:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  596-block  1
    #####:  597:        testcase.first + ");";
    %%%%%:  597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  597-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  598:
        -:  599:    std::string full_name =
    #####:  600:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  600-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  600-block  1
    #####:  601:    RegisterTest(  //
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  601-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  601-block  1
call   10 never executed
    $$$$$:  601-block  2
call   11 never executed
    $$$$$:  601-block  3
        -:  602:        "GoogleTestVerification", full_name.c_str(),
        -:  603:        nullptr,  // No type parameter.
        -:  604:        nullptr,  // No value parameter.
        -:  605:        testcase.second.code_location.file.c_str(),
function _ZZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  606:        testcase.second.code_location.line, [message, testcase] {
    %%%%%:  606-block  0
call    0 never executed
    #####:  607:          return new FailureTest(testcase.second.code_location, message,
    #####:  608:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  608-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  608-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  608-block  2
call    7 never executed
    %%%%%:  608-block  3
    $$$$$:  608-block  4
call    8 never executed
    $$$$$:  608-block  5
call    9 never executed
        -:  609:        });
    #####:  610:  }
call    0 never executed
call    1 never executed
    $$$$$:  610-block  0
call    2 never executed
    $$$$$:  610-block  1
call    3 never executed
        1:  611:}
        1:  611-block  0
        -:  612:
        -:  613:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  614:static ::std::vector<std::string> g_argvs;
        -:  615:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  616:::std::vector<std::string> GetArgvs() {
        -:  617:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  618:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  619:  // ::string. This code converts it to the appropriate type.
        -:  620:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  621:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  622:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  623:  return g_argvs;
        2:  623-block  0
call    0 returned 2
        -:  624:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  625:}
        -:  626:
        -:  627:#if GTEST_HAS_FILE_SYSTEM
        -:  628:// Returns the current application's name, removing directory path if that
        -:  629:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  630:FilePath GetCurrentExecutableName() {
    #####:  631:  FilePath result;
    %%%%%:  631-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  632:
        -:  633:#if defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_OS2)
    #####:  634:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
    %%%%%:  634-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  634-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  634-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  634-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  634-block  4
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$:  634-block  5
call   16 never executed
    $$$$$:  634-block  6
    $$$$$:  634-block  7
call   17 never executed
    $$$$$:  634-block  8
    $$$$$:  634-block  9
call   18 never executed
    $$$$$:  634-block 10
        -:  635:#else
        -:  636:  result.Set(FilePath(GetArgvs()[0]));
        -:  637:#endif  // GTEST_OS_WINDOWS
        -:  638:
    #####:  639:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  639-block  0
    #####:  640:}
    %%%%%:  640-block  0
call    0 never executed
    $$$$$:  640-block  1
call    1 never executed
        -:  641:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  642:
        -:  643:// Functions for processing the gtest_output flag.
        -:  644:
        -:  645:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 48%
        1:  646:std::string UnitTestOptions::GetOutputFormat() {
        1:  647:  std::string s = GTEST_FLAG_GET(output);
        1:  647-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  648:  const char* const gtest_output_flag = s.c_str();
        1:  648-block  0
call    0 returned 1
        1:  649:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  650:  return (colon == nullptr)
        -:  651:             ? std::string(gtest_output_flag)
        -:  652:             : std::string(gtest_output_flag,
       2*:  653:                           static_cast<size_t>(colon - gtest_output_flag));
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  653-block  0
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%:  653-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        1:  653-block  2
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:  653-block  3
call   12 never executed
        1:  653-block  4
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  653-block  5
call   15 returned 1
        1:  653-block  6
    $$$$$:  653-block  7
branch 16 never executed
branch 17 never executed
    $$$$$:  653-block  8
call   18 never executed
    $$$$$:  653-block  9
    $$$$$:  653-block 10
branch 19 never executed
branch 20 never executed
    $$$$$:  653-block 11
call   21 never executed
    $$$$$:  653-block 12
        1:  654:}
        1:  654-block  0
call    0 returned 1
    $$$$$:  654-block  1
call    1 never executed
        -:  655:
        -:  656:#if GTEST_HAS_FILE_SYSTEM
        -:  657:// Returns the name of the requested output file, or the default if none
        -:  658:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  659:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  660:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  661:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  661-block  0
call    0 never executed
        -:  662:
    #####:  663:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  664:  if (format.empty()) format = std::string(kDefaultOutputFormat);
    %%%%%:  664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  664-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  664-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  664-block  3
call   10 never executed
    $$$$$:  664-block  4
        -:  665:
    #####:  666:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  667:  if (colon == nullptr)
    %%%%%:  667-block  0
branch  0 never executed
branch  1 never executed
    #####:  668:    return internal::FilePath::MakeFileName(
    %%%%%:  668-block  0
call    0 never executed
    %%%%%:  668-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  668-block  2
call    4 never executed
    $$$$$:  668-block  3
call    5 never executed
    $$$$$:  668-block  4
    #####:  669:               internal::FilePath(
    %%%%%:  669-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  669-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  669-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  669-block  3
call   14 never executed
    $$$$$:  669-block  4
    $$$$$:  669-block  5
call   15 never executed
    $$$$$:  669-block  6
    $$$$$:  669-block  7
call   16 never executed
    $$$$$:  669-block  8
        -:  670:                   UnitTest::GetInstance()->original_working_dir()),
    #####:  671:               internal::FilePath(kDefaultOutputFile), 0, format.c_str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  671-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  671-block  1
call   10 never executed
    $$$$$:  671-block  2
    $$$$$:  671-block  3
call   11 never executed
    $$$$$:  671-block  4
    $$$$$:  671-block  5
call   12 never executed
    $$$$$:  671-block  6
    #####:  672:        .string();
    %%%%%:  672-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  673:
    #####:  674:  internal::FilePath output_name(colon + 1);
    %%%%%:  674-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  674-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:  674-block  2
    $$$$$:  674-block  3
    #####:  675:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  676:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  676-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  676-block  1
call    3 never executed
    $$$$$:  676-block  2
call    4 never executed
    $$$$$:  676-block  3
    #####:  677:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  677-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  677-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  677-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  677-block  3
call   14 never executed
    $$$$$:  677-block  4
    $$$$$:  677-block  5
call   15 never executed
    $$$$$:  677-block  6
    $$$$$:  677-block  7
call   16 never executed
    $$$$$:  677-block  8
    #####:  678:        internal::FilePath(colon + 1));
    %%%%%:  678-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  678-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  678-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  678-block  3
call   13 never executed
    $$$$$:  678-block  4
    $$$$$:  678-block  5
call   14 never executed
    $$$$$:  678-block  6
    $$$$$:  678-block  7
call   15 never executed
    $$$$$:  678-block  8
        -:  679:
    #####:  680:  if (!output_name.IsDirectory()) return output_name.string();
    %%%%%:  680-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  680-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  681:
        -:  682:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  683:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  683-block  0
    #####:  684:      GetOutputFormat().c_str()));
    %%%%%:  684-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  684-block  1
call    3 never executed
    %%%%%:  684-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  684-block  3
    #####:  685:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  686:}
    %%%%%:  686-block  0
call    0 never executed
    %%%%%:  686-block  1
call    1 never executed
    %%%%%:  686-block  2
call    2 never executed
call    3 never executed
    $$$$$:  686-block  3
call    4 never executed
    $$$$$:  686-block  4
call    5 never executed
    $$$$$:  686-block  5
call    6 never executed
    $$$$$:  686-block  6
call    7 never executed
        -:  687:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  688:
        -:  689:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  690:// pattern consists of regular characters, single-character wildcards (?), and
        -:  691:// multi-character wildcards (*).
        -:  692://
        -:  693:// This function implements a linear-time string globbing algorithm based on
        -:  694:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 94 returned 100% blocks executed 77%
       94:  695:static bool PatternMatchesString(const std::string& name_str,
        -:  696:                                 const char* pattern, const char* pattern_end) {
       94:  697:  const char* name = name_str.c_str();
       94:  697-block  0
call    0 returned 94
       94:  698:  const char* const name_begin = name;
       94:  699:  const char* const name_end = name + name_str.size();
call    0 returned 94
        -:  700:
       94:  701:  const char* pattern_next = pattern;
       94:  702:  const char* name_next = name;
        -:  703:
    1594*:  704:  while (pattern < pattern_end || name < name_end) {
     1594:  704-block  0
branch  0 taken 1594
branch  1 taken 0 (fallthrough)
    %%%%%:  704-block  1
branch  2 never executed
branch  3 never executed
     1594:  705:    if (pattern < pattern_end) {
     1594:  705-block  0
branch  0 taken 1594 (fallthrough)
branch  1 taken 0
     1594:  706:      switch (*pattern) {
     1594:  706-block  0
branch  0 taken 946
branch  1 taken 0
branch  2 taken 648
      946:  707:        default:  // Match an ordinary character.
      946:  708:          if (name < name_end && *name == *pattern) {
      946:  708-block  0
branch  0 taken 898 (fallthrough)
branch  1 taken 48
      898:  708-block  1
branch  2 taken 252 (fallthrough)
branch  3 taken 646
      252:  709:            ++pattern;
      252:  710:            ++name;
      252:  711:            continue;
      252:  711-block  0
        -:  712:          }
      694:  713:          break;
      694:  713-block  0
    #####:  714:        case '?':  // Match any single character.
    #####:  715:          if (name < name_end) {
    %%%%%:  715-block  0
branch  0 never executed
branch  1 never executed
    #####:  716:            ++pattern;
    #####:  717:            ++name;
    #####:  718:            continue;
    %%%%%:  718-block  0
        -:  719:          }
    #####:  720:          break;
    %%%%%:  720-block  0
      648:  721:        case '*':
        -:  722:          // Match zero or more characters. Start by skipping over the wildcard
        -:  723:          // and matching zero characters from name. If that fails, restart and
        -:  724:          // match one more character than the last attempt.
      648:  725:          pattern_next = pattern;
      648:  726:          name_next = name + 1;
      648:  727:          ++pattern;
      648:  728:          continue;
      648:  728-block  0
        -:  729:      }
        -:  730:    }
        -:  731:    // Failed to match a character. Restart if possible.
      694:  732:    if (name_begin < name_next && name_next <= name_end) {
      694:  732-block  0
branch  0 taken 648 (fallthrough)
branch  1 taken 46
      648:  732-block  1
branch  2 taken 600 (fallthrough)
branch  3 taken 48
      600:  733:      pattern = pattern_next;
      600:  734:      name = name_next;
      600:  735:      continue;
      600:  735-block  0
        -:  736:    }
       94:  737:    return false;
       94:  737-block  0
        -:  738:  }
    #####:  739:  return true;
    %%%%%:  739-block  0
        -:  740:}
        -:  741:
        -:  742:namespace {
        -:  743:
function _ZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 9 returned 100% blocks executed 100%
        9:  744:bool IsGlobPattern(const std::string& pattern) {
        9:  745:  return std::any_of(pattern.begin(), pattern.end(),
        9:  745-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
function _ZZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlcE_clEc called 61 returned 100% blocks executed 100%
       70:  746:                     [](const char c) { return c == '?' || c == '*'; });
       61:  746-block  0
branch  0 taken 61 (fallthrough)
branch  1 taken 0
       61:  746-block  1
branch  2 taken 8 (fallthrough)
branch  3 taken 53
        8:  746-block  2
       53:  746-block  3
       61:  746-block  4
        -:  747:}
        -:  748:
        -:  749:class UnitTestFilter {
        -:  750: public:
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2Ev called 2 returned 100% blocks executed 100%
        2:  751:  UnitTestFilter() = default;
        2:  751-block  0
call    0 returned 2
call    1 returned 2
        -:  752:
        -:  753:  // Constructs a filter from a string of patterns separated by `:`.
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 78%
        3:  754:  explicit UnitTestFilter(const std::string& filter) {
        3:  754-block  0
call    0 returned 3
call    1 returned 3
        -:  755:    // By design "" filter matches "" string.
        3:  756:    std::vector<std::string> all_patterns;
call    0 returned 3
        3:  757:    SplitString(filter, ':', &all_patterns);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  758:    const auto exact_match_patterns_begin = std::partition(
        3:  758-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        -:  759:        all_patterns.begin(), all_patterns.end(), &IsGlobPattern);
        -:  760:
        6:  761:    glob_patterns_.reserve(static_cast<size_t>(
        3:  762:        std::distance(all_patterns.begin(), exact_match_patterns_begin)));
        3:  762-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  762-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        6:  763:    std::move(all_patterns.begin(), exact_match_patterns_begin,
        3:  763-block  0
call    0 returned 3
        3:  763-block  1
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3:  764:              std::inserter(glob_patterns_, glob_patterns_.begin()));
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        6:  765:    std::move(
        3:  765-block  0
call    0 returned 3
        3:  765-block  1
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        -:  766:        exact_match_patterns_begin, all_patterns.end(),
        3:  767:        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  768:  }
        3:  768-block  0
call    0 returned 3
    $$$$$:  768-block  1
call    1 never executed
    $$$$$:  768-block  2
call    2 never executed
    $$$$$:  768-block  3
call    3 never executed
        -:  769:
        -:  770:  // Returns true if and only if name matches at least one of the patterns in
        -:  771:  // the filter.
function _ZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 38 returned 100% blocks executed 100%
       38:  772:  bool MatchesName(const std::string& name) const {
       75:  773:    return exact_match_patterns_.count(name) > 0 ||
       38:  773-block  0
call    0 returned 38
branch  1 taken 37 (fallthrough)
branch  2 taken 1
        1:  773-block  1
       37:  773-block  2
       37:  774:           std::any_of(glob_patterns_.begin(), glob_patterns_.end(),
       37:  774-block  0
call    0 returned 37
call    1 returned 37
call    2 returned 37
branch  3 taken 0 (fallthrough)
branch  4 taken 37
function _ZZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlSA_E_clESA_ called 94 returned 100% blocks executed 100%
      188:  775:                       [&name](const std::string& pattern) {
       94:  776:                         return PatternMatchesString(
call    0 returned 94
call    1 returned 94
        -:  777:                             name, pattern.c_str(),
      188:  778:                             pattern.c_str() + pattern.size());
       94:  778-block  0
call    0 returned 94
call    1 returned 94
       38:  779:                       });
       38:  779-block  0
        -:  780:  }
        -:  781:
        -:  782: private:
        -:  783:  std::vector<std::string> glob_patterns_;
        -:  784:  std::unordered_set<std::string> exact_match_patterns_;
        -:  785:};
        -:  786:
        -:  787:class PositiveAndNegativeUnitTestFilter {
        -:  788: public:
        -:  789:  // Constructs a positive and a negative filter from a string. The string
        -:  790:  // contains a positive filter optionally followed by a '-' character and a
        -:  791:  // negative filter. In case only a negative filter is provided the positive
        -:  792:  // filter will be assumed "*".
        -:  793:  // A filter is a list of patterns separated by ':'.
function _ZN7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 23%
        1:  794:  explicit PositiveAndNegativeUnitTestFilter(const std::string& filter) {
        1:  794-block  0
call    0 returned 1
call    1 returned 1
        1:  795:    std::vector<std::string> positive_and_negative_filters;
call    0 returned 1
        -:  796:
        -:  797:    // NOTE: `SplitString` always returns a non-empty container.
        1:  798:    SplitString(filter, '-', &positive_and_negative_filters);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  799:    const auto& positive_filter = positive_and_negative_filters.front();
        1:  799-block  0
call    0 returned 1
        -:  800:
        1:  801:    if (positive_and_negative_filters.size() > 1) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  802:      positive_filter_ = UnitTestFilter(
    %%%%%:  802-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  803:          positive_filter.empty() ? kUniversalFilter : positive_filter);
    %%%%%:  803-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  803-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  803-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  803-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  803-block  4
call   14 never executed
    $$$$$:  803-block  5
call   15 never executed
    $$$$$:  803-block  6
    $$$$$:  803-block  7
branch 16 never executed
branch 17 never executed
    $$$$$:  803-block  8
call   18 never executed
    $$$$$:  803-block  9
        -:  804:
        -:  805:      // TODO(b/214626361): Fail on multiple '-' characters
        -:  806:      // For the moment to preserve old behavior we concatenate the rest of the
        -:  807:      // string parts with `-` as separator to generate the negative filter.
    #####:  808:      auto negative_filter_string = positive_and_negative_filters[1];
    %%%%%:  808-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  809:      for (std::size_t i = 2; i < positive_and_negative_filters.size(); i++)
    %%%%%:  809-block  0
    %%%%%:  809-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  810:        negative_filter_string =
    #####:  811:            negative_filter_string + '-' + positive_and_negative_filters[i];
    %%%%%:  811-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  811-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  811-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  811-block  3
call   10 never executed
    $$$$$:  811-block  4
    #####:  812:      negative_filter_ = UnitTestFilter(negative_filter_string);
    %%%%%:  812-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  812-block  1
call    3 never executed
call    4 never executed
    #####:  813:    } else {
call    0 never executed
    $$$$$:  813-block  0
call    1 never executed
        -:  814:      // In case we don't have a negative filter and positive filter is ""
        -:  815:      // we do not use kUniversalFilter by design as opposed to when we have a
        -:  816:      // negative filter.
        1:  817:      positive_filter_ = UnitTestFilter(positive_filter);
        1:  817-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  817-block  1
call    3 returned 1
call    4 returned 1
        -:  818:    }
        1:  819:  }
        1:  819-block  0
call    0 returned 1
    $$$$$:  819-block  1
call    1 never executed
    $$$$$:  819-block  2
call    2 never executed
    $$$$$:  819-block  3
call    3 never executed
        -:  820:
        -:  821:  // Returns true if and only if test name (this is generated by appending test
        -:  822:  // suit name and test name via a '.' character) matches the positive filter
        -:  823:  // and does not match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 12 returned 100% blocks executed 64%
       12:  824:  bool MatchesTest(const std::string& test_suite_name,
        -:  825:                   const std::string& test_name) const {
       12:  826:    return MatchesName(test_suite_name + "." + test_name);
       12:  826-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12:  826-block  1
call    4 returned 12
branch  5 taken 12 (fallthrough)
branch  6 taken 0 (throw)
       12:  826-block  2
       12:  826-block  3
call    7 returned 12
call    8 returned 12
       12:  826-block  4
    $$$$$:  826-block  5
call    9 never executed
    $$$$$:  826-block  6
    $$$$$:  826-block  7
call   10 never executed
        -:  827:  }
        -:  828:
        -:  829:  // Returns true if and only if name matches the positive filter and does not
        -:  830:  // match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 12 returned 100% blocks executed 100%
       12:  831:  bool MatchesName(const std::string& name) const {
       13:  832:    return positive_filter_.MatchesName(name) &&
       12:  832-block  0
call    0 returned 12
branch  1 taken 1 (fallthrough)
branch  2 taken 11
        1:  832-block  1
       11:  832-block  2
       13:  833:           !negative_filter_.MatchesName(name);
        1:  833-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
       12:  833-block  1
        -:  834:  }
        -:  835:
        -:  836: private:
        -:  837:  UnitTestFilter positive_filter_;
        -:  838:  UnitTestFilter negative_filter_;
        -:  839:};
        -:  840:}  // namespace
        -:  841:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 0 returned 0% blocks executed 0%
    #####:  842:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
        -:  843:                                    const char* filter) {
    #####:  844:  return UnitTestFilter(filter).MatchesName(name_str);
    %%%%%:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  844-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  844-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  844-block  3
    %%%%%:  844-block  4
call   10 never executed
call   11 never executed
call   12 never executed
    %%%%%:  844-block  5
    $$$$$:  844-block  6
call   13 never executed
    $$$$$:  844-block  7
    $$$$$:  844-block  8
call   14 never executed
    $$$$$:  844-block  9
    $$$$$:  844-block 10
call   15 never executed
        -:  845:}
        -:  846:
        -:  847:// Returns true if and only if the user-specified filter matches the test
        -:  848:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:  849:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  850:                                        const std::string& test_name) {
        -:  851:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  852:  // positive filter and negative filter portions
    #####:  853:  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))
    %%%%%:  853-block  0
call    0 never executed
    %%%%%:  853-block  1
call    1 never executed
    $$$$$:  853-block  2
call    2 never executed
    #####:  854:      .MatchesTest(test_suite_name, test_name);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  854-block  0
    %%%%%:  854-block  1
        -:  855:}
        -:  856:
        -:  857:#if GTEST_HAS_SEH
        -:  858:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  859:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  860:// This function is useful as an __except condition.
        -:  861:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -:  862:  // Google Test should handle a SEH exception if:
        -:  863:  //   1. the user wants it to, AND
        -:  864:  //   2. this is not a breakpoint exception, AND
        -:  865:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  866:  //      apparently).
        -:  867:  //
        -:  868:  // SEH exception code for C++ exceptions.
        -:  869:  // (see http://support.microsoft.com/kb/185294 for more information).
        -:  870:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  871:
        -:  872:  bool should_handle = true;
        -:  873:
        -:  874:  if (!GTEST_FLAG_GET(catch_exceptions))
        -:  875:    should_handle = false;
        -:  876:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -:  877:    should_handle = false;
        -:  878:  else if (exception_code == kCxxExceptionCode)
        -:  879:    should_handle = false;
        -:  880:
        -:  881:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -:  882:}
        -:  883:#endif  // GTEST_HAS_SEH
        -:  884:
        -:  885:}  // namespace internal
        -:  886:
        -:  887:// The c'tor sets this object as the test part result reporter used by
        -:  888:// Google Test.  The 'result' parameter specifies where to report the
        -:  889:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  890:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  891:    TestPartResultArray* result)
    #####:  892:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD), result_(result) {
    %%%%%:  892-block  0
call    0 never executed
    #####:  893:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  894:}
    %%%%%:  894-block  0
    $$$$$:  894-block  1
call    0 never executed
        -:  895:
        -:  896:// The c'tor sets this object as the test part result reporter used by
        -:  897:// Google Test.  The 'result' parameter specifies where to report the
        -:  898:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  899:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  900:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  901:    : intercept_mode_(intercept_mode), result_(result) {
    %%%%%:  901-block  0
call    0 never executed
    #####:  902:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:}
    %%%%%:  903-block  0
    $$$$$:  903-block  1
call    0 never executed
        -:  904:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  905:void ScopedFakeTestPartResultReporter::Init() {
    #####:  906:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  906-block  0
call    0 never executed
    #####:  907:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  908:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  908-block  0
call    0 never executed
    #####:  909:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  910:  } else {
    #####:  911:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  911-block  0
call    0 never executed
    #####:  912:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  913:  }
    #####:  914:}
        -:  915:
        -:  916:// The d'tor restores the test part result reporter used by Google Test
        -:  917:// before.
    #####:  918:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  919:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  920:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  921:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  922:  } else {
    #####:  923:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  924:  }
    #####:  925:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  918:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  919:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  920:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  921:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  922:  } else {
        -:  923:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  924:  }
    #####:  925:}
    %%%%%:  925-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  918:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  919:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  919-block  0
call    0 never executed
    #####:  920:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  921:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  921-block  0
call    0 never executed
        -:  922:  } else {
    #####:  923:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  923-block  0
call    0 never executed
        -:  924:  }
    #####:  925:}
    %%%%%:  925-block  0
call    0 never executed
------------------
        -:  926:
        -:  927:// Increments the test part result count and remembers the result.
        -:  928:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  929:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  930:    const TestPartResult& result) {
    #####:  931:  result_->Append(result);
    %%%%%:  931-block  0
call    0 never executed
    #####:  932:}
        -:  933:
        -:  934:namespace internal {
        -:  935:
        -:  936:// Returns the type ID of ::testing::Test.  We should always call this
        -:  937:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  938:// testing::Test.  This is to work around a suspected linker bug when
        -:  939:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  940:// GetTypeId< ::testing::Test>() to return different values depending
        -:  941:// on whether the call is from the Google Test framework itself or
        -:  942:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  943:// return the same value, as it always calls GetTypeId<>() from the
        -:  944:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 1 returned 100% blocks executed 100%
        1:  945:TypeId GetTestTypeId() { return GetTypeId<Test>(); }
        1:  945-block  0
call    0 returned 1
        -:  946:
        -:  947:// The value of GetTestTypeId() as seen from within the Google Test
        -:  948:// library.  This is solely for testing GetTestTypeId().
        -:  949:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  950:
        -:  951:// This predicate-formatter checks that 'results' contains a test part
        -:  952:// failure of the given type and that the failure message contains the
        -:  953:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  954:static AssertionResult HasOneFailure(const char* /* results_expr */,
        -:  955:                                     const char* /* type_expr */,
        -:  956:                                     const char* /* substr_expr */,
        -:  957:                                     const TestPartResultArray& results,
        -:  958:                                     TestPartResult::Type type,
        -:  959:                                     const std::string& substr) {
        -:  960:  const std::string expected(type == TestPartResult::kFatalFailure
        -:  961:                                 ? "1 fatal failure"
    #####:  962:                                 : "1 non-fatal failure");
    %%%%%:  962-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  962-block  1
    %%%%%:  962-block  2
    %%%%%:  962-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  962-block  4
    #####:  963:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  964:  if (results.size() != 1) {
    %%%%%:  964-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  965:    msg << "Expected: " << expected << "\n"
    %%%%%:  965-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  965-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  965-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  966:        << "  Actual: " << results.size() << " failures";
    %%%%%:  966-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  966-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  966-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  966-block  3
    #####:  967:    for (int i = 0; i < results.size(); i++) {
    %%%%%:  967-block  0
    %%%%%:  967-block  1
    %%%%%:  967-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  968:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%:  968-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  968-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  968-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  969:    }
    #####:  970:    return AssertionFailure() << msg;
    %%%%%:  970-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  970-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  970-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  970-block  3
call    9 never executed
    $$$$$:  970-block  4
call   10 never executed
    $$$$$:  970-block  5
        -:  971:  }
        -:  972:
    #####:  973:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%:  973-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:  if (r.type() != type) {
    %%%%%:  974-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  975:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%:  975-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  975-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  975-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  975-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  975-block  4
call   12 never executed
    $$$$$:  975-block  5
call   13 never executed
    $$$$$:  975-block  6
    #####:  976:                              << "  Actual:\n"
    %%%%%:  976-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:                              << r;
    %%%%%:  977-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  977-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  978:  }
        -:  979:
    #####:  980:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%:  980-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  981:    return AssertionFailure()
    %%%%%:  981-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  981-block  1
call    3 never executed
    $$$$$:  981-block  2
call    4 never executed
    $$$$$:  981-block  3
    #####:  982:           << "Expected: " << expected << " containing \"" << substr << "\"\n"
    %%%%%:  982-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  982-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  982-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  982-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  982-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  983:           << "  Actual:\n"
    %%%%%:  983-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  984:           << r;
    %%%%%:  984-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  984-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  985:  }
        -:  986:
    #####:  987:  return AssertionSuccess();
    %%%%%:  987-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  988:}
    %%%%%:  988-block  0
call    0 never executed
call    1 never executed
    $$$$$:  988-block  1
call    2 never executed
    $$$$$:  988-block  2
call    3 never executed
        -:  989:
        -:  990:// The constructor of SingleFailureChecker remembers where to look up
        -:  991:// test part results, what type of failure we expect, and what
        -:  992:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  993:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -:  994:                                           TestPartResult::Type type,
    #####:  995:                                           const std::string& substr)
    #####:  996:    : results_(results), type_(type), substr_(substr) {}
    %%%%%:  996-block  0
call    0 never executed
        -:  997:
        -:  998:// The destructor of SingleFailureChecker verifies that the given
        -:  999:// TestPartResultArray contains exactly one failure that has the given
        -: 1000:// type and contains the given substring.  If that's not the case, a
        -: 1001:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####: 1002:SingleFailureChecker::~SingleFailureChecker() {
    #####: 1003:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%: 1003-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1003-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 1003-block  2
call   10 never executed
    #####: 1004:}
call    0 never executed
        -: 1005:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 1006:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1: 1007:    UnitTestImpl* unit_test)
        1: 1008:    : unit_test_(unit_test) {}
        1: 1008-block  0
call    0 returned 1
        -: 1009:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1010:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -: 1011:    const TestPartResult& result) {
    #####: 1012:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%: 1012-block  0
call    0 never executed
call    1 never executed
    #####: 1013:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1014:}
        -: 1015:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 1016:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1: 1017:    UnitTestImpl* unit_test)
        1: 1018:    : unit_test_(unit_test) {}
        1: 1018-block  0
call    0 returned 1
        -: 1019:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1020:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -: 1021:    const TestPartResult& result) {
    #####: 1022:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%: 1022-block  0
call    0 never executed
call    1 never executed
    #####: 1023:}
        -: 1024:
        -: 1025:// Returns the global test part result reporter.
        -: 1026:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####: 1027:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####: 1028:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1028-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1029:  return global_test_part_result_reporter_;
    %%%%%: 1029-block  0
    #####: 1030:}
    %%%%%: 1030-block  0
call    0 never executed
        -: 1031:
        -: 1032:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1033:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -: 1034:    TestPartResultReporterInterface* reporter) {
    #####: 1035:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1035-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1036:  global_test_part_result_reporter_ = reporter;
    #####: 1037:}
    %%%%%: 1037-block  0
call    0 never executed
        -: 1038:
        -: 1039:// Returns the test part result reporter for the current thread.
        -: 1040:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 0 returned 0% blocks executed 0%
    #####: 1041:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####: 1042:  return per_thread_test_part_result_reporter_.get();
    %%%%%: 1042-block  0
call    0 never executed
        -: 1043:}
        -: 1044:
        -: 1045:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1046:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -: 1047:    TestPartResultReporterInterface* reporter) {
    #####: 1048:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%: 1048-block  0
call    0 never executed
    #####: 1049:}
        -: 1050:
        -: 1051:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1052:int UnitTestImpl::successful_test_suite_count() const {
    #####: 1053:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%: 1053-block  0
call    0 never executed
        -: 1054:}
        -: 1055:
        -: 1056:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1057:int UnitTestImpl::failed_test_suite_count() const {
        2: 1058:  return CountIf(test_suites_, TestSuiteFailed);
        2: 1058-block  0
call    0 returned 2
        -: 1059:}
        -: 1060:
        -: 1061:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1062:int UnitTestImpl::total_test_suite_count() const {
        2: 1063:  return static_cast<int>(test_suites_.size());
        2: 1063-block  0
call    0 returned 2
        -: 1064:}
        -: 1065:
        -: 1066:// Gets the number of all test suites that contain at least one test
        -: 1067:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1068:int UnitTestImpl::test_suite_to_run_count() const {
        2: 1069:  return CountIf(test_suites_, ShouldRunTestSuite);
        2: 1069-block  0
call    0 returned 2
        -: 1070:}
        -: 1071:
        -: 1072:// Gets the number of successful test.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 1073:int UnitTestImpl::successful_test_count() const {
        1: 1074:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1: 1074-block  0
call    0 returned 1
        -: 1075:}
        -: 1076:
        -: 1077:// Gets the number of skipped test.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 1078:int UnitTestImpl::skipped_test_count() const {
        1: 1079:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1: 1079-block  0
call    0 returned 1
        -: 1080:}
        -: 1081:
        -: 1082:// Gets the number of failed test.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1083:int UnitTestImpl::failed_test_count() const {
    #####: 1084:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%: 1084-block  0
call    0 never executed
        -: 1085:}
        -: 1086:
        -: 1087:// Gets the number of disabled test that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 1088:int UnitTestImpl::reportable_disabled_test_count() const {
        1: 1089:  return SumOverTestSuiteList(test_suites_,
        1: 1089-block  0
call    0 returned 1
        1: 1090:                              &TestSuite::reportable_disabled_test_count);
        -: 1091:}
        -: 1092:
        -: 1093:// Gets the number of disabled test.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1094:int UnitTestImpl::disabled_test_count() const {
    #####: 1095:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%: 1095-block  0
call    0 never executed
        -: 1096:}
        -: 1097:
        -: 1098:// Gets the number of test to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1099:int UnitTestImpl::reportable_test_count() const {
    #####: 1100:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1100-block  0
call    0 never executed
        -: 1101:}
        -: 1102:
        -: 1103:// Gets the number of all test.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1104:int UnitTestImpl::total_test_count() const {
    #####: 1105:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%: 1105-block  0
call    0 never executed
        -: 1106:}
        -: 1107:
        -: 1108:// Gets the number of test that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1109:int UnitTestImpl::test_to_run_count() const {
        2: 1110:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2: 1110-block  0
call    0 returned 2
        -: 1111:}
        -: 1112:
        -: 1113:// Returns the current OS stack trace as an std::string.
        -: 1114://
        -: 1115:// The maximum number of stack frames to be included is specified by
        -: 1116:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1117:// specifies the number of top frames to be skipped, which doesn't
        -: 1118:// count against the number of frames to be included.
        -: 1119://
        -: 1120:// For example, if Foo() calls Bar(), which in turn calls
        -: 1121:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1122:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1123:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####: 1124:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%: 1124-block  0
call    0 never executed
        -: 1125:      static_cast<int>(GTEST_FLAG_GET(stack_trace_depth)), skip_count + 1
        -: 1126:      // Skips the user-specified number of frames plus this function
        -: 1127:      // itself.
    #####: 1128:  );  // NOLINT
call    0 never executed
        -: 1129:}
        -: 1130:
        -: 1131:// A helper class for measuring elapsed times.
        -: 1132:class Timer {
        -: 1133: public:
function _ZN7testing8internal5TimerC1Ev called 3 returned 100% blocks executed 100%
        3: 1134:  Timer() : start_(clock::now()) {}
        3: 1134-block  0
call    0 returned 3
        -: 1135:
        -: 1136:  // Return time elapsed in milliseconds since the timer was created.
function _ZN7testing8internal5Timer7ElapsedEv called 3 returned 100% blocks executed 88%
        3: 1137:  TimeInMillis Elapsed() {
        6: 1138:    return std::chrono::duration_cast<std::chrono::milliseconds>(clock::now() -
        3: 1138-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 1138-block  1
        3: 1139:                                                                 start_)
        3: 1139-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        6: 1140:        .count();
        3: 1140-block  0
call    0 returned 3
        3: 1140-block  1
        -: 1141:  }
        -: 1142:
        -: 1143: private:
        -: 1144:  // Fall back to the system_clock when building with newlib on a system
        -: 1145:  // without a monotonic clock.
        -: 1146:#if defined(_NEWLIB_VERSION) && !defined(CLOCK_MONOTONIC)
        -: 1147:  using clock = std::chrono::system_clock;
        -: 1148:#else
        -: 1149:  using clock = std::chrono::steady_clock;
        -: 1150:#endif
        -: 1151:  clock::time_point start_;
        -: 1152:};
        -: 1153:
        -: 1154:// Returns a timestamp as milliseconds since the epoch. Note this time may jump
        -: 1155:// around subject to adjustments by the system, to measure elapsed time use
        -: 1156:// Timer instead.
function _ZN7testing8internal15GetTimeInMillisEv called 4 returned 100% blocks executed 80%
        4: 1157:TimeInMillis GetTimeInMillis() {
        4: 1158:  return std::chrono::duration_cast<std::chrono::milliseconds>(
        4: 1158-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 1159:             std::chrono::system_clock::now() -
call    0 returned 4
    $$$$$: 1159-block  0
    $$$$$: 1159-block  1
       12: 1160:             std::chrono::system_clock::from_time_t(0))
        4: 1160-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        8: 1161:      .count();
        4: 1161-block  0
call    0 returned 4
        4: 1161-block  1
        -: 1162:}
        -: 1163:
        -: 1164:// Utilities
        -: 1165:
        -: 1166:// class String.
        -: 1167:
        -: 1168:#ifdef GTEST_OS_WINDOWS_MOBILE
        -: 1169:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1170:// memory using new. The caller is responsible for deleting the return
        -: 1171:// value using delete[]. Returns the wide string, or NULL if the
        -: 1172:// input is NULL.
        -: 1173:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1174:  if (!ansi) return nullptr;
        -: 1175:  const int length = strlen(ansi);
        -: 1176:  const int unicode_length =
        -: 1177:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1178:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1179:  MultiByteToWideChar(CP_ACP, 0, ansi, length, unicode, unicode_length);
        -: 1180:  unicode[unicode_length] = 0;
        -: 1181:  return unicode;
        -: 1182:}
        -: 1183:
        -: 1184:// Creates an ANSI string from the given wide string, allocating
        -: 1185:// memory using new. The caller is responsible for deleting the return
        -: 1186:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1187:// input is NULL.
        -: 1188:const char* String::Utf16ToAnsi(LPCWSTR utf16_str) {
        -: 1189:  if (!utf16_str) return nullptr;
        -: 1190:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1191:                                              0, nullptr, nullptr);
        -: 1192:  char* ansi = new char[ansi_length + 1];
        -: 1193:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1194:                      nullptr);
        -: 1195:  ansi[ansi_length] = 0;
        -: 1196:  return ansi;
        -: 1197:}
        -: 1198:
        -: 1199:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1200:
        -: 1201:// Compares two C strings.  Returns true if and only if they have the same
        -: 1202:// content.
        -: 1203://
        -: 1204:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1205:// C string is considered different to any non-NULL C string,
        -: 1206:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 67%
        2: 1207:bool String::CStringEquals(const char* lhs, const char* rhs) {
       2*: 1208:  if (lhs == nullptr) return rhs == nullptr;
        2: 1208-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1208-block  1
        -: 1209:
       2*: 1210:  if (rhs == nullptr) return false;
        2: 1210-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1210-block  1
        -: 1211:
        2: 1212:  return strcmp(lhs, rhs) == 0;
        2: 1212-block  0
        -: 1213:}
        -: 1214:
        -: 1215:#if GTEST_HAS_STD_WSTRING
        -: 1216:
        -: 1217:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1218:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwyPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1219:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1220:                                     Message* msg) {
    #####: 1221:  for (size_t i = 0; i != length;) {  // NOLINT
    %%%%%: 1221-block  0
    %%%%%: 1221-block  1
branch  0 never executed
branch  1 never executed
    #####: 1222:    if (wstr[i] != L'\0') {
    %%%%%: 1222-block  0
branch  0 never executed
branch  1 never executed
    #####: 1223:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1223-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1223-block  1
call    4 never executed
    $$$$$: 1223-block  2
call    5 never executed
    $$$$$: 1223-block  3
call    6 never executed
    #####: 1224:      while (i != length && wstr[i] != L'\0') i++;
    %%%%%: 1224-block  0
    %%%%%: 1224-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1224-block  2
branch  2 never executed
branch  3 never executed
        -: 1225:    } else {
    #####: 1226:      *msg << '\0';
    %%%%%: 1226-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1227:      i++;
    %%%%%: 1227-block  0
        -: 1228:    }
        -: 1229:  }
    #####: 1230:}
    %%%%%: 1230-block  0
        -: 1231:
        -: 1232:#endif  // GTEST_HAS_STD_WSTRING
        -: 1233:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 4 returned 100% blocks executed 69%
        4: 1234:void SplitString(const ::std::string& str, char delimiter,
        -: 1235:                 ::std::vector< ::std::string>* dest) {
        4: 1236:  ::std::vector< ::std::string> parsed;
        4: 1236-block  0
call    0 returned 4
        4: 1237:  ::std::string::size_type pos = 0;
       10: 1238:  while (::testing::internal::AlwaysTrue()) {
       10: 1238-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 1238-block  1
branch  3 taken 10
branch  4 taken 0 (fallthrough)
       10: 1239:    const ::std::string::size_type colon = str.find(delimiter, pos);
       10: 1239-block  0
call    0 returned 10
       10: 1240:    if (colon == ::std::string::npos) {
branch  0 taken 4 (fallthrough)
branch  1 taken 6
        4: 1241:      parsed.push_back(str.substr(pos));
        4: 1241-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 1241-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 1241-block  2
call    6 returned 4
    $$$$$: 1241-block  3
call    7 never executed
    $$$$$: 1241-block  4
        4: 1242:      break;
        -: 1243:    } else {
        6: 1244:      parsed.push_back(str.substr(pos, colon - pos));
        6: 1244-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 1244-block  1
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
        6: 1244-block  2
call    6 returned 6
    $$$$$: 1244-block  3
call    7 never executed
    $$$$$: 1244-block  4
        6: 1245:      pos = colon + 1;
        -: 1246:    }
        -: 1247:  }
        4: 1248:  dest->swap(parsed);
        4: 1248-block  0
call    0 returned 4
        4: 1249:}
call    0 returned 4
    $$$$$: 1249-block  0
call    1 never executed
        -: 1250:
        -: 1251:}  // namespace internal
        -: 1252:
        -: 1253:// Constructs an empty Message.
        -: 1254:// We allocate the stringstream separately because otherwise each use of
        -: 1255:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1256:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1257:// the stack space.
function _ZN7testing7MessageC2Ev called 55 returned 100% blocks executed 73%
       55: 1258:Message::Message() : ss_(new ::std::stringstream) {
       55: 1258-block  0
call    0 returned 55
call    1 returned 55
branch  2 taken 55 (fallthrough)
branch  3 taken 0 (throw)
       55: 1258-block  1
call    4 returned 55
    $$$$$: 1258-block  2
call    5 never executed
        -: 1259:  // By default, we want there to be enough precision when printing
        -: 1260:  // a double to a Message.
       55: 1261:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 55
call    1 returned 55
call    2 returned 55
branch  3 taken 55 (fallthrough)
branch  4 taken 0 (throw)
       55: 1262:}
       55: 1262-block  0
    $$$$$: 1262-block  1
call    0 never executed
        -: 1263:
        -: 1264:// These two overloads allow streaming a wide C string to a Message
        -: 1265:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1266:Message& Message::operator<<(const wchar_t* wide_c_str) {
    #####: 1267:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1267-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1267-block  1
call    4 never executed
    %%%%%: 1267-block  2
    $$$$$: 1267-block  3
call    5 never executed
        -: 1268:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1269:Message& Message::operator<<(wchar_t* wide_c_str) {
    #####: 1270:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1270-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1270-block  1
call    4 never executed
    %%%%%: 1270-block  2
    $$$$$: 1270-block  3
call    5 never executed
        -: 1271:}
        -: 1272:
        -: 1273:#if GTEST_HAS_STD_WSTRING
        -: 1274:// Converts the given wide string to a narrow string using the UTF-8
        -: 1275:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1276:Message& Message::operator<<(const ::std::wstring& wstr) {
    #####: 1277:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1277-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1278:  return *this;
        -: 1279:}
        -: 1280:#endif  // GTEST_HAS_STD_WSTRING
        -: 1281:
        -: 1282:// Gets the text streamed to this object so far as an std::string.
        -: 1283:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 55 returned 100% blocks executed 100%
       55: 1284:std::string Message::GetString() const {
       55: 1285:  return internal::StringStreamToString(ss_.get());
       55: 1285-block  0
call    0 returned 55
call    1 returned 55
        -: 1286:}
        -: 1287:
        -: 1288:namespace internal {
        -: 1289:
        -: 1290:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorIySaIyEES6_ called 0 returned 0% blocks executed 0%
    #####: 1291:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
        -: 1292:                                            const std::vector<size_t>& right) {
        -: 1293:  std::vector<std::vector<double> > costs(
    #####: 1294:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1294-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1294-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 1294-block  2
    $$$$$: 1294-block  3
    $$$$$: 1294-block  4
        -: 1295:  std::vector<std::vector<EditType> > best_move(
    #####: 1296:      left.size() + 1, std::vector<EditType>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1296-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 1296-block  1
    $$$$$: 1296-block  2
    $$$$$: 1296-block  3
        -: 1297:
        -: 1298:  // Populate for empty right.
    #####: 1299:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1300:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1300-block  0
call    0 never executed
call    1 never executed
    #####: 1301:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1302:  }
        -: 1303:  // Populate for empty left.
    #####: 1304:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1304-block  0
    %%%%%: 1304-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1305:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1305-block  0
call    0 never executed
call    1 never executed
    #####: 1306:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1307:  }
        -: 1308:
    #####: 1309:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1309-block  0
    %%%%%: 1309-block  1
    %%%%%: 1309-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1310:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1310-block  0
    %%%%%: 1310-block  1
    %%%%%: 1310-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1311:      if (left[l_i] == right[r_i]) {
    %%%%%: 1311-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1312:        // Found a match. Consume it.
    #####: 1313:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1313-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1314:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1315:        continue;
        -: 1316:      }
        -: 1317:
    #####: 1318:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1318-block  0
call    0 never executed
call    1 never executed
    #####: 1319:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1320:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1321:      if (add < remove && add < replace) {
branch  0 never executed
branch  1 never executed
    %%%%%: 1321-block  0
branch  2 never executed
branch  3 never executed
    #####: 1322:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1322-block  0
call    0 never executed
call    1 never executed
    #####: 1323:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1324:      } else if (remove < add && remove < replace) {
    %%%%%: 1324-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1324-block  1
branch  2 never executed
branch  3 never executed
    #####: 1325:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1325-block  0
call    0 never executed
call    1 never executed
    #####: 1326:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1327:      } else {
        -: 1328:        // We make replace a little more expensive than add/remove to lower
        -: 1329:        // their priority.
    #####: 1330:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1330-block  0
call    0 never executed
call    1 never executed
    #####: 1331:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1332:      }
        -: 1333:    }
        -: 1334:  }
        -: 1335:
        -: 1336:  // Reconstruct the best path. We do it in reverse order.
    #####: 1337:  std::vector<EditType> best_path;
    %%%%%: 1337-block  0
call    0 never executed
    #####: 1338:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
call    0 never executed
call    1 never executed
    %%%%%: 1338-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 1338-block  1
branch  4 never executed
branch  5 never executed
    #####: 1339:    EditType move = best_move[l_i][r_i];
    %%%%%: 1339-block  0
call    0 never executed
call    1 never executed
    #####: 1340:    best_path.push_back(move);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1341:    l_i -= move != kAdd;
    #####: 1342:    r_i -= move != kRemove;
    %%%%%: 1342-block  0
        -: 1343:  }
    #####: 1344:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1344-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1345:  return best_path;
    %%%%%: 1345-block  0
    %%%%%: 1345-block  1
    #####: 1346:}
    %%%%%: 1346-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1346-block  1
call    2 never executed
    $$$$$: 1346-block  2
call    3 never executed
    $$$$$: 1346-block  3
call    4 never executed
        -: 1347:
        -: 1348:namespace {
        -: 1349:
        -: 1350:// Helper class to convert string into ids with deduplication.
        -: 1351:class InternalStrings {
        -: 1352: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1353:  size_t GetId(const std::string& str) {
    #####: 1354:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1354-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1355:    if (it != ids_.end()) return it->second;
    %%%%%: 1355-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1355-block  1
call    4 never executed
    #####: 1356:    size_t id = ids_.size();
    %%%%%: 1356-block  0
call    0 never executed
    #####: 1357:    return ids_[str] = id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1357-block  0
        -: 1358:  }
        -: 1359:
        -: 1360: private:
        -: 1361:  typedef std::map<std::string, size_t> IdMap;
        -: 1362:  IdMap ids_;
        -: 1363:};
        -: 1364:
        -: 1365:}  // namespace
        -: 1366:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1367:std::vector<EditType> CalculateOptimalEdits(
        -: 1368:    const std::vector<std::string>& left,
        -: 1369:    const std::vector<std::string>& right) {
    #####: 1370:  std::vector<size_t> left_ids, right_ids;
    %%%%%: 1370-block  0
call    0 never executed
call    1 never executed
        -: 1371:  {
    #####: 1372:    InternalStrings intern_table;
call    0 never executed
    #####: 1373:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1373-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1374:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1374-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1374-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1374-block  2
    $$$$$: 1374-block  3
        -: 1375:    }
    #####: 1376:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1376-block  0
    %%%%%: 1376-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1377:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1377-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1377-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1377-block  2
    $$$$$: 1377-block  3
        -: 1378:    }
    #####: 1379:  }
    %%%%%: 1379-block  0
call    0 never executed
    $$$$$: 1379-block  1
call    1 never executed
    #####: 1380:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1380-block  0
    #####: 1381:}
    %%%%%: 1381-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1381-block  1
call    2 never executed
    $$$$$: 1381-block  2
call    3 never executed
        -: 1382:
        -: 1383:namespace {
        -: 1384:
        -: 1385:// Helper class that holds the state for one hunk and prints it out to the
        -: 1386:// stream.
        -: 1387:// It reorders adds/removes when possible to group all removes before all
        -: 1388:// adds. It also adds the hunk header before printint into the stream.
        -: 1389:class Hunk {
        -: 1390: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Eyy called 0 returned 0% blocks executed 0%
    #####: 1391:  Hunk(size_t left_start, size_t right_start)
    #####: 1392:      : left_start_(left_start),
    #####: 1393:        right_start_(right_start),
    #####: 1394:        adds_(),
    #####: 1395:        removes_(),
    #####: 1396:        common_() {}
    %%%%%: 1396-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1397:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1398:  void PushLine(char edit, const char* line) {
    #####: 1399:    switch (edit) {
    %%%%%: 1399-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1400:      case ' ':
    #####: 1401:        ++common_;
    #####: 1402:        FlushEdits();
    %%%%%: 1402-block  0
call    0 never executed
    #####: 1403:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1403-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1403-block  1
    $$$$$: 1403-block  2
call    6 never executed
    #####: 1404:        break;
    %%%%%: 1404-block  0
    #####: 1405:      case '-':
    #####: 1406:        ++removes_;
    #####: 1407:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1407-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1407-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1407-block  2
    $$$$$: 1407-block  3
call    6 never executed
    #####: 1408:        break;
    %%%%%: 1408-block  0
    #####: 1409:      case '+':
    #####: 1410:        ++adds_;
    #####: 1411:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1411-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1411-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1411-block  2
    #####: 1412:        break;
    %%%%%: 1412-block  0
        -: 1413:    }
    #####: 1414:  }
    %%%%%: 1414-block  0
        -: 1415:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1416:  void PrintTo(std::ostream* os) {
    #####: 1417:    PrintHeader(os);
    %%%%%: 1417-block  0
call    0 never executed
    #####: 1418:    FlushEdits();
call    0 never executed
    #####: 1419:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1420:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1421:         it != hunk_.end(); ++it) {
    %%%%%: 1421-block  0
call    0 never executed
    %%%%%: 1421-block  1
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1422:      *os << it->first << it->second << "\n";
    %%%%%: 1422-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1422-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1422-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1423:    }
    #####: 1424:  }
    %%%%%: 1424-block  0
        -: 1425:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1426:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1426-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1426-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1426-block  2
    %%%%%: 1426-block  3
    %%%%%: 1426-block  4
        -: 1427:
        -: 1428: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1429:  void FlushEdits() {
    #####: 1430:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1430-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1431:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1432:  }
        -: 1433:
        -: 1434:  // Print a unified diff header for one hunk.
        -: 1435:  // The format is
        -: 1436:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1437:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1438:  void PrintHeader(std::ostream* ss) const {
    #####: 1439:    *ss << "@@ ";
    %%%%%: 1439-block  0
call    0 never executed
    #####: 1440:    if (removes_) {
branch  0 never executed
branch  1 never executed
    #####: 1441:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1441-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1442:    }
    #####: 1443:    if (removes_ && adds_) {
    %%%%%: 1443-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1443-block  1
branch  2 never executed
branch  3 never executed
    #####: 1444:      *ss << " ";
    %%%%%: 1444-block  0
call    0 never executed
        -: 1445:    }
    #####: 1446:    if (adds_) {
    %%%%%: 1446-block  0
branch  0 never executed
branch  1 never executed
    #####: 1447:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1447-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1448:    }
    #####: 1449:    *ss << " @@\n";
    %%%%%: 1449-block  0
call    0 never executed
    #####: 1450:  }
        -: 1451:
        -: 1452:  size_t left_start_, right_start_;
        -: 1453:  size_t adds_, removes_, common_;
        -: 1454:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1455:};
        -: 1456:
        -: 1457:}  // namespace
        -: 1458:
        -: 1459:// Create a list of diff hunks in Unified diff format.
        -: 1460:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1461:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1462:// addition.
        -: 1463:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1464:// If two hunks are close enough that their contexts overlap, then they are
        -: 1465:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_y called 0 returned 0% blocks executed 0%
    #####: 1466:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1467:                              const std::vector<std::string>& right,
        -: 1468:                              size_t context) {
    #####: 1469:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1469-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1470:
    #####: 1471:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1472:  std::stringstream ss;
    %%%%%: 1472-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1473:  while (edit_i < edits.size()) {
    %%%%%: 1473-block  0
    %%%%%: 1473-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1474:    // Find first edit.
    #####: 1475:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1475-block  0
    %%%%%: 1475-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1475-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1475-block  3
    %%%%%: 1475-block  4
    %%%%%: 1475-block  5
branch  6 never executed
branch  7 never executed
    #####: 1476:      ++l_i;
    #####: 1477:      ++r_i;
    #####: 1478:      ++edit_i;
    %%%%%: 1478-block  0
        -: 1479:    }
        -: 1480:
        -: 1481:    // Find the first line to include in the hunk.
    #####: 1482:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1482-block  0
call    0 never executed
    #####: 1483:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    #####: 1484:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1484-block  0
    %%%%%: 1484-block  1
branch  0 never executed
branch  1 never executed
    #####: 1485:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1485-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1486:    }
        -: 1487:
        -: 1488:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1489:    // is over.
    #####: 1490:    size_t n_suffix = 0;
    #####: 1491:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1491-block  0
    %%%%%: 1491-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1492:      if (n_suffix >= context) {
    %%%%%: 1492-block  0
branch  0 never executed
branch  1 never executed
        -: 1493:        // Continue only if the next hunk is very close.
    #####: 1494:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1494-block  0
call    0 never executed
call    1 never executed
    #####: 1495:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1495-block  0
call    0 never executed
    %%%%%: 1495-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1495-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1495-block  3
    %%%%%: 1495-block  4
    %%%%%: 1495-block  5
branch  8 never executed
branch  9 never executed
    #####: 1496:        if (it == edits.end() ||
    %%%%%: 1496-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1496-block  1
    %%%%%: 1496-block  2
    #####: 1497:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1497-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1497-block  1
branch  4 never executed
branch  5 never executed
        -: 1498:          // There is no next edit or it is too far away.
    #####: 1499:          break;
    %%%%%: 1499-block  0
        -: 1500:        }
        -: 1501:      }
        -: 1502:
    #####: 1503:      EditType edit = edits[edit_i];
    %%%%%: 1503-block  0
call    0 never executed
        -: 1504:      // Reset count when a non match is found.
    #####: 1505:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed
branch  1 never executed
    %%%%%: 1505-block  0
    %%%%%: 1505-block  1
        -: 1506:
    #####: 1507:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1507-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1507-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1507-block  2
branch  4 never executed
branch  5 never executed
    #####: 1508:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1508-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1508-block  1
    %%%%%: 1508-block  2
    %%%%%: 1508-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1509:      }
    #####: 1510:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1510-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1510-block  1
branch  2 never executed
branch  3 never executed
    #####: 1511:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1511-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1512:      }
        -: 1513:
        -: 1514:      // Advance indices, depending on edit type.
    #####: 1515:      l_i += edit != kAdd;
    #####: 1516:      r_i += edit != kRemove;
    %%%%%: 1516-block  0
        -: 1517:    }
        -: 1518:
    #####: 1519:    if (!hunk.has_edits()) {
    %%%%%: 1519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1520:      // We are done. We don't want this hunk.
    #####: 1521:      break;
    %%%%%: 1521-block  0
        -: 1522:    }
        -: 1523:
    #####: 1524:    hunk.PrintTo(&ss);
    %%%%%: 1524-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1525:  }
    %%%%%: 1525-block  0
    %%%%%: 1525-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1525-block  2
call    3 never executed
    #####: 1526:  return ss.str();
    %%%%%: 1526-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1526-block  1
    #####: 1527:}
    %%%%%: 1527-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1527-block  1
call    2 never executed
    $$$$$: 1527-block  2
call    3 never executed
        -: 1528:
        -: 1529:}  // namespace edit_distance
        -: 1530:
        -: 1531:namespace {
        -: 1532:
        -: 1533:// The string representation of the values received in EqFailure() are already
        -: 1534:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1535:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1536:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1537:  std::vector<std::string> lines;
    %%%%%: 1537-block  0
call    0 never executed
    #####: 1538:  size_t start = 0, end = str.size();
call    0 never executed
    #####: 1539:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed
branch  1 never executed
    %%%%%: 1539-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1539-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1539-block  2
    %%%%%: 1539-block  3
    %%%%%: 1539-block  4
branch  8 never executed
branch  9 never executed
    #####: 1540:    ++start;
    #####: 1541:    --end;
    %%%%%: 1541-block  0
        -: 1542:  }
    #####: 1543:  bool escaped = false;
    #####: 1544:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1544-block  0
    %%%%%: 1544-block  1
    %%%%%: 1544-block  2
branch  0 never executed
branch  1 never executed
    #####: 1545:    if (escaped) {
    %%%%%: 1545-block  0
branch  0 never executed
branch  1 never executed
    #####: 1546:      escaped = false;
    #####: 1547:      if (str[i] == 'n') {
    %%%%%: 1547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1548:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1548-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1548-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1548-block  2
call    6 never executed
    $$$$$: 1548-block  3
call    7 never executed
    $$$$$: 1548-block  4
    #####: 1549:        start = i + 1;
        -: 1550:      }
        -: 1551:    } else {
    #####: 1552:      escaped = str[i] == '\\';
    %%%%%: 1552-block  0
call    0 never executed
        -: 1553:    }
        -: 1554:  }
    #####: 1555:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1555-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1555-block  2
call    6 never executed
    $$$$$: 1555-block  3
call    7 never executed
    $$$$$: 1555-block  4
    #####: 1556:  return lines;
    %%%%%: 1556-block  0
    =====: 1557:}
    $$$$$: 1557-block  0
call    0 never executed
        -: 1558:
        -: 1559:}  // namespace
        -: 1560:
        -: 1561:// Constructs and returns the message for an equality assertion
        -: 1562:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1563://
        -: 1564:// The first four parameters are the expressions used in the assertion
        -: 1565:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1566:// where foo is 5 and bar is 6, we have:
        -: 1567://
        -: 1568://   lhs_expression: "foo"
        -: 1569://   rhs_expression: "bar"
        -: 1570://   lhs_value:      "5"
        -: 1571://   rhs_value:      "6"
        -: 1572://
        -: 1573:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1574:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1575:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1576:AssertionResult EqFailure(const char* lhs_expression,
        -: 1577:                          const char* rhs_expression,
        -: 1578:                          const std::string& lhs_value,
        -: 1579:                          const std::string& rhs_value, bool ignoring_case) {
    #####: 1580:  Message msg;
    %%%%%: 1580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1581:  msg << "Expected equality of these values:";
    %%%%%: 1581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1582:  msg << "\n  " << lhs_expression;
    %%%%%: 1582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1582-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1583:  if (lhs_value != lhs_expression) {
    %%%%%: 1583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1584:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1584-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1585:  }
    #####: 1586:  msg << "\n  " << rhs_expression;
    %%%%%: 1586-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1586-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1587:  if (rhs_value != rhs_expression) {
    %%%%%: 1587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1588:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1588-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1589:  }
        -: 1590:
    #####: 1591:  if (ignoring_case) {
    %%%%%: 1591-block  0
branch  0 never executed
branch  1 never executed
    #####: 1592:    msg << "\nIgnoring case";
    %%%%%: 1592-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1593:  }
        -: 1594:
    #####: 1595:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1595-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1595-block  2
    %%%%%: 1595-block  3
    %%%%%: 1595-block  4
branch  6 never executed
branch  7 never executed
    #####: 1596:    const std::vector<std::string> lhs_lines = SplitEscapedString(lhs_value);
    %%%%%: 1596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1597:    const std::vector<std::string> rhs_lines = SplitEscapedString(rhs_value);
    %%%%%: 1597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1598:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1598-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1598-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1598-block  2
    %%%%%: 1598-block  3
    %%%%%: 1598-block  4
branch  6 never executed
branch  7 never executed
    #####: 1599:      msg << "\nWith diff:\n"
    %%%%%: 1599-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1600:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1600-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1600-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1600-block  2
call    6 never executed
    $$$$$: 1600-block  3
call    7 never executed
    $$$$$: 1600-block  4
        -: 1601:    }
    #####: 1602:  }
    %%%%%: 1602-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1602-block  1
call    2 never executed
    $$$$$: 1602-block  2
call    3 never executed
        -: 1603:
    #####: 1604:  return AssertionFailure() << msg;
    %%%%%: 1604-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1604-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1604-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1604-block  3
call    9 never executed
    %%%%%: 1604-block  4
    $$$$$: 1604-block  5
call   10 never executed
    $$$$$: 1604-block  6
    #####: 1605:}
call    0 never executed
    $$$$$: 1605-block  0
call    1 never executed
        -: 1606:
        -: 1607:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1608:std::string GetBoolAssertionFailureMessage(
        -: 1609:    const AssertionResult& assertion_result, const char* expression_text,
        -: 1610:    const char* actual_predicate_value, const char* expected_predicate_value) {
    #####: 1611:  const char* actual_message = assertion_result.message();
    %%%%%: 1611-block  0
call    0 never executed
    #####: 1612:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1613:  msg << "Value of: " << expression_text
    %%%%%: 1613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1613-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1614:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1614-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1614-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1615:  if (actual_message[0] != '\0') msg << " (" << actual_message << ")";
    %%%%%: 1615-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1615-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1615-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1615-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1616:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1616-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1616-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1617:  return msg.GetString();
    %%%%%: 1617-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1617-block  1
    #####: 1618:}
    %%%%%: 1618-block  0
call    0 never executed
    $$$$$: 1618-block  1
call    1 never executed
        -: 1619:
        -: 1620:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1621:AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,
        -: 1622:                                     const char* abs_error_expr, double val1,
        -: 1623:                                     double val2, double abs_error) {
    #####: 1624:  const double diff = fabs(val1 - val2);
    #####: 1625:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1625-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1625-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1626:
        -: 1627:  // Find the value which is closest to zero.
    #####: 1628:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1628-block  0
call    0 never executed
        -: 1629:  // Find the distance to the next double from that value.
        -: 1630:  const double epsilon =
    #####: 1631:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1632:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1633:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1634:  // message so that the situation can be more easily understood without
        -: 1635:  // requiring exotic floating-point knowledge.
        -: 1636:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1637:  // that an equality check was actually intended.
    #####: 1638:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1638-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1638-block  1
branch  6 never executed
branch  7 never executed
    %%%%%: 1638-block  2
    %%%%%: 1638-block  3
    %%%%%: 1638-block  4
branch  8 never executed
branch  9 never executed
    #####: 1639:      abs_error < epsilon) {
    %%%%%: 1639-block  0
branch  0 never executed
branch  1 never executed
    #####: 1640:    return AssertionFailure()
    %%%%%: 1640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1640-block  1
call    3 never executed
    $$$$$: 1640-block  2
call    4 never executed
    $$$$$: 1640-block  3
    #####: 1641:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1641-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1641-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1641-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1641-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1641-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1642:           << diff << ", where\n"
    %%%%%: 1642-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1642-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1643:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1643-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1643-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1643-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1643-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1644:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1644-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1644-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1644-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1644-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1645:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1645-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1645-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1645-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1646:           << " which is smaller than the minimum distance between doubles for "
    #####: 1647:              "numbers of this magnitude which is "
    %%%%%: 1647-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1648:           << epsilon
    %%%%%: 1648-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1649:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1650:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1650-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1650-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1651:  }
    #####: 1652:  return AssertionFailure()
    %%%%%: 1652-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1652-block  1
call    3 never executed
    $$$$$: 1652-block  2
call    4 never executed
    $$$$$: 1652-block  3
    #####: 1653:         << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1653-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1653-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1653-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1653-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1653-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1654:         << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1654-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1654-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1654-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1654-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1655:         << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1655-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1655-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1655-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1655-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1656:         << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1656-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1656-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1656-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1656-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1657:         << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1657-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1657-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1657-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1657-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1658:}
        -: 1659:
        -: 1660:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1661:template <typename RawType>
    #####: 1662:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1663:                                RawType val1, RawType val2) {
        -: 1664:  // Returns success if val1 is less than val2,
    #####: 1665:  if (val1 < val2) {
    #####: 1666:    return AssertionSuccess();
        -: 1667:  }
        -: 1668:
        -: 1669:  // or if val1 is almost equal to val2.
    #####: 1670:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1671:  if (lhs.AlmostEquals(rhs)) {
    #####: 1672:    return AssertionSuccess();
        -: 1673:  }
        -: 1674:
        -: 1675:  // Note that the above two checks will both fail if either val1 or
        -: 1676:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1677:  // any predicate involving a NaN must return false.
        -: 1678:
    #####: 1679:  ::std::stringstream val1_ss;
    #####: 1680:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1681:          << val1;
        -: 1682:
    #####: 1683:  ::std::stringstream val2_ss;
    #####: 1684:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1685:          << val2;
        -: 1686:
        -: 1687:  return AssertionFailure()
    #####: 1688:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1689:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1690:         << StringStreamToString(&val2_ss);
    #####: 1691:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1662:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1663:                                RawType val1, RawType val2) {
        -: 1664:  // Returns success if val1 is less than val2,
    #####: 1665:  if (val1 < val2) {
    %%%%%: 1665-block  0
branch  0 never executed
branch  1 never executed
    #####: 1666:    return AssertionSuccess();
    %%%%%: 1666-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1667:  }
        -: 1668:
        -: 1669:  // or if val1 is almost equal to val2.
    #####: 1670:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1670-block  0
call    0 never executed
call    1 never executed
    #####: 1671:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1671-block  0
branch  3 never executed
branch  4 never executed
    #####: 1672:    return AssertionSuccess();
    %%%%%: 1672-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1673:  }
        -: 1674:
        -: 1675:  // Note that the above two checks will both fail if either val1 or
        -: 1676:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1677:  // any predicate involving a NaN must return false.
        -: 1678:
    #####: 1679:  ::std::stringstream val1_ss;
    %%%%%: 1679-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1680:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1680-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1681:          << val1;
    %%%%%: 1681-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1682:
    #####: 1683:  ::std::stringstream val2_ss;
    %%%%%: 1683-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1684:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1684-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1685:          << val2;
    %%%%%: 1685-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1686:
        -: 1687:  return AssertionFailure()
    #####: 1688:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1688-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1688-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1688-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1688-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1688-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1688-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1688-block  6
call   18 never executed
    $$$$$: 1688-block  7
    #####: 1689:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1689-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1689-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1689-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1689-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1689-block  4
call   13 never executed
    $$$$$: 1689-block  5
    #####: 1690:         << StringStreamToString(&val2_ss);
    %%%%%: 1690-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1690-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1690-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1690-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1690-block  4
call   11 never executed
    $$$$$: 1690-block  5
    #####: 1691:}
call    0 never executed
call    1 never executed
    $$$$$: 1691-block  0
call    2 never executed
    $$$$$: 1691-block  1
call    3 never executed
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1662:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1663:                                RawType val1, RawType val2) {
        -: 1664:  // Returns success if val1 is less than val2,
    #####: 1665:  if (val1 < val2) {
    %%%%%: 1665-block  0
branch  0 never executed
branch  1 never executed
    #####: 1666:    return AssertionSuccess();
    %%%%%: 1666-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1667:  }
        -: 1668:
        -: 1669:  // or if val1 is almost equal to val2.
    #####: 1670:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1670-block  0
call    0 never executed
call    1 never executed
    #####: 1671:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1671-block  0
branch  3 never executed
branch  4 never executed
    #####: 1672:    return AssertionSuccess();
    %%%%%: 1672-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1673:  }
        -: 1674:
        -: 1675:  // Note that the above two checks will both fail if either val1 or
        -: 1676:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1677:  // any predicate involving a NaN must return false.
        -: 1678:
    #####: 1679:  ::std::stringstream val1_ss;
    %%%%%: 1679-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1680:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1680-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1681:          << val1;
    %%%%%: 1681-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1682:
    #####: 1683:  ::std::stringstream val2_ss;
    %%%%%: 1683-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1684:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1684-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1685:          << val2;
    %%%%%: 1685-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1686:
        -: 1687:  return AssertionFailure()
    #####: 1688:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1688-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1688-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1688-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1688-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1688-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1688-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1688-block  6
call   18 never executed
    $$$$$: 1688-block  7
    #####: 1689:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1689-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1689-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1689-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1689-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1689-block  4
call   13 never executed
    $$$$$: 1689-block  5
    #####: 1690:         << StringStreamToString(&val2_ss);
    %%%%%: 1690-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1690-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1690-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1690-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1690-block  4
call   11 never executed
    $$$$$: 1690-block  5
    #####: 1691:}
call    0 never executed
call    1 never executed
    $$$$$: 1691-block  0
call    2 never executed
    $$$$$: 1691-block  1
call    3 never executed
------------------
        -: 1692:
        -: 1693:}  // namespace internal
        -: 1694:
        -: 1695:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1696:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1697:AssertionResult FloatLE(const char* expr1, const char* expr2, float val1,
        -: 1698:                        float val2) {
    #####: 1699:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1699-block  0
call    0 never executed
        -: 1700:}
        -: 1701:
        -: 1702:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1703:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1704:AssertionResult DoubleLE(const char* expr1, const char* expr2, double val1,
        -: 1705:                         double val2) {
    #####: 1706:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1706-block  0
call    0 never executed
        -: 1707:}
        -: 1708:
        -: 1709:namespace internal {
        -: 1710:
        -: 1711:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1712:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1713:                               const char* rhs_expression, const char* lhs,
        -: 1714:                               const char* rhs) {
    #####: 1715:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1716:    return AssertionSuccess();
    %%%%%: 1716-block  0
call    0 never executed
        -: 1717:  }
        -: 1718:
    #####: 1719:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1719-block  0
call    3 never executed
    $$$$$: 1719-block  1
call    4 never executed
    $$$$$: 1719-block  2
    #####: 1720:                   PrintToString(rhs), false);
    %%%%%: 1720-block  0
call    0 never executed
    %%%%%: 1720-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1720-block  2
call    5 never executed
        -: 1721:}
        -: 1722:
        -: 1723:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1724:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1725:                                   const char* rhs_expression, const char* lhs,
        -: 1726:                                   const char* rhs) {
    #####: 1727:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1727-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1728:    return AssertionSuccess();
    %%%%%: 1728-block  0
call    0 never executed
        -: 1729:  }
        -: 1730:
    #####: 1731:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1731-block  0
call    3 never executed
    $$$$$: 1731-block  1
call    4 never executed
    $$$$$: 1731-block  2
    #####: 1732:                   PrintToString(rhs), true);
    %%%%%: 1732-block  0
call    0 never executed
    %%%%%: 1732-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1732-block  2
call    5 never executed
        -: 1733:}
        -: 1734:
        -: 1735:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1736:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1737:                               const char* s2_expression, const char* s1,
        -: 1738:                               const char* s2) {
    #####: 1739:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1739-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1740:    return AssertionSuccess();
    %%%%%: 1740-block  0
call    0 never executed
        -: 1741:  } else {
    #####: 1742:    return AssertionFailure()
    %%%%%: 1742-block  0
call    0 never executed
    %%%%%: 1742-block  1
call    1 never executed
    $$$$$: 1742-block  2
call    2 never executed
    #####: 1743:           << "Expected: (" << s1_expression << ") != (" << s2_expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1743-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1743-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1743-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1744:           << "), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1744-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1744-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1744-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1744-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1744-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1744-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1745:  }
        -: 1746:}
        -: 1747:
        -: 1748:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1749:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1750:                                   const char* s2_expression, const char* s1,
        -: 1751:                                   const char* s2) {
    #####: 1752:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1752-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1753:    return AssertionSuccess();
    %%%%%: 1753-block  0
call    0 never executed
        -: 1754:  } else {
    #####: 1755:    return AssertionFailure()
    %%%%%: 1755-block  0
call    0 never executed
    %%%%%: 1755-block  1
call    1 never executed
    $$$$$: 1755-block  2
call    2 never executed
    #####: 1756:           << "Expected: (" << s1_expression << ") != (" << s2_expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1756-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1756-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1756-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1757:           << ") (ignoring case), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1757-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1757-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1757-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1757-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1757-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1757-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1758:  }
        -: 1759:}
        -: 1760:
        -: 1761:}  // namespace internal
        -: 1762:
        -: 1763:namespace {
        -: 1764:
        -: 1765:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1766:
        -: 1767:// This group of overloaded functions return true if and only if needle
        -: 1768:// is a substring of haystack.  NULL is considered a substring of
        -: 1769:// itself only.
        -: 1770:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1771:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1772:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1772-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1772-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1772-block  2
        -: 1773:
    #####: 1774:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1774-block  0
        -: 1775:}
        -: 1776:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1777:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1778:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1778-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1778-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1778-block  2
        -: 1779:
    #####: 1780:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1780-block  0
call    0 never executed
        -: 1781:}
        -: 1782:
        -: 1783:// StringType here can be either ::std::string or ::std::wstring.
        -: 1784:template <typename StringType>
    #####: 1785:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1786:  return haystack.find(needle) != StringType::npos;
        -: 1787:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1785:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1786:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1786-block  0
call    0 never executed
        -: 1787:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1785:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1786:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1786-block  0
call    0 never executed
        -: 1787:}
------------------
        -: 1788:
        -: 1789:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1790:// depending on the value of the expected_to_be_substring parameter.
        -: 1791:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1792:// or ::std::wstring.
        -: 1793:template <typename StringType>
    #####: 1794:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1795:                                const char* needle_expr,
        -: 1796:                                const char* haystack_expr,
        -: 1797:                                const StringType& needle,
        -: 1798:                                const StringType& haystack) {
    #####: 1799:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1800:    return AssertionSuccess();
        -: 1801:
    #####: 1802:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1803:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1804:  return AssertionFailure()
    #####: 1805:         << "Value of: " << needle_expr << "\n"
    #####: 1806:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1807:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1808:         << "a substring of " << haystack_expr << "\n"
    #####: 1809:         << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1810:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1794:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1795:                                const char* needle_expr,
        -: 1796:                                const char* haystack_expr,
        -: 1797:                                const StringType& needle,
        -: 1798:                                const StringType& haystack) {
    #####: 1799:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1800:    return AssertionSuccess();
    %%%%%: 1800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1801:
    #####: 1802:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1803:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1804:  return AssertionFailure()
    #####: 1805:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1805-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1805-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1805-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1805-block  4
call   12 never executed
    $$$$$: 1805-block  5
    #####: 1806:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1806-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1806-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1806-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1806-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1807:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1807-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1807-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1807-block  2
    %%%%%: 1807-block  3
    %%%%%: 1807-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1807-block  5
call    8 never executed
    $$$$$: 1807-block  6
    #####: 1808:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1808-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1808-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1809:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1809-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1809-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1809-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1809-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1810:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1794:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1795:                                const char* needle_expr,
        -: 1796:                                const char* haystack_expr,
        -: 1797:                                const StringType& needle,
        -: 1798:                                const StringType& haystack) {
    #####: 1799:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1800:    return AssertionSuccess();
    %%%%%: 1800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1801:
    #####: 1802:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1803:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1804:  return AssertionFailure()
    #####: 1805:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1805-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1805-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1805-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1805-block  4
call   12 never executed
    $$$$$: 1805-block  5
    #####: 1806:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1806-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1806-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1806-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1806-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1807:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1807-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1807-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1807-block  2
    %%%%%: 1807-block  3
    %%%%%: 1807-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1807-block  5
call    8 never executed
    $$$$$: 1807-block  6
    #####: 1808:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1808-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1808-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1809:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1809-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1809-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1809-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1809-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1810:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1794:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1795:                                const char* needle_expr,
        -: 1796:                                const char* haystack_expr,
        -: 1797:                                const StringType& needle,
        -: 1798:                                const StringType& haystack) {
    #####: 1799:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1800:    return AssertionSuccess();
    %%%%%: 1800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1801:
    #####: 1802:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1803:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1804:  return AssertionFailure()
    #####: 1805:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1805-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1805-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1805-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1805-block  4
call   12 never executed
    $$$$$: 1805-block  5
    #####: 1806:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1806-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1806-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1806-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1806-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1807:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1807-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1807-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1807-block  2
    %%%%%: 1807-block  3
    %%%%%: 1807-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1807-block  5
call    8 never executed
    $$$$$: 1807-block  6
    #####: 1808:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1808-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1808-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1809:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1809-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1809-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1809-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1809-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1810:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1794:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1795:                                const char* needle_expr,
        -: 1796:                                const char* haystack_expr,
        -: 1797:                                const StringType& needle,
        -: 1798:                                const StringType& haystack) {
    #####: 1799:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1800:    return AssertionSuccess();
    %%%%%: 1800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1801:
    #####: 1802:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1803:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1804:  return AssertionFailure()
    #####: 1805:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1805-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1805-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1805-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1805-block  4
call   12 never executed
    $$$$$: 1805-block  5
    #####: 1806:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1806-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1806-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1806-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1806-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1807:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1807-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1807-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1807-block  2
    %%%%%: 1807-block  3
    %%%%%: 1807-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1807-block  5
call    8 never executed
    $$$$$: 1807-block  6
    #####: 1808:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1808-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1808-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1809:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1809-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1809-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1809-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1809-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1810:}
------------------
        -: 1811:
        -: 1812:}  // namespace
        -: 1813:
        -: 1814:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1815:// substring of haystack (NULL is considered a substring of itself
        -: 1816:// only), and return an appropriate error message when they fail.
        -: 1817:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1818:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1819:                            const char* needle, const char* haystack) {
    #####: 1820:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1820-block  0
call    0 never executed
        -: 1821:}
        -: 1822:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1823:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1824:                            const wchar_t* needle, const wchar_t* haystack) {
    #####: 1825:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1825-block  0
call    0 never executed
        -: 1826:}
        -: 1827:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1828:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1829:                               const char* haystack_expr, const char* needle,
        -: 1830:                               const char* haystack) {
    #####: 1831:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1831-block  0
call    0 never executed
        -: 1832:}
        -: 1833:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1834:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1835:                               const char* haystack_expr, const wchar_t* needle,
        -: 1836:                               const wchar_t* haystack) {
    #####: 1837:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1837-block  0
call    0 never executed
        -: 1838:}
        -: 1839:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1840:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1841:                            const ::std::string& needle,
        -: 1842:                            const ::std::string& haystack) {
    #####: 1843:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1843-block  0
call    0 never executed
        -: 1844:}
        -: 1845:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1846:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1847:                               const char* haystack_expr,
        -: 1848:                               const ::std::string& needle,
        -: 1849:                               const ::std::string& haystack) {
    #####: 1850:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1850-block  0
call    0 never executed
        -: 1851:}
        -: 1852:
        -: 1853:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1854:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1855:                            const ::std::wstring& needle,
        -: 1856:                            const ::std::wstring& haystack) {
    #####: 1857:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1857-block  0
call    0 never executed
        -: 1858:}
        -: 1859:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1860:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1861:                               const char* haystack_expr,
        -: 1862:                               const ::std::wstring& needle,
        -: 1863:                               const ::std::wstring& haystack) {
    #####: 1864:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1864-block  0
call    0 never executed
        -: 1865:}
        -: 1866:#endif  // GTEST_HAS_STD_WSTRING
        -: 1867:
        -: 1868:namespace internal {
        -: 1869:
        -: 1870:#ifdef GTEST_OS_WINDOWS
        -: 1871:
        -: 1872:namespace {
        -: 1873:
        -: 1874:// Helper function for IsHRESULT{SuccessFailure} predicates
function _ZN7testing8internal12_GLOBAL__N_120HRESULTFailureHelperEPKcS3_l called 0 returned 0% blocks executed 0%
    #####: 1875:AssertionResult HRESULTFailureHelper(const char* expr, const char* expected,
        -: 1876:                                     long hr) {  // NOLINT
        -: 1877:#if defined(GTEST_OS_WINDOWS_MOBILE) || defined(GTEST_OS_WINDOWS_TV_TITLE)
        -: 1878:
        -: 1879:  // Windows CE doesn't support FormatMessage.
        -: 1880:  const char error_text[] = "";
        -: 1881:
        -: 1882:#else
        -: 1883:
        -: 1884:  // Looks up the human-readable system message for the HRESULT code
        -: 1885:  // and since we're not passing any params to FormatMessage, we don't
        -: 1886:  // want inserts expanded.
    #####: 1887:  const DWORD kFlags =
        -: 1888:      FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
    #####: 1889:  const DWORD kBufSize = 4096;
        -: 1890:  // Gets the system's human readable message string for this HRESULT.
    #####: 1891:  char error_text[kBufSize] = {'\0'};
    #####: 1892:  DWORD message_length = ::FormatMessageA(kFlags,
    %%%%%: 1892-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1893:                                          0,  // no source, we're asking system
        -: 1894:                                          static_cast<DWORD>(hr),  // the error
        -: 1895:                                          0,  // no line width restrictions
        -: 1896:                                          error_text,  // output buffer
        -: 1897:                                          kBufSize,    // buf size
        -: 1898:                                          nullptr);  // no arguments for inserts
        -: 1899:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
    #####: 1900:  for (; message_length && IsSpace(error_text[message_length - 1]);
    %%%%%: 1900-block  0
    %%%%%: 1900-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1900-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1900-block  3
    %%%%%: 1900-block  4
    %%%%%: 1900-block  5
branch  5 never executed
branch  6 never executed
        -: 1901:       --message_length) {
    #####: 1902:    error_text[message_length - 1] = '\0';
    %%%%%: 1902-block  0
        -: 1903:  }
        -: 1904:
        -: 1905:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1906:
    #####: 1907:  const std::string error_hex("0x" + String::FormatHexInt(hr));
    %%%%%: 1907-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1907-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1907-block  2
    #####: 1908:  return ::testing::AssertionFailure()
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1908-block  0
call    3 never executed
    $$$$$: 1908-block  1
call    4 never executed
    $$$$$: 1908-block  2
    #####: 1909:         << "Expected: " << expr << " " << expected << ".\n"
    %%%%%: 1909-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1909-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1909-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1909-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1909-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1910:         << "  Actual: " << error_hex << " " << error_text << "\n";
    %%%%%: 1910-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1910-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1910-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1910-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1910-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1910-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 1910-block  6
    #####: 1911:}
call    0 never executed
    $$$$$: 1911-block  0
call    1 never executed
        -: 1912:
        -: 1913:}  // namespace
        -: 1914:
function _ZN7testing8internal16IsHRESULTSuccessEPKcl called 0 returned 0% blocks executed 0%
    #####: 1915:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
    #####: 1916:  if (SUCCEEDED(hr)) {
    %%%%%: 1916-block  0
branch  0 never executed
branch  1 never executed
    #####: 1917:    return AssertionSuccess();
    %%%%%: 1917-block  0
call    0 never executed
        -: 1918:  }
    #####: 1919:  return HRESULTFailureHelper(expr, "succeeds", hr);
    %%%%%: 1919-block  0
call    0 never executed
        -: 1920:}
        -: 1921:
function _ZN7testing8internal16IsHRESULTFailureEPKcl called 0 returned 0% blocks executed 0%
    #####: 1922:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
    #####: 1923:  if (FAILED(hr)) {
    %%%%%: 1923-block  0
branch  0 never executed
branch  1 never executed
    #####: 1924:    return AssertionSuccess();
    %%%%%: 1924-block  0
call    0 never executed
        -: 1925:  }
    #####: 1926:  return HRESULTFailureHelper(expr, "fails", hr);
    %%%%%: 1926-block  0
call    0 never executed
        -: 1927:}
        -: 1928:
        -: 1929:#endif  // GTEST_OS_WINDOWS
        -: 1930:
        -: 1931:// Utility functions for encoding Unicode text (wide strings) in
        -: 1932:// UTF-8.
        -: 1933:
        -: 1934:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1935:// like this:
        -: 1936://
        -: 1937:// Code-point length   Encoding
        -: 1938://   0 -  7 bits       0xxxxxxx
        -: 1939://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1940://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1941://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1942:
        -: 1943:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1944:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) << 7) - 1;
        -: 1945:
        -: 1946:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1947:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 1948:
        -: 1949:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1950:constexpr uint32_t kMaxCodePoint3 =
        -: 1951:    (static_cast<uint32_t>(1) << (4 + 2 * 6)) - 1;
        -: 1952:
        -: 1953:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1954:constexpr uint32_t kMaxCodePoint4 =
        -: 1955:    (static_cast<uint32_t>(1) << (3 + 3 * 6)) - 1;
        -: 1956:
        -: 1957:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1958:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1959:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 1960:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 1961:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 1962:  *bits >>= n;
    #####: 1963:  return low_bits;
    %%%%%: 1963-block  0
        -: 1964:}
        -: 1965:
        -: 1966:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 1967:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 1968:// wide enough to contain a code point.
        -: 1969:// If the code_point is not a valid Unicode code point
        -: 1970:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 1971:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 1972:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 1973:  if (code_point > kMaxCodePoint4) {
    %%%%%: 1973-block  0
branch  0 never executed
branch  1 never executed
    #####: 1974:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 1974-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1974-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1974-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1974-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1974-block  4
call   11 never executed
    $$$$$: 1974-block  5
    $$$$$: 1974-block  6
call   12 never executed
    $$$$$: 1974-block  7
        -: 1975:  }
        -: 1976:
        -: 1977:  char str[5];  // Big enough for the largest valid code point.
    #####: 1978:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 1978-block  0
branch  0 never executed
branch  1 never executed
    #####: 1979:    str[1] = '\0';
    #####: 1980:    str[0] = static_cast<char>(code_point);  // 0xxxxxxx
    %%%%%: 1980-block  0
    #####: 1981:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 1981-block  0
branch  0 never executed
branch  1 never executed
    #####: 1982:    str[2] = '\0';
    #####: 1983:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1983-block  0
call    0 never executed
    #####: 1984:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 1985:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 1985-block  0
branch  0 never executed
branch  1 never executed
    #####: 1986:    str[3] = '\0';
    #####: 1987:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1987-block  0
call    0 never executed
    #####: 1988:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1989:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 1990:  } else {  // code_point <= kMaxCodePoint4
    #####: 1991:    str[4] = '\0';
    #####: 1992:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1992-block  0
call    0 never executed
    #####: 1993:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1994:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1995:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 1996:  }
    #####: 1997:  return str;
    %%%%%: 1997-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1997-block  1
call    4 never executed
    $$$$$: 1997-block  2
call    5 never executed
    $$$$$: 1997-block  3
        -: 1998:}
        -: 1999:
        -: 2000:// The following two functions only make sense if the system
        -: 2001:// uses UTF-16 for wide string encoding. All supported systems
        -: 2002:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 2003:
        -: 2004:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 2005:// and thus should be combined into a single Unicode code point
        -: 2006:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 2007:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
    #####: 2008:  return sizeof(wchar_t) == 2 && (first & 0xFC00) == 0xD800 &&
    %%%%%: 2008-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2008-block  1
    %%%%%: 2008-block  2
    #####: 2009:         (second & 0xFC00) == 0xDC00;
    %%%%%: 2009-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2009-block  1
        -: 2010:}
        -: 2011:
        -: 2012:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 2013:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 2014:                                                      wchar_t second) {
    #####: 2015:  const auto first_u = static_cast<uint32_t>(first);
    #####: 2016:  const auto second_u = static_cast<uint32_t>(second);
    #####: 2017:  const uint32_t mask = (1 << 10) - 1;
        -: 2018:  return (sizeof(wchar_t) == 2)
    #####: 2019:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 2020:             :
        -: 2021:             // This function should not be called when the condition is
        -: 2022:             // false, but we provide a sensible default in case it is.
    #####: 2023:             first_u;
    %%%%%: 2023-block  0
        -: 2024:}
        -: 2025:
        -: 2026:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 2027:// The wide string is assumed to have the following encoding:
        -: 2028://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 2029://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 2030:// Parameter str points to a null-terminated wide string.
        -: 2031:// Parameter num_chars may additionally limit the number
        -: 2032:// of wchar_t characters processed. -1 is used when the entire string
        -: 2033:// should be processed.
        -: 2034:// If the string contains code points that are not valid Unicode code points
        -: 2035:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 2036:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 2037:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 2038:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 2039:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 2040:  if (num_chars == -1) num_chars = static_cast<int>(wcslen(str));
    %%%%%: 2040-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2040-block  1
call    2 never executed
        -: 2041:
    #####: 2042:  ::std::stringstream stream;
    %%%%%: 2042-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2043:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2043-block  0
    %%%%%: 2043-block  1
branch  0 never executed
branch  1 never executed
        -: 2044:    uint32_t unicode_code_point;
        -: 2045:
    #####: 2046:    if (str[i] == L'\0') {
    %%%%%: 2046-block  0
branch  0 never executed
branch  1 never executed
    #####: 2047:      break;
    %%%%%: 2047-block  0
    #####: 2048:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2048-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2048-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2048-block  2
    %%%%%: 2048-block  3
    %%%%%: 2048-block  4
branch  5 never executed
branch  6 never executed
        -: 2049:      unicode_code_point =
    #####: 2050:          CreateCodePointFromUtf16SurrogatePair(str[i], str[i + 1]);
    %%%%%: 2050-block  0
call    0 never executed
    #####: 2051:      i++;
        -: 2052:    } else {
    #####: 2053:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2053-block  0
        -: 2054:    }
        -: 2055:
    #####: 2056:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2056-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2056-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2056-block  2
call    6 never executed
    $$$$$: 2056-block  3
call    7 never executed
    $$$$$: 2056-block  4
        -: 2057:  }
    #####: 2058:  return StringStreamToString(&stream);
    %%%%%: 2058-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2058-block  1
    #####: 2059:}
    %%%%%: 2059-block  0
call    0 never executed
    $$$$$: 2059-block  1
call    1 never executed
        -: 2060:
        -: 2061:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2062:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2063:std::string String::ShowWideCString(const wchar_t* wide_c_str) {
    #####: 2064:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2064-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2064-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2064-block  2
call    6 never executed
    $$$$$: 2064-block  3
call    7 never executed
        -: 2065:
    #####: 2066:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2066-block  0
call    0 never executed
        -: 2067:}
        -: 2068:
        -: 2069:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2070:// same content.
        -: 2071://
        -: 2072:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2073:// C string is considered different to any non-NULL C string,
        -: 2074:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2075:bool String::WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs) {
    #####: 2076:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2076-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2076-block  1
        -: 2077:
    #####: 2078:  if (rhs == nullptr) return false;
    %%%%%: 2078-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2078-block  1
        -: 2079:
    #####: 2080:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2080-block  0
call    0 never executed
        -: 2081:}
        -: 2082:
        -: 2083:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2084:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2085:                               const char* rhs_expression, const wchar_t* lhs,
        -: 2086:                               const wchar_t* rhs) {
    #####: 2087:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2087-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2088:    return AssertionSuccess();
    %%%%%: 2088-block  0
call    0 never executed
        -: 2089:  }
        -: 2090:
    #####: 2091:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2091-block  0
call    3 never executed
    $$$$$: 2091-block  1
call    4 never executed
    $$$$$: 2091-block  2
    #####: 2092:                   PrintToString(rhs), false);
    %%%%%: 2092-block  0
call    0 never executed
    %%%%%: 2092-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 2092-block  2
call    5 never executed
        -: 2093:}
        -: 2094:
        -: 2095:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2096:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2097:                               const char* s2_expression, const wchar_t* s1,
        -: 2098:                               const wchar_t* s2) {
    #####: 2099:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2099-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2100:    return AssertionSuccess();
    %%%%%: 2100-block  0
call    0 never executed
        -: 2101:  }
        -: 2102:
    #####: 2103:  return AssertionFailure()
    %%%%%: 2103-block  0
call    0 never executed
    $$$$$: 2103-block  1
call    1 never executed
    #####: 2104:         << "Expected: (" << s1_expression << ") != (" << s2_expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2104-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2104-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2104-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2105:         << "), actual: " << PrintToString(s1) << " vs " << PrintToString(s2);
    %%%%%: 2105-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2105-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2105-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2105-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2105-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 2105-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 2105-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 2105-block  7
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 2105-block  8
call   24 never executed
    $$$$$: 2105-block  9
    $$$$$: 2105-block 10
call   25 never executed
    $$$$$: 2105-block 11
        -: 2106:}
        -: 2107:
        -: 2108:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2109:// the same content.
        -: 2110://
        -: 2111:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2112:// NULL C string is considered different to any non-NULL C string,
        -: 2113:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 2114:bool String::CaseInsensitiveCStringEquals(const char* lhs, const char* rhs) {
       4*: 2115:  if (lhs == nullptr) return rhs == nullptr;
        4: 2115-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2115-block  1
       4*: 2116:  if (rhs == nullptr) return false;
        4: 2116-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2116-block  1
        4: 2117:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 2117-block  0
call    0 returned 4
        -: 2118:}
        -: 2119:
        -: 2120:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2121:// have the same content.
        -: 2122://
        -: 2123:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2124:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2125:// including the empty string.
        -: 2126:// NB: The implementations on different platforms slightly differ.
        -: 2127:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2128:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2129:// which compares according to LC_CTYPE category of the current locale.
        -: 2130:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2131:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2132:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2133:                                              const wchar_t* rhs) {
    #####: 2134:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2134-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2134-block  1
        -: 2135:
    #####: 2136:  if (rhs == nullptr) return false;
    %%%%%: 2136-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2136-block  1
        -: 2137:
        -: 2138:#ifdef GTEST_OS_WINDOWS
    #####: 2139:  return _wcsicmp(lhs, rhs) == 0;
    %%%%%: 2139-block  0
call    0 never executed
        -: 2140:#elif defined(GTEST_OS_LINUX) && !defined(GTEST_OS_LINUX_ANDROID)
        -: 2141:  return wcscasecmp(lhs, rhs) == 0;
        -: 2142:#else
        -: 2143:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2144:  // Other unknown OSes may not define it either.
        -: 2145:  wint_t left, right;
        -: 2146:  do {
        -: 2147:    left = towlower(static_cast<wint_t>(*lhs++));
        -: 2148:    right = towlower(static_cast<wint_t>(*rhs++));
        -: 2149:  } while (left && left == right);
        -: 2150:  return left == right;
        -: 2151:#endif  // OS selector
        -: 2152:}
        -: 2153:
        -: 2154:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2155:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2156:bool String::EndsWithCaseInsensitive(const std::string& str,
        -: 2157:                                     const std::string& suffix) {
    #####: 2158:  const size_t str_len = str.length();
    %%%%%: 2158-block  0
call    0 never executed
    #####: 2159:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 2160:  return (str_len >= suffix_len) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 2160-block  0
    %%%%%: 2160-block  1
    #####: 2161:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2161-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2162:                                      suffix.c_str());
    %%%%%: 2162-block  0
        -: 2163:}
        -: 2164:
        -: 2165:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2166:std::string String::FormatIntWidth2(int value) {
    #####: 2167:  return FormatIntWidthN(value, 2);
    %%%%%: 2167-block  0
call    0 never executed
        -: 2168:}
        -: 2169:
        -: 2170:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2171:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2172:  std::stringstream ss;
    %%%%%: 2172-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2173:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2173-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2173-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2173-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2174:  return ss.str();
    %%%%%: 2174-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2174-block  1
    #####: 2175:}
    %%%%%: 2175-block  0
call    0 never executed
    $$$$$: 2175-block  1
call    1 never executed
        -: 2176:
        -: 2177:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2178:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2179:  std::stringstream ss;
    %%%%%: 2179-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2180:  ss << std::hex << std::uppercase << value;
    %%%%%: 2180-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2180-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2180-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2181:  return ss.str();
    %%%%%: 2181-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2181-block  1
    #####: 2182:}
    %%%%%: 2182-block  0
call    0 never executed
    $$$$$: 2182-block  1
call    1 never executed
        -: 2183:
        -: 2184:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2185:std::string String::FormatHexInt(int value) {
    #####: 2186:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2186-block  0
call    0 never executed
        -: 2187:}
        -: 2188:
        -: 2189:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2190:std::string String::FormatByte(unsigned char value) {
    #####: 2191:  std::stringstream ss;
    %%%%%: 2191-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2192:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2192-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2192-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2192-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2192-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2193:     << static_cast<unsigned int>(value);
    %%%%%: 2193-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2194:  return ss.str();
    %%%%%: 2194-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2194-block  1
    #####: 2195:}
    %%%%%: 2195-block  0
call    0 never executed
    $$$$$: 2195-block  1
call    1 never executed
        -: 2196:
        -: 2197:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2198:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 55 returned 100% blocks executed 75%
       55: 2199:std::string StringStreamToString(::std::stringstream* ss) {
       55: 2200:  const ::std::string& str = ss->str();
       55: 2200-block  0
call    0 returned 55
branch  1 taken 55 (fallthrough)
branch  2 taken 0 (throw)
       55: 2201:  const char* const start = str.c_str();
       55: 2201-block  0
call    0 returned 55
       55: 2202:  const char* const end = start + str.length();
call    0 returned 55
        -: 2203:
       55: 2204:  std::string result;
call    0 returned 55
       55: 2205:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 55
branch  1 taken 55 (fallthrough)
branch  2 taken 0 (throw)
     1016: 2206:  for (const char* ch = start; ch != end; ++ch) {
       55: 2206-block  0
      961: 2206-block  1
     1016: 2206-block  2
branch  0 taken 961
branch  1 taken 55 (fallthrough)
      961: 2207:    if (*ch == '\0') {
      961: 2207-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 961
    #####: 2208:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2208-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2209:    } else {
      961: 2210:      result += *ch;
      961: 2210-block  0
call    0 returned 961
branch  1 taken 961 (fallthrough)
branch  2 taken 0 (throw)
        -: 2211:    }
        -: 2212:  }
        -: 2213:
      110: 2214:  return result;
       55: 2214-block  0
       55: 2214-block  1
       55: 2215:}
       55: 2215-block  0
call    0 returned 55
    $$$$$: 2215-block  1
call    1 never executed
    $$$$$: 2215-block  2
call    2 never executed
        -: 2216:
        -: 2217:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2218:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2219:                              const Message& user_msg) {
        -: 2220:  // Appends the user message if it's non-empty.
    #####: 2221:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2221-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2222:  if (user_msg_string.empty()) {
    %%%%%: 2222-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2223:    return gtest_msg;
    %%%%%: 2223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2224:  }
    #####: 2225:  if (gtest_msg.empty()) {
    %%%%%: 2225-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2226:    return user_msg_string;
    %%%%%: 2226-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2227:  }
    #####: 2228:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2228-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2228-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2228-block  2
call    6 never executed
    $$$$$: 2228-block  3
call    7 never executed
    $$$$$: 2228-block  4
    #####: 2229:}
    %%%%%: 2229-block  0
call    0 never executed
    $$$$$: 2229-block  1
call    1 never executed
        -: 2230:
        -: 2231:}  // namespace internal
        -: 2232:
        -: 2233:// class TestResult
        -: 2234:
        -: 2235:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 14 returned 100% blocks executed 100%
       14: 2236:TestResult::TestResult()
       14: 2237:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
       14: 2237-block  0
call    0 returned 14
call    1 returned 14
call    2 returned 14
        -: 2238:
        -: 2239:// D'tor.
function _ZN7testing10TestResultD2Ev called 0 returned 0% blocks executed 0%
    #####: 2240:TestResult::~TestResult() {}
    %%%%%: 2240-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2241:
        -: 2242:// Returns the i-th test part result among all the results. i can
        -: 2243:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2244:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2245:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2246:  if (i < 0 || i >= total_part_count()) internal::posix::Abort();
    %%%%%: 2246-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2246-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2246-block  2
    %%%%%: 2246-block  3
    %%%%%: 2246-block  4
branch  5 never executed
branch  6 never executed
    %%%%%: 2246-block  5
call    7 never executed
    #####: 2247:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2247-block  0
call    0 never executed
        -: 2248:}
        -: 2249:
        -: 2250:// Returns the i-th test property. i can range from 0 to
        -: 2251:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2252:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2253:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2254:  if (i < 0 || i >= test_property_count()) internal::posix::Abort();
    %%%%%: 2254-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2254-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2254-block  2
    %%%%%: 2254-block  3
    %%%%%: 2254-block  4
branch  5 never executed
branch  6 never executed
    %%%%%: 2254-block  5
call    7 never executed
    #####: 2255:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2255-block  0
call    0 never executed
        -: 2256:}
        -: 2257:
        -: 2258:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2259:void TestResult::ClearTestPartResults() { test_part_results_.clear(); }
    %%%%%: 2259-block  0
call    0 never executed
        -: 2260:
        -: 2261:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2262:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2263:  test_part_results_.push_back(test_part_result);
    %%%%%: 2263-block  0
call    0 never executed
    #####: 2264:}
        -: 2265:
        -: 2266:// Adds a test property to the list. If a property with the same key as the
        -: 2267:// supplied property is already represented, the value of this test_property
        -: 2268:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2269:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2270:                                const TestProperty& test_property) {
    #####: 2271:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2271-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2271-block  1
branch  3 never executed
branch  4 never executed
    #####: 2272:    return;
    %%%%%: 2272-block  0
    %%%%%: 2272-block  1
        -: 2273:  }
    #####: 2274:  internal::MutexLock lock(&test_properties_mutex_);
    %%%%%: 2274-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2275:  const std::vector<TestProperty>::iterator property_with_matching_key =
    #####: 2276:      std::find_if(test_properties_.begin(), test_properties_.end(),
    %%%%%: 2276-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2277:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2277-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2277-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2277-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2277-block  3
call   11 never executed
    $$$$$: 2277-block  4
    $$$$$: 2277-block  5
call   12 never executed
    $$$$$: 2277-block  6
    $$$$$: 2277-block  7
call   13 never executed
    $$$$$: 2277-block  8
    #####: 2278:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2279:    test_properties_.push_back(test_property);
    %%%%%: 2279-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2280:    return;
    %%%%%: 2280-block  0
        -: 2281:  }
    #####: 2282:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2282-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2282-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2282-block  2
call    9 never executed
call   10 never executed
    $$$$$: 2282-block  3
call   11 never executed
    $$$$$: 2282-block  4
    $$$$$: 2282-block  5
call   12 never executed
    $$$$$: 2282-block  6
    #####: 2283:}
    %%%%%: 2283-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2283-block  1
call    3 never executed
        -: 2284:
        -: 2285:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2286:// output.
        -: 2287:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2288:    "disabled",    "errors", "failures", "name",
        -: 2289:    "random_seed", "test",  "time",     "timestamp"};
        -: 2290:
        -: 2291:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2292:// output.
        -: 2293:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2294:    "disabled", "errors", "failures",  "name",
        -: 2295:    "test",    "time",   "timestamp", "skipped"};
        -: 2296:
        -: 2297:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2298:static const char* const kReservedTestCaseAttributes[] = {
        -: 2299:    "classname",  "name",        "status", "time",
        -: 2300:    "type_param", "value_param", "file",   "line"};
        -: 2301:
        -: 2302:// Use a slightly different set for allowed output to ensure existing test can
        -: 2303:// still RecordProperty("result") or "RecordProperty(timestamp")
        -: 2304:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2305:    "classname",   "name", "status", "time",   "type_param",
        -: 2306:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2307:
        -: 2308:template <size_t kSize>
    #####: 2309:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2310:  return std::vector<std::string>(array, array + kSize);
        -: 2311:}
------------------
_ZN7testing13ArrayAsVectorILy10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILy10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2309:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2310:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2310-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2310-block  1
call    4 never executed
    %%%%%: 2310-block  2
    $$$$$: 2310-block  3
call    5 never executed
        -: 2311:}
------------------
_ZN7testing13ArrayAsVectorILy8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILy8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2309:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2310:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2310-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2310-block  1
call    4 never executed
    %%%%%: 2310-block  2
    $$$$$: 2310-block  3
call    5 never executed
        -: 2311:}
------------------
        -: 2312:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2313:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2314:    const std::string& xml_element) {
    #####: 2315:  if (xml_element == "testsuites") {
    %%%%%: 2315-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2316:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2316-block  0
call    0 never executed
    #####: 2317:  } else if (xml_element == "testsuite") {
    %%%%%: 2317-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2318:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2318-block  0
call    0 never executed
    #####: 2319:  } else if (xml_element == "testcase") {
    %%%%%: 2319-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2320:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2320-block  0
call    0 never executed
        -: 2321:  } else {
    #####: 2322:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2322-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2322-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2322-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2322-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2322-block  4
call   14 never executed
    $$$$$: 2322-block  5
call   15 never executed
        -: 2323:  }
        -: 2324:  // This code is unreachable but some compilers may not realizes that.
    #####: 2325:  return std::vector<std::string>();
    %%%%%: 2325-block  0
call    0 never executed
        -: 2326:}
        -: 2327:
        -: 2328:#if GTEST_HAS_FILE_SYSTEM
        -: 2329:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
        -: 2330:// This function is only used when file systems are enabled.
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2331:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2332:    const std::string& xml_element) {
    #####: 2333:  if (xml_element == "testsuites") {
    %%%%%: 2333-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2334:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2334-block  0
call    0 never executed
    #####: 2335:  } else if (xml_element == "testsuite") {
    %%%%%: 2335-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2336:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2336-block  0
call    0 never executed
    #####: 2337:  } else if (xml_element == "testcase") {
    %%%%%: 2337-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2338:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2338-block  0
call    0 never executed
        -: 2339:  } else {
    #####: 2340:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2340-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2340-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2340-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2340-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2340-block  4
call   14 never executed
    $$$$$: 2340-block  5
call   15 never executed
        -: 2341:  }
        -: 2342:  // This code is unreachable but some compilers may not realizes that.
    #####: 2343:  return std::vector<std::string>();
    %%%%%: 2343-block  0
call    0 never executed
        -: 2344:}
        -: 2345:#endif
        -: 2346:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2347:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2348:  Message word_list;
    %%%%%: 2348-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2349:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2349-block  0
    %%%%%: 2349-block  1
    %%%%%: 2349-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2350:    if (i > 0 && words.size() > 2) {
    %%%%%: 2350-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2350-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2350-block  2
    %%%%%: 2350-block  3
    %%%%%: 2350-block  4
branch  5 never executed
branch  6 never executed
    #####: 2351:      word_list << ", ";
    %%%%%: 2351-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2352:    }
    #####: 2353:    if (i == words.size() - 1) {
    %%%%%: 2353-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2354:      word_list << "and ";
    %%%%%: 2354-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2355:    }
    #####: 2356:    word_list << "'" << words[i] << "'";
    %%%%%: 2356-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2356-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2356-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 2357:  }
    #####: 2358:  return word_list.GetString();
    %%%%%: 2358-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2358-block  1
    #####: 2359:}
    %%%%%: 2359-block  0
call    0 never executed
    $$$$$: 2359-block  1
call    1 never executed
        -: 2360:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2361:static bool ValidateTestPropertyName(
        -: 2362:    const std::string& property_name,
        -: 2363:    const std::vector<std::string>& reserved_names) {
    #####: 2364:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2364-block  0
call    5 never executed
    #####: 2365:      reserved_names.end()) {
    %%%%%: 2365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2365-block  1
call    3 never executed
    #####: 2366:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2366-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2366-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2366-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2366-block  3
call   10 never executed
    $$$$$: 2366-block  4
call   11 never executed
    $$$$$: 2366-block  5
    $$$$$: 2366-block  6
call   12 never executed
    #####: 2367:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2367-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2367-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2367-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2367-block  3
call   11 never executed
    $$$$$: 2367-block  4
    #####: 2368:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2368-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2368-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2368-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2368-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2369:    return false;
        -: 2370:  }
    #####: 2371:  return true;
    %%%%%: 2371-block  0
        -: 2372:}
        -: 2373:
        -: 2374:// Adds a failure if the key is a reserved attribute of the element named
        -: 2375:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2376:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2377:                                      const TestProperty& test_property) {
    #####: 2378:  return ValidateTestPropertyName(test_property.key(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2378-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2378-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2378-block  2
call   10 never executed
    $$$$$: 2378-block  3
    $$$$$: 2378-block  4
call   11 never executed
    $$$$$: 2378-block  5
    #####: 2379:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2379-block  0
call    0 never executed
    %%%%%: 2379-block  1
call    1 never executed
    %%%%%: 2379-block  2
    $$$$$: 2379-block  3
call    2 never executed
        -: 2380:}
        -: 2381:
        -: 2382:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 13 returned 100% blocks executed 100%
       13: 2383:void TestResult::Clear() {
       13: 2384:  test_part_results_.clear();
       13: 2384-block  0
call    0 returned 13
       13: 2385:  test_properties_.clear();
call    0 returned 13
       13: 2386:  death_test_count_ = 0;
       13: 2387:  elapsed_time_ = 0;
       13: 2388:}
        -: 2389:
        -: 2390:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2391:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2392:  return result.skipped();
    %%%%%: 2392-block  0
call    0 never executed
        -: 2393:}
        -: 2394:
        -: 2395:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 6 returned 100% blocks executed 88%
        6: 2396:bool TestResult::Skipped() const {
       6*: 2397:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
        6: 2397-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0
        6: 2397-block  1
call    3 returned 6
branch  4 taken 0 (fallthrough)
branch  5 taken 6
    %%%%%: 2397-block  2
        6: 2397-block  3
        6: 2397-block  4
        -: 2398:}
        -: 2399:
        -: 2400:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 16 returned 100% blocks executed 50%
       16: 2401:bool TestResult::Failed() const {
      16*: 2402:  for (int i = 0; i < total_part_count(); ++i) {
       16: 2402-block  0
    %%%%%: 2402-block  1
       16: 2402-block  2
call    0 returned 16
branch  1 taken 0
branch  2 taken 16 (fallthrough)
    #####: 2403:    if (GetTestPartResult(i).failed()) return true;
    %%%%%: 2403-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2403-block  1
        -: 2404:  }
       16: 2405:  return false;
       16: 2405-block  0
        -: 2406:}
        -: 2407:
        -: 2408:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2409:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2410:  return result.fatally_failed();
    %%%%%: 2410-block  0
call    0 never executed
        -: 2411:}
        -: 2412:
        -: 2413:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 3 returned 100% blocks executed 100%
        3: 2414:bool TestResult::HasFatalFailure() const {
        3: 2415:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
        3: 2415-block  0
call    0 returned 3
        -: 2416:}
        -: 2417:
        -: 2418:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2419:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2420:  return result.nonfatally_failed();
    %%%%%: 2420-block  0
call    0 never executed
        -: 2421:}
        -: 2422:
        -: 2423:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2424:bool TestResult::HasNonfatalFailure() const {
    #####: 2425:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2425-block  0
call    0 never executed
        -: 2426:}
        -: 2427:
        -: 2428:// Gets the number of all test parts.  This is the sum of the number
        -: 2429:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 16 returned 100% blocks executed 100%
       16: 2430:int TestResult::total_part_count() const {
       16: 2431:  return static_cast<int>(test_part_results_.size());
       16: 2431-block  0
call    0 returned 16
        -: 2432:}
        -: 2433:
        -: 2434:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2435:int TestResult::test_property_count() const {
    #####: 2436:  return static_cast<int>(test_properties_.size());
    %%%%%: 2436-block  0
call    0 never executed
        -: 2437:}
        -: 2438:
        -: 2439:// class Test
        -: 2440:
        -: 2441:// Creates a Test object.
        -: 2442:
        -: 2443:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 1 returned 100% blocks executed 83%
        1: 2444:Test::Test() : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {}
        1: 2444-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 2444-block  1
call    4 returned 1
    $$$$$: 2444-block  2
call    5 never executed
        -: 2445:
        -: 2446:// The d'tor restores the states of all flags.  The actual work is
        -: 2447:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2448:// visible here.
       1*: 2449:Test::~Test() {}
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2449:Test::~Test() {}
    %%%%%: 2449-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 1 returned 100% blocks executed 100%
        1: 2449:Test::~Test() {}
        1: 2449-block  0
call    0 returned 1
------------------
        -: 2450:
        -: 2451:// Sets up the test fixture.
        -: 2452://
        -: 2453:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 0 returned 0% blocks executed 0%
    #####: 2454:void Test::SetUp() {}
        -: 2455:
        -: 2456:// Tears down the test fixture.
        -: 2457://
        -: 2458:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 0 returned 0% blocks executed 0%
    #####: 2459:void Test::TearDown() {}
        -: 2460:
        -: 2461:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2462:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2463:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2463-block  0
call    0 never executed
call    1 never executed
    #####: 2464:}
        -: 2465:
        -: 2466:namespace internal {
        -: 2467:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2468:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2469:                                    const std::string& message) {
        -: 2470:  // This function is a friend of UnitTest and as such has access to
        -: 2471:  // AddTestPartResult.
    #####: 2472:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2472-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2472-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2472-block  2
call    8 never executed
call    9 never executed
    $$$$$: 2472-block  3
call   10 never executed
    $$$$$: 2472-block  4
    $$$$$: 2472-block  5
call   11 never executed
        -: 2473:      result_type,
        -: 2474:      nullptr,  // No info about the source file where the exception occurred.
        -: 2475:      -1,       // We have no info on which line caused the exception.
        -: 2476:      message,
        -: 2477:      "");  // No stack trace, either.
    #####: 2478:}
        -: 2479:
        -: 2480:}  // namespace internal
        -: 2481:
        -: 2482:// Google Test requires all test in the same test suite to use the same test
        -: 2483:// fixture class.  This function checks if the current test has the
        -: 2484:// same fixture class as the first test in the current test suite.  If
        -: 2485:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2486:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 1 returned 100% blocks executed 15%
        1: 2487:bool Test::HasSameFixtureClass() {
        1: 2488:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 2488-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2489:  const TestSuite* const test_suite = impl->current_test_suite();
        1: 2489-block  0
call    0 returned 1
        -: 2490:
        -: 2491:  // Info about the first test in the current test suite.
        1: 2492:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 returned 1
call    1 returned 1
        1: 2493:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
        1: 2494:  const char* const first_test_name = first_test_info->name();
call    0 returned 1
        -: 2495:
        -: 2496:  // Info about the current test.
        1: 2497:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 1
        1: 2498:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
        1: 2499:  const char* const this_test_name = this_test_info->name();
call    0 returned 1
        -: 2500:
        1: 2501:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 2502:    // Is the first test defined using TEST?
    #####: 2503:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2503-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2504:    // Is this test defined using TEST?
    #####: 2505:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2505-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2506:
    #####: 2507:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2507-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2507-block  1
branch  2 never executed
branch  3 never executed
        -: 2508:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2509:      // Tell the user how to fix this.
        -: 2510:
        -: 2511:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2512:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2513:      // the fixture IDs are different for the two test.
    #####: 2514:      const char* const TEST_name =
    %%%%%: 2514-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2514-block  1
    %%%%%: 2514-block  2
        -: 2515:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2516:      const char* const TEST_F_name =
    %%%%%: 2516-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2516-block  1
    %%%%%: 2516-block  2
        -: 2517:          first_is_TEST ? this_test_name : first_test_name;
        -: 2518:
    #####: 2519:      ADD_FAILURE()
    %%%%%: 2519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2519-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2519-block  2
call    6 never executed
    $$$$$: 2519-block  3
call    7 never executed
    $$$$$: 2519-block  4
    $$$$$: 2519-block  5
call    8 never executed
    $$$$$: 2519-block  6
    #####: 2520:          << "All test in the same test suite must use the same test fixture\n"
    %%%%%: 2520-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2521:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2521-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2522:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2522-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2522-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2522-block  2
    #####: 2523:          << ",\n"
    %%%%%: 2523-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2524:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2524-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2524-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2524-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2525:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2525-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2525-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2525-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2526:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2526-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2527:          << "case.";
    %%%%%: 2527-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2527-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2528:    } else {
        -: 2529:      // Two fixture classes with the same name appear in two different
        -: 2530:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2531:      ADD_FAILURE()
    %%%%%: 2531-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2531-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2531-block  2
call    6 never executed
    $$$$$: 2531-block  3
call    7 never executed
    $$$$$: 2531-block  4
    $$$$$: 2531-block  5
call    8 never executed
    $$$$$: 2531-block  6
    #####: 2532:          << "All test in the same test suite must use the same test fixture\n"
    %%%%%: 2532-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2533:          << "class.  However, in test suite "
    %%%%%: 2533-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2534:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2534-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2534-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2534-block  2
    #####: 2535:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2535-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2535-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2535-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2536:          << this_test_name << "\n"
    %%%%%: 2536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2536-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2537:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2537-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2538:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2538-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2539:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2539-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2540:          << "of the classes to put the test into different test suites.";
    %%%%%: 2540-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2540-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2541:    }
    #####: 2542:    return false;
    %%%%%: 2542-block  0
        -: 2543:  }
        -: 2544:
        1: 2545:  return true;
        1: 2545-block  0
        -: 2546:}
        -: 2547:
        -: 2548:#if GTEST_HAS_SEH
        -: 2549:
        -: 2550:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 2551:// function returns its result via an output parameter pointer because VC++
        -: 2552:// prohibits creation of objects with destructors on stack in functions
        -: 2553:// using __try (see error C2712).
        -: 2554:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 2555:                                              const char* location) {
        -: 2556:  Message message;
        -: 2557:  message << "SEH exception with code 0x" << std::setbase(16) << exception_code
        -: 2558:          << std::setbase(10) << " thrown in " << location << ".";
        -: 2559:
        -: 2560:  return new std::string(message.GetString());
        -: 2561:}
        -: 2562:
        -: 2563:#endif  // GTEST_HAS_SEH
        -: 2564:
        -: 2565:namespace internal {
        -: 2566:
        -: 2567:#if GTEST_HAS_EXCEPTIONS
        -: 2568:
        -: 2569:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2570:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2571:                                             const char* location) {
    #####: 2572:  Message message;
    %%%%%: 2572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2573:  if (description != nullptr) {
    %%%%%: 2573-block  0
branch  0 never executed
branch  1 never executed
    #####: 2574:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2574-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2574-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2574-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2575:  } else {
    #####: 2576:    message << "Unknown C++ exception";
    %%%%%: 2576-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2577:  }
    #####: 2578:  message << " thrown in " << location << ".";
    %%%%%: 2578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2578-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2578-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2579:
    #####: 2580:  return message.GetString();
    %%%%%: 2580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2580-block  1
    #####: 2581:}
    %%%%%: 2581-block  0
call    0 never executed
    $$$$$: 2581-block  1
call    1 never executed
        -: 2582:
        -: 2583:static std::string PrintTestPartResultToString(
        -: 2584:    const TestPartResult& test_part_result);
        -: 2585:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2586:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2587:    const TestPartResult& failure)
    #####: 2588:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2588-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2588-block  1
call    5 never executed
    $$$$$: 2588-block  2
call    6 never executed
        -: 2589:
        -: 2590:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2591:
        -: 2592:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2593:// compiler rejects the code if they were declared static.
        -: 2594:
        -: 2595:// Runs the given method and handles SEH exceptions it throws, when
        -: 2596:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2597:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2598:// exceptions in the same function.  Therefore, we provide a separate
        -: 2599:// wrapper function for handling SEH exceptions.)
        -: 2600:template <class T, typename Result>
        8: 2601:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2602:                                              const char* location) {
        -: 2603:#if GTEST_HAS_SEH
        -: 2604:  __try {
        -: 2605:    return (object->*method)();
        -: 2606:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2607:      GetExceptionCode())) {
        -: 2608:    // We create the exception message on the heap because VC++ prohibits
        -: 2609:    // creation of objects with destructors on stack in functions using __try
        -: 2610:    // (see error C2712).
        -: 2611:    std::string* exception_message =
        -: 2612:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2613:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2614:                                             *exception_message);
        -: 2615:    delete exception_message;
        -: 2616:    return static_cast<Result>(0);
        -: 2617:  }
        -: 2618:#else
        -: 2619:  (void)location;
       8*: 2620:  return (object->*method)();
        -: 2621:#endif  // GTEST_HAS_SEH
        -: 2622:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
        1: 2601:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2602:                                              const char* location) {
        -: 2603:#if GTEST_HAS_SEH
        -: 2604:  __try {
        -: 2605:    return (object->*method)();
        -: 2606:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2607:      GetExceptionCode())) {
        -: 2608:    // We create the exception message on the heap because VC++ prohibits
        -: 2609:    // creation of objects with destructors on stack in functions using __try
        -: 2610:    // (see error C2712).
        -: 2611:    std::string* exception_message =
        -: 2612:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2613:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2614:                                             *exception_message);
        -: 2615:    delete exception_message;
        -: 2616:    return static_cast<Result>(0);
        -: 2617:  }
        -: 2618:#else
        -: 2619:  (void)location;
       1*: 2620:  return (object->*method)();
        1: 2620-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2620-block  1
        1: 2620-block  2
        1: 2620-block  3
call    2 returned 1
        -: 2621:#endif  // GTEST_HAS_SEH
        -: 2622:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 80%
        2: 2601:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2602:                                              const char* location) {
        -: 2603:#if GTEST_HAS_SEH
        -: 2604:  __try {
        -: 2605:    return (object->*method)();
        -: 2606:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2607:      GetExceptionCode())) {
        -: 2608:    // We create the exception message on the heap because VC++ prohibits
        -: 2609:    // creation of objects with destructors on stack in functions using __try
        -: 2610:    // (see error C2712).
        -: 2611:    std::string* exception_message =
        -: 2612:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2613:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2614:                                             *exception_message);
        -: 2615:    delete exception_message;
        -: 2616:    return static_cast<Result>(0);
        -: 2617:  }
        -: 2618:#else
        -: 2619:  (void)location;
       2*: 2620:  return (object->*method)();
        2: 2620-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 2620-block  1
        2: 2620-block  2
        2: 2620-block  3
call    2 returned 2
        -: 2621:#endif  // GTEST_HAS_SEH
        -: 2622:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 1 returned 100% blocks executed 83%
        1: 2601:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2602:                                              const char* location) {
        -: 2603:#if GTEST_HAS_SEH
        -: 2604:  __try {
        -: 2605:    return (object->*method)();
        -: 2606:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2607:      GetExceptionCode())) {
        -: 2608:    // We create the exception message on the heap because VC++ prohibits
        -: 2609:    // creation of objects with destructors on stack in functions using __try
        -: 2610:    // (see error C2712).
        -: 2611:    std::string* exception_message =
        -: 2612:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2613:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2614:                                             *exception_message);
        -: 2615:    delete exception_message;
        -: 2616:    return static_cast<Result>(0);
        -: 2617:  }
        -: 2618:#else
        -: 2619:  (void)location;
       1*: 2620:  return (object->*method)();
        1: 2620-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2620-block  1
    %%%%%: 2620-block  2
        1: 2620-block  3
call    2 returned 1
        -: 2621:#endif  // GTEST_HAS_SEH
        -: 2622:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 4 returned 100% blocks executed 100%
        4: 2601:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2602:                                              const char* location) {
        -: 2603:#if GTEST_HAS_SEH
        -: 2604:  __try {
        -: 2605:    return (object->*method)();
        -: 2606:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2607:      GetExceptionCode())) {
        -: 2608:    // We create the exception message on the heap because VC++ prohibits
        -: 2609:    // creation of objects with destructors on stack in functions using __try
        -: 2610:    // (see error C2712).
        -: 2611:    std::string* exception_message =
        -: 2612:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2613:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2614:                                             *exception_message);
        -: 2615:    delete exception_message;
        -: 2616:    return static_cast<Result>(0);
        -: 2617:  }
        -: 2618:#else
        -: 2619:  (void)location;
        4: 2620:  return (object->*method)();
        4: 2620-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3: 2620-block  1
        1: 2620-block  2
        4: 2620-block  3
call    2 returned 4
        -: 2621:#endif  // GTEST_HAS_SEH
        -: 2622:}
------------------
        -: 2623:
        -: 2624:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2625:// exceptions, if they are supported; returns the 0-value for type
        -: 2626:// Result in case of an SEH exception.
        -: 2627:template <class T, typename Result>
        8: 2628:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2629:                                           const char* location) {
        -: 2630:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2631:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2632:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2633:  // after the exception is caught and either report or re-throw the
        -: 2634:  // exception based on the flag's value:
        -: 2635:  //
        -: 2636:  // try {
        -: 2637:  //   // Perform the test method.
        -: 2638:  // } catch (...) {
        -: 2639:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2640:  //     // Report the exception as failure.
        -: 2641:  //   else
        -: 2642:  //     throw;  // Re-throws the original exception.
        -: 2643:  // }
        -: 2644:  //
        -: 2645:  // However, the purpose of this flag is to allow the program to drop into
        -: 2646:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2647:  // control enters the catch block, the exception origin information is
        -: 2648:  // lost and the debugger will stop the program at the point of the
        -: 2649:  // re-throw in this function -- instead of at the point of the original
        -: 2650:  // throw statement in the code under test.  For this reason, we perform
        -: 2651:  // the check early, sacrificing the ability to affect Google Test's
        -: 2652:  // exception handling in the method where the exception is thrown.
        8: 2653:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2654:#if GTEST_HAS_EXCEPTIONS
        -: 2655:    try {
        8: 2656:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2657:    } catch (const AssertionException&) {  // NOLINT
        -: 2658:      // This failure was reported already.
    =====: 2659:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2660:      // This exception type can only be thrown by a failed Google
        -: 2661:      // Test assertion with the intention of letting another testing
        -: 2662:      // framework catch it.  Therefore we just re-throw it.
    =====: 2663:      throw;
    =====: 2664:    } catch (const std::exception& e) {  // NOLINT
    =====: 2665:      internal::ReportFailureInUnknownLocation(
        -: 2666:          TestPartResult::kFatalFailure,
    =====: 2667:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2668:    } catch (...) {  // NOLINT
    =====: 2669:      internal::ReportFailureInUnknownLocation(
        -: 2670:          TestPartResult::kFatalFailure,
        -: 2671:          FormatCxxExceptionMessage(nullptr, location));
        -: 2672:    }
    =====: 2673:    return static_cast<Result>(0);
        -: 2674:#else
        -: 2675:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2676:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2677:  } else {
    #####: 2678:    return (object->*method)();
        -: 2679:  }
        -: 2680:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
        1: 2628:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2629:                                           const char* location) {
        -: 2630:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2631:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2632:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2633:  // after the exception is caught and either report or re-throw the
        -: 2634:  // exception based on the flag's value:
        -: 2635:  //
        -: 2636:  // try {
        -: 2637:  //   // Perform the test method.
        -: 2638:  // } catch (...) {
        -: 2639:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2640:  //     // Report the exception as failure.
        -: 2641:  //   else
        -: 2642:  //     throw;  // Re-throws the original exception.
        -: 2643:  // }
        -: 2644:  //
        -: 2645:  // However, the purpose of this flag is to allow the program to drop into
        -: 2646:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2647:  // control enters the catch block, the exception origin information is
        -: 2648:  // lost and the debugger will stop the program at the point of the
        -: 2649:  // re-throw in this function -- instead of at the point of the original
        -: 2650:  // throw statement in the code under test.  For this reason, we perform
        -: 2651:  // the check early, sacrificing the ability to affect Google Test's
        -: 2652:  // exception handling in the method where the exception is thrown.
        1: 2653:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2653-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2654:#if GTEST_HAS_EXCEPTIONS
        -: 2655:    try {
        1: 2656:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2656-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2656-block  1
    =====: 2657:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2657-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2657-block  1
call    4 never executed
call    5 never executed
        -: 2658:      // This failure was reported already.
    =====: 2659:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2659-block  0
call    0 never executed
    $$$$$: 2659-block  1
call    1 never executed
        -: 2660:      // This exception type can only be thrown by a failed Google
        -: 2661:      // Test assertion with the intention of letting another testing
        -: 2662:      // framework catch it.  Therefore we just re-throw it.
    =====: 2663:      throw;
call    0 never executed
    =====: 2664:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2664-block  0
call    0 never executed
    $$$$$: 2664-block  1
call    1 never executed
    =====: 2665:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2665-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2665-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2665-block  2
call    8 never executed
    $$$$$: 2665-block  3
        -: 2666:          TestPartResult::kFatalFailure,
    =====: 2667:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2668:    } catch (...) {  // NOLINT
    $$$$$: 2668-block  0
call    0 never executed
    $$$$$: 2668-block  1
call    1 never executed
    =====: 2669:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2669-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2669-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2669-block  2
call    8 never executed
    $$$$$: 2669-block  3
        -: 2670:          TestPartResult::kFatalFailure,
        -: 2671:          FormatCxxExceptionMessage(nullptr, location));
        -: 2672:    }
    =====: 2673:    return static_cast<Result>(0);
    $$$$$: 2673-block  0
        -: 2674:#else
        -: 2675:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2676:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2677:  } else {
    #####: 2678:    return (object->*method)();
    %%%%%: 2678-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2678-block  1
    %%%%%: 2678-block  2
    %%%%%: 2678-block  3
call    2 never executed
        -: 2679:  }
        -: 2680:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 18%
        2: 2628:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2629:                                           const char* location) {
        -: 2630:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2631:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2632:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2633:  // after the exception is caught and either report or re-throw the
        -: 2634:  // exception based on the flag's value:
        -: 2635:  //
        -: 2636:  // try {
        -: 2637:  //   // Perform the test method.
        -: 2638:  // } catch (...) {
        -: 2639:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2640:  //     // Report the exception as failure.
        -: 2641:  //   else
        -: 2642:  //     throw;  // Re-throws the original exception.
        -: 2643:  // }
        -: 2644:  //
        -: 2645:  // However, the purpose of this flag is to allow the program to drop into
        -: 2646:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2647:  // control enters the catch block, the exception origin information is
        -: 2648:  // lost and the debugger will stop the program at the point of the
        -: 2649:  // re-throw in this function -- instead of at the point of the original
        -: 2650:  // throw statement in the code under test.  For this reason, we perform
        -: 2651:  // the check early, sacrificing the ability to affect Google Test's
        -: 2652:  // exception handling in the method where the exception is thrown.
        2: 2653:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        2: 2653-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        -: 2654:#if GTEST_HAS_EXCEPTIONS
        -: 2655:    try {
        2: 2656:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        2: 2656-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 2656-block  1
    =====: 2657:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2657-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2657-block  1
call    4 never executed
call    5 never executed
        -: 2658:      // This failure was reported already.
    =====: 2659:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2659-block  0
call    0 never executed
    $$$$$: 2659-block  1
call    1 never executed
        -: 2660:      // This exception type can only be thrown by a failed Google
        -: 2661:      // Test assertion with the intention of letting another testing
        -: 2662:      // framework catch it.  Therefore we just re-throw it.
    =====: 2663:      throw;
call    0 never executed
    =====: 2664:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2664-block  0
call    0 never executed
    $$$$$: 2664-block  1
call    1 never executed
    =====: 2665:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2665-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2665-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2665-block  2
call    8 never executed
    $$$$$: 2665-block  3
        -: 2666:          TestPartResult::kFatalFailure,
    =====: 2667:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2668:    } catch (...) {  // NOLINT
    $$$$$: 2668-block  0
call    0 never executed
    $$$$$: 2668-block  1
call    1 never executed
    =====: 2669:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2669-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2669-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2669-block  2
call    8 never executed
    $$$$$: 2669-block  3
        -: 2670:          TestPartResult::kFatalFailure,
        -: 2671:          FormatCxxExceptionMessage(nullptr, location));
        -: 2672:    }
    =====: 2673:    return static_cast<Result>(0);
    $$$$$: 2673-block  0
        -: 2674:#else
        -: 2675:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2676:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2677:  } else {
    #####: 2678:    return (object->*method)();
    %%%%%: 2678-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2678-block  1
    %%%%%: 2678-block  2
    %%%%%: 2678-block  3
call    2 never executed
        -: 2679:  }
        -: 2680:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 1 returned 100% blocks executed 18%
        1: 2628:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2629:                                           const char* location) {
        -: 2630:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2631:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2632:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2633:  // after the exception is caught and either report or re-throw the
        -: 2634:  // exception based on the flag's value:
        -: 2635:  //
        -: 2636:  // try {
        -: 2637:  //   // Perform the test method.
        -: 2638:  // } catch (...) {
        -: 2639:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2640:  //     // Report the exception as failure.
        -: 2641:  //   else
        -: 2642:  //     throw;  // Re-throws the original exception.
        -: 2643:  // }
        -: 2644:  //
        -: 2645:  // However, the purpose of this flag is to allow the program to drop into
        -: 2646:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2647:  // control enters the catch block, the exception origin information is
        -: 2648:  // lost and the debugger will stop the program at the point of the
        -: 2649:  // re-throw in this function -- instead of at the point of the original
        -: 2650:  // throw statement in the code under test.  For this reason, we perform
        -: 2651:  // the check early, sacrificing the ability to affect Google Test's
        -: 2652:  // exception handling in the method where the exception is thrown.
        1: 2653:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2653-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2654:#if GTEST_HAS_EXCEPTIONS
        -: 2655:    try {
        1: 2656:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2656-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2656-block  1
    =====: 2657:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2657-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2657-block  1
call    4 never executed
call    5 never executed
        -: 2658:      // This failure was reported already.
    =====: 2659:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2659-block  0
call    0 never executed
    $$$$$: 2659-block  1
call    1 never executed
        -: 2660:      // This exception type can only be thrown by a failed Google
        -: 2661:      // Test assertion with the intention of letting another testing
        -: 2662:      // framework catch it.  Therefore we just re-throw it.
    =====: 2663:      throw;
call    0 never executed
    =====: 2664:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2664-block  0
call    0 never executed
    $$$$$: 2664-block  1
call    1 never executed
    =====: 2665:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2665-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2665-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2665-block  2
call    8 never executed
    $$$$$: 2665-block  3
        -: 2666:          TestPartResult::kFatalFailure,
    =====: 2667:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2668:    } catch (...) {  // NOLINT
    $$$$$: 2668-block  0
call    0 never executed
    $$$$$: 2668-block  1
call    1 never executed
    =====: 2669:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2669-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2669-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2669-block  2
call    8 never executed
    $$$$$: 2669-block  3
        -: 2670:          TestPartResult::kFatalFailure,
        -: 2671:          FormatCxxExceptionMessage(nullptr, location));
        -: 2672:    }
    =====: 2673:    return static_cast<Result>(0);
    $$$$$: 2673-block  0
        -: 2674:#else
        -: 2675:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2676:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2677:  } else {
    #####: 2678:    return (object->*method)();
    %%%%%: 2678-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2678-block  1
    %%%%%: 2678-block  2
    %%%%%: 2678-block  3
call    2 never executed
        -: 2679:  }
        -: 2680:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 4 returned 100% blocks executed 18%
        4: 2628:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2629:                                           const char* location) {
        -: 2630:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2631:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2632:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2633:  // after the exception is caught and either report or re-throw the
        -: 2634:  // exception based on the flag's value:
        -: 2635:  //
        -: 2636:  // try {
        -: 2637:  //   // Perform the test method.
        -: 2638:  // } catch (...) {
        -: 2639:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2640:  //     // Report the exception as failure.
        -: 2641:  //   else
        -: 2642:  //     throw;  // Re-throws the original exception.
        -: 2643:  // }
        -: 2644:  //
        -: 2645:  // However, the purpose of this flag is to allow the program to drop into
        -: 2646:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2647:  // control enters the catch block, the exception origin information is
        -: 2648:  // lost and the debugger will stop the program at the point of the
        -: 2649:  // re-throw in this function -- instead of at the point of the original
        -: 2650:  // throw statement in the code under test.  For this reason, we perform
        -: 2651:  // the check early, sacrificing the ability to affect Google Test's
        -: 2652:  // exception handling in the method where the exception is thrown.
        4: 2653:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        4: 2653-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        -: 2654:#if GTEST_HAS_EXCEPTIONS
        -: 2655:    try {
        4: 2656:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        4: 2656-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 2656-block  1
    =====: 2657:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2657-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2657-block  1
call    4 never executed
call    5 never executed
        -: 2658:      // This failure was reported already.
    =====: 2659:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2659-block  0
call    0 never executed
    $$$$$: 2659-block  1
call    1 never executed
        -: 2660:      // This exception type can only be thrown by a failed Google
        -: 2661:      // Test assertion with the intention of letting another testing
        -: 2662:      // framework catch it.  Therefore we just re-throw it.
    =====: 2663:      throw;
call    0 never executed
    =====: 2664:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2664-block  0
call    0 never executed
    $$$$$: 2664-block  1
call    1 never executed
    =====: 2665:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2665-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2665-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2665-block  2
call    8 never executed
    $$$$$: 2665-block  3
        -: 2666:          TestPartResult::kFatalFailure,
    =====: 2667:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2668:    } catch (...) {  // NOLINT
    $$$$$: 2668-block  0
call    0 never executed
    $$$$$: 2668-block  1
call    1 never executed
    =====: 2669:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2669-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2669-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2669-block  2
call    8 never executed
    $$$$$: 2669-block  3
        -: 2670:          TestPartResult::kFatalFailure,
        -: 2671:          FormatCxxExceptionMessage(nullptr, location));
        -: 2672:    }
    =====: 2673:    return static_cast<Result>(0);
    $$$$$: 2673-block  0
        -: 2674:#else
        -: 2675:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2676:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2677:  } else {
    #####: 2678:    return (object->*method)();
    %%%%%: 2678-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2678-block  1
    %%%%%: 2678-block  2
    %%%%%: 2678-block  3
call    2 never executed
        -: 2679:  }
        -: 2680:}
------------------
        -: 2681:
        -: 2682:}  // namespace internal
        -: 2683:
        -: 2684:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 1 returned 100% blocks executed 90%
        1: 2685:void Test::Run() {
       1*: 2686:  if (!HasSameFixtureClass()) return;
        1: 2686-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 2686-block  1
        -: 2687:
        1: 2688:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 2688-block  0
call    0 returned 1
        1: 2689:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 1
call    1 returned 1
        1: 2690:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 1
        -: 2691:  // We will run the test only if SetUp() was successful and didn't call
        -: 2692:  // GTEST_SKIP().
       1*: 2693:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 2693-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1: 2693-block  1
    %%%%%: 2693-block  2
        1: 2693-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1: 2694:    impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 2694-block  0
call    0 returned 1
call    1 returned 1
        1: 2695:    internal::HandleExceptionsInMethodIfSupported(this, &Test::TestBody,
call    0 returned 1
        -: 2696:                                                  "the test body");
        -: 2697:  }
        -: 2698:
        -: 2699:  // However, we want to clean up as much as possible.  Hence we will
        -: 2700:  // always call TearDown(), even if SetUp() or the test body has
        -: 2701:  // failed.
        1: 2702:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 2702-block  0
call    0 returned 1
call    1 returned 1
        1: 2703:  internal::HandleExceptionsInMethodIfSupported(this, &Test::TearDown,
call    0 returned 1
        -: 2704:                                                "TearDown()");
        -: 2705:}
        -: 2706:
        -: 2707:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 3 returned 100% blocks executed 100%
        3: 2708:bool Test::HasFatalFailure() {
        3: 2709:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
        3: 2709-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
        -: 2710:}
        -: 2711:
        -: 2712:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2713:bool Test::HasNonfatalFailure() {
        -: 2714:  return internal::GetUnitTestImpl()
        -: 2715:      ->current_test_result()
    #####: 2716:      ->HasNonfatalFailure();
    %%%%%: 2716-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2717:}
        -: 2718:
        -: 2719:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 3 returned 100% blocks executed 100%
        3: 2720:bool Test::IsSkipped() {
        3: 2721:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
        3: 2721-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
        -: 2722:}
        -: 2723:
        -: 2724:// class TestInfo
        -: 2725:
        -: 2726:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2727:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 12 returned 100% blocks executed 35%
       12: 2728:TestInfo::TestInfo(const std::string& a_test_suite_name,
        -: 2729:                   const std::string& a_name, const char* a_type_param,
        -: 2730:                   const char* a_value_param,
        -: 2731:                   internal::CodeLocation a_code_location,
        -: 2732:                   internal::TypeId fixture_class_id,
       12: 2733:                   internal::TestFactoryBase* factory)
       12: 2734:    : test_suite_name_(a_test_suite_name),
       12: 2734-block  0
call    0 returned 12
        -: 2735:      // begin()/end() is MSVC 17.3.3 ASAN crash workaround (GitHub issue #3997)
       12: 2736:      name_(a_name.begin(), a_name.end()),
call    0 returned 12
call    1 returned 12
call    2 returned 12
call    3 returned 12
branch  4 taken 12 (fallthrough)
branch  5 taken 0 (throw)
       12: 2736-block  0
call    6 returned 12
    $$$$$: 2736-block  1
call    7 never executed
    $$$$$: 2736-block  2
      12*: 2737:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    %%%%%: 2737-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2737-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2737-block  2
       12: 2737-block  3
       12: 2737-block  4
call    9 returned 12
branch 10 taken 0 (fallthrough)
branch 11 taken 12
    %%%%%: 2737-block  5
call   12 never executed
    $$$$$: 2737-block  6
call   13 never executed
    $$$$$: 2737-block  7
branch 14 never executed
branch 15 never executed
    $$$$$: 2737-block  8
call   16 never executed
    $$$$$: 2737-block  9
      12*: 2738:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
       12: 2738-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    %%%%%: 2738-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2738-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2738-block  3
       12: 2738-block  4
       12: 2738-block  5
call    9 returned 12
branch 10 taken 0 (fallthrough)
branch 11 taken 12
    %%%%%: 2738-block  6
call   12 never executed
    $$$$$: 2738-block  7
call   13 never executed
    $$$$$: 2738-block  8
branch 14 never executed
branch 15 never executed
    $$$$$: 2738-block  9
call   16 never executed
    $$$$$: 2738-block 10
       12: 2739:      location_(a_code_location),
       12: 2739-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 2740:      fixture_class_id_(fixture_class_id),
       12: 2741:      should_run_(false),
       12: 2742:      is_disabled_(false),
       12: 2743:      matches_filter_(false),
       12: 2744:      is_in_another_shard_(false),
       12: 2745:      factory_(factory),
       12: 2746:      result_() {}
       12: 2746-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 2746-block  1
    $$$$$: 2746-block  2
call    3 never executed
    $$$$$: 2746-block  3
call    4 never executed
    $$$$$: 2746-block  4
call    5 never executed
    $$$$$: 2746-block  5
call    6 never executed
    $$$$$: 2746-block  6
call    7 never executed
        -: 2747:
        -: 2748:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 0 returned 0% blocks executed 0%
    #####: 2749:TestInfo::~TestInfo() { delete factory_; }
    %%%%%: 2749-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2749-block  1
call    2 never executed
    %%%%%: 2749-block  2
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 2750:
        -: 2751:namespace internal {
        -: 2752:
        -: 2753:// Creates a new TestInfo object and registers it with Google Test;
        -: 2754:// returns the created object.
        -: 2755://
        -: 2756:// Arguments:
        -: 2757://
        -: 2758://   test_suite_name:  name of the test suite
        -: 2759://   name:             name of the test
        -: 2760://   type_param:       the name of the test's type parameter, or NULL if
        -: 2761://                     this is not a typed or a type-parameterized test.
        -: 2762://   value_param:      text representation of the test's value parameter,
        -: 2763://                     or NULL if this is not a value-parameterized test.
        -: 2764://   code_location:    code location where the test is defined
        -: 2765://   fixture_class_id: ID of the test fixture class
        -: 2766://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2767://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2768://   factory:          pointer to the factory that creates a test object.
        -: 2769://                     The newly created TestInfo instance will assume
        -: 2770://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 12 returned 100% blocks executed 52%
       12: 2771:TestInfo* MakeAndRegisterTestInfo(
        -: 2772:    const char* test_suite_name, const char* name, const char* type_param,
        -: 2773:    const char* value_param, CodeLocation code_location,
        -: 2774:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2775:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2776:  TestInfo* const test_info =
        -: 2777:      new TestInfo(test_suite_name, name, type_param, value_param,
       12: 2778:                   code_location, fixture_class_id, factory);
       12: 2778-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 2778-block  1
call    4 returned 12
call    5 returned 12
branch  6 taken 12 (fallthrough)
branch  7 taken 0 (throw)
       12: 2778-block  2
call    8 returned 12
branch  9 taken 12 (fallthrough)
branch 10 taken 0 (throw)
       12: 2778-block  3
call   11 returned 12
branch 12 taken 12 (fallthrough)
branch 13 taken 0 (throw)
       12: 2778-block  4
call   14 returned 12
branch 15 taken 12 (fallthrough)
branch 16 taken 0 (throw)
       12: 2778-block  5
call   17 returned 12
call   18 returned 12
call   19 returned 12
call   20 returned 12
call   21 returned 12
    $$$$$: 2778-block  6
call   22 never executed
    $$$$$: 2778-block  7
call   23 never executed
    $$$$$: 2778-block  8
    $$$$$: 2778-block  9
call   24 never executed
    $$$$$: 2778-block 10
    $$$$$: 2778-block 11
call   25 never executed
    $$$$$: 2778-block 12
    $$$$$: 2778-block 13
call   26 never executed
    $$$$$: 2778-block 14
    $$$$$: 2778-block 15
call   27 never executed
       12: 2779:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 12
call    1 returned 12
       12: 2780:  return test_info;
       12: 2780-block  0
        -: 2781:}
        -: 2782:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2783:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2784:                                CodeLocation code_location) {
    #####: 2785:  Message errors;
    %%%%%: 2785-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2786:  errors
    #####: 2787:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2787-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2787-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2787-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2788:      << "All test in the same test suite must use the same test fixture\n"
    %%%%%: 2788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2789:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2789-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2789-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2790:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2790-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2791:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2791-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2792:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2792-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2793:      << "probably rename one of the classes to put the test into different\n"
    %%%%%: 2793-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2794:      << "test suites.";
    %%%%%: 2794-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2795:
    #####: 2796:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2796-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2796-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$: 2796-block  2
call    9 never executed
    $$$$$: 2796-block  3
    $$$$$: 2796-block  4
call   10 never executed
    $$$$$: 2796-block  5
        -: 2797:                                          code_location.line)
    #####: 2798:                    << " " << errors.GetString();
    %%%%%: 2798-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2798-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2798-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2798-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2798-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2798-block  5
call   14 never executed
    $$$$$: 2798-block  6
    #####: 2799:}
call    0 never executed
    $$$$$: 2799-block  0
call    1 never executed
        -: 2800:
        -: 2801:// This method expands all parameterized test registered with macros TEST_P
        -: 2802:// and INSTANTIATE_TEST_SUITE_P into regular test and registers those.
        -: 2803:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 2804:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2805:  if (!parameterized_tests_registered_) {
        1: 2805-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2806:    parameterized_test_registry_.RegisterTests();
        1: 2806-block  0
call    0 returned 1
        1: 2807:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 returned 1
        1: 2808:    parameterized_tests_registered_ = true;
        -: 2809:  }
        1: 2810:}
        -: 2811:
        -: 2812:}  // namespace internal
        -: 2813:
        -: 2814:// Creates the test object, runs it, records its result, and then
        -: 2815:// deletes it.
function _ZN7testing8TestInfo3RunEv called 12 returned 100% blocks executed 92%
       12: 2816:void TestInfo::Run() {
       12: 2817:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
       12: 2817-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 2817-block  1
call    3 returned 12
call    4 returned 12
       12: 2818:  if (!should_run_) {
branch  0 taken 11 (fallthrough)
branch  1 taken 1
      11*: 2819:    if (is_disabled_ && matches_filter_) repeater->OnTestDisabled(*this);
       11: 2819-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    %%%%%: 2819-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 2819-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
       11: 2820:    return;
       11: 2820-block  0
        -: 2821:  }
        -: 2822:
        -: 2823:  // Tells UnitTest where to store test result.
        1: 2824:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 2824-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2825:  impl->set_current_test_info(this);
        1: 2825-block  0
call    0 returned 1
        -: 2826:
        -: 2827:  // Notifies the unit test event listeners that a test is about to start.
        1: 2828:  repeater->OnTestStart(*this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2829:  result_.set_start_timestamp(internal::GetTimeInMillis());
        1: 2829-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2829-block  1
call    3 returned 1
        1: 2830:  internal::Timer timer;
call    0 returned 1
        1: 2831:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2831-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 2832:
        -: 2833:  // Creates the test object.
        2: 2834:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
        1: 2835:      factory_, &internal::TestFactoryBase::CreateTest,
        1: 2835-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2836:      "the test fixture's constructor");
        -: 2837:
        -: 2838:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2839:  // GTEST_SKIP().
        -: 2840:  // Note that the object will not be null
       1*: 2841:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
        1: 2841-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2841-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 2841-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 2841-block  3
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        1: 2841-block  4
    %%%%%: 2841-block  5
        1: 2841-block  6
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        -: 2842:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2843:    // exception handling code.
        1: 2844:    test->Run();
        1: 2844-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2845:  }
        -: 2846:
        1: 2847:  if (test != nullptr) {
        1: 2847-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 2848:    // Deletes the test object.
        1: 2849:    impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 2849-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2849-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 2850:    internal::HandleExceptionsInMethodIfSupported(
        1: 2850-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2851:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2852:  }
        -: 2853:
        1: 2854:  result_.set_elapsed_time(timer.Elapsed());
        1: 2854-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2854-block  1
call    3 returned 1
        -: 2855:
        -: 2856:  // Notifies the unit test event listener that a test has just finished.
        1: 2857:  repeater->OnTestEnd(*this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2858:
        -: 2859:  // Tells UnitTest to stop associating assertion results to this
        -: 2860:  // test.
        1: 2861:  impl->set_current_test_info(nullptr);
        1: 2861-block  0
call    0 returned 1
        -: 2862:}
        -: 2863:
        -: 2864:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2865:void TestInfo::Skip() {
    #####: 2866:  if (!should_run_) return;
    %%%%%: 2866-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2866-block  1
        -: 2867:
    #####: 2868:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2868-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2869:  impl->set_current_test_info(this);
    %%%%%: 2869-block  0
call    0 never executed
        -: 2870:
    #####: 2871:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2871-block  0
call    3 never executed
call    4 never executed
        -: 2872:
        -: 2873:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2874:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2875:
        -: 2876:  const TestPartResult test_part_result =
    #####: 2877:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2877-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2878:  impl->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
    %%%%%: 2878-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2878-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2879:      test_part_result);
        -: 2880:
        -: 2881:  // Notifies the unit test event listener that a test has just finished.
    #####: 2882:  repeater->OnTestEnd(*this);
    %%%%%: 2882-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2883:  impl->set_current_test_info(nullptr);
    %%%%%: 2883-block  0
call    0 never executed
    #####: 2884:}
call    0 never executed
    $$$$$: 2884-block  0
call    1 never executed
        -: 2885:
        -: 2886:// class TestSuite
        -: 2887:
        -: 2888:// Gets the number of successful test in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 2889:int TestSuite::successful_test_count() const {
        1: 2890:  return CountIf(test_info_list_, TestPassed);
        1: 2890-block  0
call    0 returned 1
        -: 2891:}
        -: 2892:
        -: 2893:// Gets the number of successful test in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 2894:int TestSuite::skipped_test_count() const {
        1: 2895:  return CountIf(test_info_list_, TestSkipped);
        1: 2895-block  0
call    0 returned 1
        -: 2896:}
        -: 2897:
        -: 2898:// Gets the number of failed test in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 2 returned 100% blocks executed 100%
        2: 2899:int TestSuite::failed_test_count() const {
        2: 2900:  return CountIf(test_info_list_, TestFailed);
        2: 2900-block  0
call    0 returned 2
        -: 2901:}
        -: 2902:
        -: 2903:// Gets the number of disabled test that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 2904:int TestSuite::reportable_disabled_test_count() const {
        1: 2905:  return CountIf(test_info_list_, TestReportableDisabled);
        1: 2905-block  0
call    0 returned 1
        -: 2906:}
        -: 2907:
        -: 2908:// Gets the number of disabled test in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2909:int TestSuite::disabled_test_count() const {
    #####: 2910:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2910-block  0
call    0 never executed
        -: 2911:}
        -: 2912:
        -: 2913:// Gets the number of test to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2914:int TestSuite::reportable_test_count() const {
    #####: 2915:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2915-block  0
call    0 never executed
        -: 2916:}
        -: 2917:
        -: 2918:// Get the number of test in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 4 returned 100% blocks executed 100%
        4: 2919:int TestSuite::test_to_run_count() const {
        4: 2920:  return CountIf(test_info_list_, ShouldRunTest);
        4: 2920-block  0
call    0 returned 4
        -: 2921:}
        -: 2922:
        -: 2923:// Gets the number of all test.
function _ZNK7testing9TestSuite16total_test_countEv called 13 returned 100% blocks executed 100%
       13: 2924:int TestSuite::total_test_count() const {
       13: 2925:  return static_cast<int>(test_info_list_.size());
       13: 2925-block  0
call    0 returned 13
        -: 2926:}
        -: 2927:
        -: 2928:// Creates a TestSuite with the given name.
        -: 2929://
        -: 2930:// Arguments:
        -: 2931://
        -: 2932://   a_name:       name of the test suite
        -: 2933://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2934://                 this is not a typed or a type-parameterized test suite.
        -: 2935://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2936://   tear_down_tc: pointer to the function that tears down the test suite
function _ZN7testing9TestSuiteC2EPKcS2_PFvvES4_ called 1 returned 100% blocks executed 36%
        1: 2937:TestSuite::TestSuite(const char* a_name, const char* a_type_param,
        -: 2938:                     internal::SetUpTestSuiteFunc set_up_tc,
        1: 2939:                     internal::TearDownTestSuiteFunc tear_down_tc)
        1: 2940:    : name_(a_name),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2940-block  0
call    3 returned 1
    $$$$$: 2940-block  1
call    4 never executed
    $$$$$: 2940-block  2
call    5 never executed
       1*: 2941:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2941-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2941-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2941-block  2
        1: 2941-block  3
        1: 2941-block  4
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%: 2941-block  5
call   12 never executed
    $$$$$: 2941-block  6
call   13 never executed
    $$$$$: 2941-block  7
branch 14 never executed
branch 15 never executed
    $$$$$: 2941-block  8
call   16 never executed
    $$$$$: 2941-block  9
        1: 2942:      set_up_tc_(set_up_tc),
        1: 2943:      tear_down_tc_(tear_down_tc),
        1: 2944:      should_run_(false),
        1: 2945:      start_timestamp_(0),
        2: 2946:      elapsed_time_(0) {}
        1: 2946-block  0
call    0 returned 1
        1: 2946-block  1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 2946-block  2
    $$$$$: 2946-block  3
call    6 never executed
    $$$$$: 2946-block  4
call    7 never executed
    $$$$$: 2946-block  5
call    8 never executed
    $$$$$: 2946-block  6
call    9 never executed
        -: 2947:
        -: 2948:// Destructor of TestSuite.
    #####: 2949:TestSuite::~TestSuite() {
        -: 2950:  // Deletes every Test in the collection.
    #####: 2951:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2952:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 0 returned 0% blocks executed 0%
    #####: 2949:TestSuite::~TestSuite() {
        -: 2950:  // Deletes every Test in the collection.
        -: 2951:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2952:}
    %%%%%: 2952-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 0 returned 0% blocks executed 0%
    #####: 2949:TestSuite::~TestSuite() {
        -: 2950:  // Deletes every Test in the collection.
    #####: 2951:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    %%%%%: 2951-block  0
call    0 never executed
    #####: 2952:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
------------------
        -: 2953:
        -: 2954:// Returns the i-th test among all the test. i can range from 0 to
        -: 2955:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2956:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 2957:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2957-block  0
call    0 never executed
    #####: 2958:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed
branch  1 never executed
    %%%%%: 2958-block  0
call    2 never executed
    %%%%%: 2958-block  1
    %%%%%: 2958-block  2
        -: 2959:}
        -: 2960:
        -: 2961:// Returns the i-th test among all the test. i can range from 0 to
        -: 2962:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 12 returned 100% blocks executed 86%
       12: 2963:TestInfo* TestSuite::GetMutableTestInfo(int i) {
       12: 2964:  const int index = GetElementOr(test_indices_, i, -1);
       12: 2964-block  0
call    0 returned 12
      12*: 2965:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 2965-block  0
call    2 returned 12
    %%%%%: 2965-block  1
       12: 2965-block  2
        -: 2966:}
        -: 2967:
        -: 2968:// Adds a test to this test suite.  Will delete the test upon
        -: 2969:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 12 returned 100% blocks executed 100%
       12: 2970:void TestSuite::AddTestInfo(TestInfo* test_info) {
       12: 2971:  test_info_list_.push_back(test_info);
       12: 2971-block  0
call    0 returned 12
       12: 2972:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 2973:}
       12: 2973-block  0
        -: 2974:
        -: 2975:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 1 returned 100% blocks executed 70%
        1: 2976:void TestSuite::Run() {
       1*: 2977:  if (!should_run_) return;
        1: 2977-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2977-block  1
        -: 2978:
        1: 2979:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 2979-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2980:  impl->set_current_test_suite(this);
        1: 2980-block  0
call    0 returned 1
        -: 2981:
        1: 2982:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2982-block  0
call    3 returned 1
call    4 returned 1
        -: 2983:
        -: 2984:  // Call both legacy and the new API
        1: 2985:  repeater->OnTestSuiteStart(*this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2986://  Legacy API is deprecated but still available
        -: 2987:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 2988:  repeater->OnTestCaseStart(*this);
        1: 2988-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2989:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 2990:
        1: 2991:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 2991-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2991-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 2992:  internal::HandleExceptionsInMethodIfSupported(
        1: 2992-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2993:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 2994:
        1: 2995:  const bool skip_all = ad_hoc_test_result().Failed();
        1: 2995-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 2996:
        1: 2997:  start_timestamp_ = internal::GetTimeInMillis();
        1: 2997-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2998:  internal::Timer timer;
        1: 2998-block  0
call    0 returned 1
       13: 2999:  for (int i = 0; i < total_test_count(); i++) {
       12: 2999-block  0
       13: 2999-block  1
call    0 returned 13
branch  1 taken 12
branch  2 taken 1 (fallthrough)
       12: 3000:    if (skip_all) {
       12: 3000-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 3001:      GetMutableTestInfo(i)->Skip();
    %%%%%: 3001-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3001-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3002:    } else {
       12: 3003:      GetMutableTestInfo(i)->Run();
       12: 3003-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 3003-block  1
call    3 returned 12
branch  4 taken 12 (fallthrough)
branch  5 taken 0 (throw)
        -: 3004:    }
      12*: 3005:    if (GTEST_FLAG_GET(fail_fast) &&
       12: 3005-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    %%%%%: 3005-block  1
       12: 3005-block  2
       12: 3005-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 12
    #####: 3006:        GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3006-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3006-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3006-block  2
branch  7 never executed
branch  8 never executed
    #####: 3007:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3007-block  0
    %%%%%: 3007-block  1
    %%%%%: 3007-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3008:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3008-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3008-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3009:      }
    #####: 3010:      break;
    %%%%%: 3010-block  0
        -: 3011:    }
        -: 3012:  }
        1: 3013:  elapsed_time_ = timer.Elapsed();
        1: 3013-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3014:
        1: 3015:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 3015-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3015-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3016:  internal::HandleExceptionsInMethodIfSupported(
        1: 3016-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3017:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3018:
        -: 3019:  // Call both legacy and the new API
        1: 3020:  repeater->OnTestSuiteEnd(*this);
        1: 3020-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3021://  Legacy API is deprecated but still available
        -: 3022:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 3023:  repeater->OnTestCaseEnd(*this);
        1: 3023-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3024:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3025:
        1: 3026:  impl->set_current_test_suite(nullptr);
        1: 3026-block  0
call    0 returned 1
        -: 3027:}
        -: 3028:
        -: 3029:// Skips all test under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3030:void TestSuite::Skip() {
    #####: 3031:  if (!should_run_) return;
    %%%%%: 3031-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3031-block  1
        -: 3032:
    #####: 3033:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 3033-block  0
call    0 never executed
    #####: 3034:  impl->set_current_test_suite(this);
call    0 never executed
        -: 3035:
    #####: 3036:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3037:
        -: 3038:  // Call both legacy and the new API
    #####: 3039:  repeater->OnTestSuiteStart(*this);
call    0 never executed
        -: 3040://  Legacy API is deprecated but still available
        -: 3041:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3042:  repeater->OnTestCaseStart(*this);
call    0 never executed
        -: 3043:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3044:
    #####: 3045:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3045-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3046:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3046-block  0
call    0 never executed
call    1 never executed
        -: 3047:  }
        -: 3048:
        -: 3049:  // Call both legacy and the new API
    #####: 3050:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3050-block  0
call    0 never executed
        -: 3051:  // Legacy API is deprecated but still available
        -: 3052:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3053:  repeater->OnTestCaseEnd(*this);
call    0 never executed
        -: 3054:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3055:
    #####: 3056:  impl->set_current_test_suite(nullptr);
call    0 never executed
        -: 3057:}
        -: 3058:
        -: 3059:// Clears the results of all test in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 1 returned 100% blocks executed 100%
        1: 3060:void TestSuite::ClearResult() {
        1: 3061:  ad_hoc_test_result_.Clear();
        1: 3061-block  0
call    0 returned 1
        1: 3062:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 1
        1: 3063:}
        -: 3064:
        -: 3065:// Shuffles the test in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3066:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3067:  Shuffle(random, &test_indices_);
    %%%%%: 3067-block  0
call    0 never executed
    #####: 3068:}
        -: 3069:
        -: 3070:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 3071:void TestSuite::UnshuffleTests() {
       13: 3072:  for (size_t i = 0; i < test_indices_.size(); i++) {
        1: 3072-block  0
       13: 3072-block  1
call    0 returned 13
branch  1 taken 12
branch  2 taken 1 (fallthrough)
       12: 3073:    test_indices_[i] = static_cast<int>(i);
       12: 3073-block  0
call    0 returned 12
        -: 3074:  }
        1: 3075:}
        -: 3076:
        -: 3077:// Formats a countable noun.  Depending on its quantity, either the
        -: 3078:// singular form or the plural form is used. e.g.
        -: 3079://
        -: 3080:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3081:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 7 returned 100% blocks executed 65%
        7: 3082:static std::string FormatCountableNoun(int count, const char* singular_form,
        -: 3083:                                       const char* plural_form) {
       14: 3084:  return internal::StreamableToString(count) + " " +
        7: 3084-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7: 3084-block  1
call    4 returned 7
call    5 returned 7
    $$$$$: 3084-block  2
call    6 never executed
    $$$$$: 3084-block  3
    $$$$$: 3084-block  4
call    7 never executed
      21*: 3085:         (count == 1 ? singular_form : plural_form);
        7: 3085-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 3085-block  1
    %%%%%: 3085-block  2
        7: 3085-block  3
call    2 returned 7
branch  3 taken 7 (fallthrough)
branch  4 taken 0 (throw)
        7: 3085-block  4
        -: 3086:}
        -: 3087:
        -: 3088:// Formats the count of test.
function _ZN7testingL15FormatTestCountEi called 3 returned 100% blocks executed 100%
        3: 3089:static std::string FormatTestCount(int test_count) {
        3: 3090:  return FormatCountableNoun(test_count, "test", "test");
        3: 3090-block  0
call    0 returned 3
        -: 3091:}
        -: 3092:
        -: 3093:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 2 returned 100% blocks executed 100%
        2: 3094:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3095:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3095-block  0
call    0 returned 2
        -: 3096:}
        -: 3097:
        -: 3098:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3099:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3100:// to "Failure", as the user usually doesn't care about the difference
        -: 3101:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 3102:static const char* TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3103:  switch (type) {
    %%%%%: 3103-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3104:    case TestPartResult::kSkip:
    #####: 3105:      return "Skipped\n";
    %%%%%: 3105-block  0
    #####: 3106:    case TestPartResult::kSuccess:
    #####: 3107:      return "Success";
    %%%%%: 3107-block  0
        -: 3108:
    #####: 3109:    case TestPartResult::kNonFatalFailure:
        -: 3110:    case TestPartResult::kFatalFailure:
        -: 3111:#ifdef _MSC_VER
        -: 3112:      return "error: ";
        -: 3113:#else
    #####: 3114:      return "Failure\n";
    %%%%%: 3114-block  0
        -: 3115:#endif
    #####: 3116:    default:
    #####: 3117:      return "Unknown result type";
    %%%%%: 3117-block  0
        -: 3118:  }
        -: 3119:}
        -: 3120:
        -: 3121:namespace internal {
        -: 3122:namespace {
        -: 3123:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3124:}  // namespace
        -: 3125:
        -: 3126:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3127:static std::string PrintTestPartResultToString(
        -: 3128:    const TestPartResult& test_part_result) {
    #####: 3129:  return (Message() << internal::FormatFileLocation(
    %%%%%: 3129-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3129-block  1
call    7 never executed
    $$$$$: 3129-block  2
    $$$$$: 3129-block  3
call    8 never executed
        -: 3130:                           test_part_result.file_name(),
    #####: 3131:                           test_part_result.line_number())
    %%%%%: 3131-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3132:                    << " "
    %%%%%: 3132-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3133:                    << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3133-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3133-block  1
    #####: 3134:                    << test_part_result.message())
    %%%%%: 3134-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3134-block  1
call    4 never executed
    $$$$$: 3134-block  2
    #####: 3135:      .GetString();
    %%%%%: 3135-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3135-block  1
        -: 3136:}
        -: 3137:
        -: 3138:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3139:static void PrintTestPartResult(const TestPartResult& test_part_result) {
    #####: 3140:  const std::string& result = PrintTestPartResultToString(test_part_result);
    %%%%%: 3140-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3141:  printf("%s\n", result.c_str());
    %%%%%: 3141-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3142:  fflush(stdout);
    %%%%%: 3142-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3142-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3143:  // If the test program runs in Visual Studio or a debugger, the
        -: 3144:  // following statements add the test part result message to the Output
        -: 3145:  // window such that the user can double-click on it to jump to the
        -: 3146:  // corresponding source code location; otherwise they do nothing.
        -: 3147:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 3148:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3149:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3150:  // want the same message printed twice.
    #####: 3151:  ::OutputDebugStringA(result.c_str());
    %%%%%: 3151-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3152:  ::OutputDebugStringA("\n");
    %%%%%: 3152-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3153:#endif
    #####: 3154:}
    %%%%%: 3154-block  0
call    0 never executed
    $$$$$: 3154-block  1
call    1 never executed
        -: 3155:
        -: 3156:// class PrettyUnitTestResultPrinter
        -: 3157:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE) &&    \
        -: 3158:    !defined(GTEST_OS_WINDOWS_PHONE) && !defined(GTEST_OS_WINDOWS_RT) && \
        -: 3159:    !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3160:
        -: 3161:// Returns the character attribute for the given color.
        -: 3162:static WORD GetColorAttribute(GTestColor color) {
        -: 3163:  switch (color) {
        -: 3164:    case GTestColor::kRed:
        -: 3165:      return FOREGROUND_RED;
        -: 3166:    case GTestColor::kGreen:
        -: 3167:      return FOREGROUND_GREEN;
        -: 3168:    case GTestColor::kYellow:
        -: 3169:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3170:    default:
        -: 3171:      return 0;
        -: 3172:  }
        -: 3173:}
        -: 3174:
        -: 3175:static int GetBitOffset(WORD color_mask) {
        -: 3176:  if (color_mask == 0) return 0;
        -: 3177:
        -: 3178:  int bitOffset = 0;
        -: 3179:  while ((color_mask & 1) == 0) {
        -: 3180:    color_mask >>= 1;
        -: 3181:    ++bitOffset;
        -: 3182:  }
        -: 3183:  return bitOffset;
        -: 3184:}
        -: 3185:
        -: 3186:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3187:  // Let's reuse the BG
        -: 3188:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3189:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3190:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3191:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3192:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3193:
        -: 3194:  WORD new_color =
        -: 3195:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3196:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3197:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3198:
        -: 3199:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3200:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3201:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3202:  }
        -: 3203:  return new_color;
        -: 3204:}
        -: 3205:
        -: 3206:#else
        -: 3207:
        -: 3208:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3209:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 0 returned 0% blocks executed 0%
    #####: 3210:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3211:  switch (color) {
    %%%%%: 3211-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3212:    case GTestColor::kRed:
    #####: 3213:      return "1";
    %%%%%: 3213-block  0
    #####: 3214:    case GTestColor::kGreen:
    #####: 3215:      return "2";
    %%%%%: 3215-block  0
    #####: 3216:    case GTestColor::kYellow:
    #####: 3217:      return "3";
    %%%%%: 3217-block  0
    #####: 3218:    default:
    #####: 3219:      return nullptr;
    %%%%%: 3219-block  0
        -: 3220:  }
        -: 3221:}
        -: 3222:
        -: 3223:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3224:
        -: 3225:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 24%
        1: 3226:bool ShouldUseColor(bool stdout_is_tty) {
        1: 3227:  std::string c = GTEST_FLAG_GET(color);
        1: 3227-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3228:  const char* const gtest_color = c.c_str();
        1: 3228-block  0
call    0 returned 1
        -: 3229:
        1: 3230:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3230-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 3231:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3232:    // On Windows the TERM variable is usually not set, but the
        -: 3233:    // console there does support colors.
        -: 3234:    return stdout_is_tty;
        -: 3235:#else
        -: 3236:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3237:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3237-block  0
call    0 never executed
        -: 3238:    const bool term_supports_color =
    #####: 3239:        term != nullptr && (String::CStringEquals(term, "xterm") ||
branch  0 never executed
branch  1 never executed
    %%%%%: 3239-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3239-block  1
    %%%%%: 3239-block  2
    #####: 3240:                            String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3240-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3241:                            String::CStringEquals(term, "xterm-kitty") ||
    %%%%%: 3241-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3242:                            String::CStringEquals(term, "screen") ||
    %%%%%: 3242-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3243:                            String::CStringEquals(term, "tmux") ||
    %%%%%: 3243-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3244:                            String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3244-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3245:                            String::CStringEquals(term, "linux") ||
    %%%%%: 3245-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3246:                            String::CStringEquals(term, "cygwin") ||
    %%%%%: 3246-block  0
call    0 never executed
    #####: 3247:                            String::EndsWithCaseInsensitive(term, "-256color"));
    %%%%%: 3247-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3247-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3247-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3247-block  3
branch 11 never executed
branch 12 never executed
    %%%%%: 3247-block  4
branch 13 never executed
branch 14 never executed
    %%%%%: 3247-block  5
call   15 never executed
    %%%%%: 3247-block  6
branch 16 never executed
branch 17 never executed
    %%%%%: 3247-block  7
call   18 never executed
    %%%%%: 3247-block  8
branch 19 never executed
branch 20 never executed
    %%%%%: 3247-block  9
call   21 never executed
    %%%%%: 3247-block 10
branch 22 never executed
branch 23 never executed
    %%%%%: 3247-block 11
call   24 never executed
    $$$$$: 3247-block 12
branch 25 never executed
branch 26 never executed
    $$$$$: 3247-block 13
call   27 never executed
    $$$$$: 3247-block 14
    $$$$$: 3247-block 15
branch 28 never executed
branch 29 never executed
    $$$$$: 3247-block 16
call   30 never executed
    $$$$$: 3247-block 17
    $$$$$: 3247-block 18
branch 31 never executed
branch 32 never executed
    $$$$$: 3247-block 19
call   33 never executed
    $$$$$: 3247-block 20
    $$$$$: 3247-block 21
branch 34 never executed
branch 35 never executed
    $$$$$: 3247-block 22
call   36 never executed
    $$$$$: 3247-block 23
    #####: 3248:    return stdout_is_tty && term_supports_color;
    %%%%%: 3248-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3248-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3248-block  2
    %%%%%: 3248-block  3
    %%%%%: 3248-block  4
        -: 3249:#endif  // GTEST_OS_WINDOWS
        -: 3250:  }
        -: 3251:
        1: 3252:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 3252-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3253:         String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 3253-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3253-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
       3*: 3254:         String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
        1: 3254-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3254-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3254-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 3254-block  3
        1: 3254-block  4
        2: 3255:         String::CStringEquals(gtest_color, "1");
        1: 3255-block  0
call    0 returned 1
        1: 3255-block  1
        -: 3256:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3257:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3258:  // be conservative.
        1: 3259:}
        1: 3259-block  0
call    0 returned 1
    $$$$$: 3259-block  1
call    1 never executed
        -: 3260:
        -: 3261:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3262:// cannot simply emit special characters and have the terminal change colors.
        -: 3263:// This routine must actually emit the characters rather than return a string
        -: 3264:// that would be colored when printed, as can be done on Linux.
        -: 3265:
        -: 3266:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 10 returned 100% blocks executed 60%
       10: 3267:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 3268:  va_list args;
       10: 3269:  va_start(args, fmt);
        -: 3270:
        -: 3271:  static const bool in_color_mode =
        -: 3272:#if GTEST_HAS_FILE_SYSTEM
       10: 3273:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
       10: 3273-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 9
        1: 3273-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3273-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 3273-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 3273-block  4
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1: 3273-block  5
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
        1: 3273-block  6
call   17 returned 1
    $$$$$: 3273-block  7
branch 18 never executed
branch 19 never executed
    $$$$$: 3273-block  8
call   20 never executed
        -: 3274:#else
        -: 3275:      false;
        -: 3276:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 3277:
      10*: 3278:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
       10: 3278-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    %%%%%: 3278-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3278-block  2
       10: 3278-block  3
        -: 3279:
       10: 3280:  if (!use_color) {
       10: 3280-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 3281:    vprintf(fmt, args);
       10: 3281-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3282:    va_end(args);
       10: 3283:    return;
       10: 3283-block  0
        -: 3284:  }
        -: 3285:
        -: 3286:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE) &&    \
        -: 3287:    !defined(GTEST_OS_WINDOWS_PHONE) && !defined(GTEST_OS_WINDOWS_RT) && \
        -: 3288:    !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3289:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3290:
        -: 3291:  // Gets the current text color.
        -: 3292:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3293:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3294:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3295:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3296:
        -: 3297:  // We need to flush the stream buffers into the console before each
        -: 3298:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3299:  // printed but has not yet reached the console.
        -: 3300:  fflush(stdout);
        -: 3301:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3302:
        -: 3303:  vprintf(fmt, args);
        -: 3304:
        -: 3305:  fflush(stdout);
        -: 3306:  // Restores the text color.
        -: 3307:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3308:#else
    #####: 3309:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3309-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3310:  vprintf(fmt, args);
    %%%%%: 3310-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3311:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3311-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3312:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3313:  va_end(args);
    %%%%%: 3313-block  0
        -: 3314:}
        -: 3315:
        -: 3316:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3317:// output to label the type parameter and value parameter for a test.
        -: 3318:static const char kTypeParamLabel[] = "TypeParam";
        -: 3319:static const char kValueParamLabel[] = "GetParam()";
        -: 3320:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3321:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3322:  const char* const type_param = test_info.type_param();
    %%%%%: 3322-block  0
call    0 never executed
    #####: 3323:  const char* const value_param = test_info.value_param();
call    0 never executed
        -: 3324:
    #####: 3325:  if (type_param != nullptr || value_param != nullptr) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3325-block  0
branch  2 never executed
branch  3 never executed
    #####: 3326:    printf(", where ");
    %%%%%: 3326-block  0
call    0 never executed
    #####: 3327:    if (type_param != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 3328:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3328-block  0
call    0 never executed
    #####: 3329:      if (value_param != nullptr) printf(" and ");
branch  0 never executed
branch  1 never executed
    %%%%%: 3329-block  0
call    2 never executed
        -: 3330:    }
    #####: 3331:    if (value_param != nullptr) {
    %%%%%: 3331-block  0
branch  0 never executed
branch  1 never executed
    #####: 3332:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3332-block  0
call    0 never executed
        -: 3333:    }
        -: 3334:  }
    #####: 3335:}
        -: 3336:
        -: 3337:// This class implements the TestEventListener interface.
        -: 3338://
        -: 3339:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3340:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3341: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC1Ev called 1 returned 100% blocks executed 100%
        1: 3342:  PrettyUnitTestResultPrinter() {}
        1: 3342-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 2 returned 100% blocks executed 100%
        2: 3343:  static void PrintTestName(const char* test_suite, const char* test) {
        2: 3344:    printf("%s.%s", test_suite, test);
        2: 3344-block  0
call    0 returned 2
        2: 3345:  }
        -: 3346:
        -: 3347:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3348:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3349:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3350:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3351:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3352:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3353:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3354:#else
        -: 3355:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3356:#endif  // OnTestCaseStart
        -: 3357:
        -: 3358:  void OnTestStart(const TestInfo& test_info) override;
        -: 3359:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3360:
        -: 3361:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3362:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3363:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3364:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3365:#else
        -: 3366:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3367:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3368:
        -: 3369:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3370:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3371:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3372:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3373:
        -: 3374: private:
        -: 3375:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3376:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3377:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3378:};
        -: 3379:
        -: 3380:// Fired before each iteration of test starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 63%
        1: 3381:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3382:    const UnitTest& unit_test, int iteration) {
        1: 3383:  if (GTEST_FLAG_GET(repeat) != 1)
        1: 3383-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3384:    printf("\nRepeating all test (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3384-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3385:
        1: 3386:  std::string f = GTEST_FLAG_GET(filter);
        1: 3386-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3387:  const char* const filter = f.c_str();
        1: 3387-block  0
call    0 returned 1
        -: 3388:
        -: 3389:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3390:  // test may be skipped.
        1: 3391:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3392:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
        1: 3392-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3393:                  filter);
        -: 3394:  }
        -: 3395:
        1: 3396:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3396-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3396-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 3397:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3397-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3398:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
    %%%%%: 3398-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3399:                  static_cast<int>(shard_index) + 1,
        -: 3400:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3401:  }
        -: 3402:
        1: 3403:  if (GTEST_FLAG_GET(shuffle)) {
        1: 3403-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3404:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3404-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3405:                  "Note: Randomizing test' orders with a seed of %d .\n",
        -: 3406:                  unit_test.random_seed());
        -: 3407:  }
        -: 3408:
        1: 3409:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3409-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 3410:  printf("Running %s from %s.\n",
        1: 3410-block  0
call    0 returned 1
        1: 3410-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3411:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3411-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3411-block  1
call    6 returned 1
    $$$$$: 3411-block  2
call    7 never executed
    $$$$$: 3411-block  3
        2: 3412:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
        1: 3412-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3412-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3412-block  2
call    7 never executed
    $$$$$: 3412-block  3
        1: 3413:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3413-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3414:}
        1: 3414-block  0
call    0 returned 1
    $$$$$: 3414-block  1
call    1 never executed
        -: 3415:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3416:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3417:    const UnitTest& /*unit_test*/) {
        1: 3418:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3418-block  0
call    0 returned 1
        1: 3419:  printf("Global test environment set-up.\n");
call    0 returned 1
        1: 3420:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3421:}
        -: 3422:
        -: 3423:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 78%
        1: 3424:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3425:  const std::string counts =
        1: 3426:      FormatCountableNoun(test_case.test_to_run_count(), "test", "test");
        1: 3426-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3426-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3427:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3427-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3428:  printf("%s from %s", counts.c_str(), test_case.name());
        1: 3428-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3429:  if (test_case.type_param() == nullptr) {
        1: 3429-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3430:    printf("\n");
        1: 3430-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3431:  } else {
    #####: 3432:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3432-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3433:  }
        1: 3434:  fflush(stdout);
        1: 3434-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3434-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3435:}
        1: 3435-block  0
call    0 returned 1
    $$$$$: 3435-block  1
call    1 never executed
        -: 3436:#else
        -: 3437:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3438:    const TestSuite& test_suite) {
        -: 3439:  const std::string counts =
        -: 3440:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "test");
        -: 3441:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3442:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3443:  if (test_suite.type_param() == nullptr) {
        -: 3444:    printf("\n");
        -: 3445:  } else {
        -: 3446:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3447:  }
        -: 3448:  fflush(stdout);
        -: 3449:}
        -: 3450:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3451:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 1 returned 100% blocks executed 100%
        1: 3452:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
        1: 3453:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
        1: 3453-block  0
call    0 returned 1
        1: 3454:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1: 3455:  printf("\n");
call    0 returned 1
        1: 3456:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3457:}
        -: 3458:
function _ZN7testing8internal27PrettyUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3459:void PrettyUnitTestResultPrinter::OnTestDisabled(const TestInfo& test_info) {
    #####: 3460:  ColoredPrintf(GTestColor::kYellow, "[ DISABLED ] ");
    %%%%%: 3460-block  0
call    0 never executed
    #####: 3461:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3462:  printf("\n");
call    0 never executed
    #####: 3463:  fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 3464:}
        -: 3465:
        -: 3466:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3467:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3468:    const TestPartResult& result) {
    #####: 3469:  switch (result.type()) {
    %%%%%: 3469-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3470:    // If the test part succeeded, we don't need to do anything.
    #####: 3471:    case TestPartResult::kSuccess:
    #####: 3472:      return;
    %%%%%: 3472-block  0
    #####: 3473:    default:
        -: 3474:      // Print failure message from the assertion
        -: 3475:      // (e.g. expected this and got that).
    #####: 3476:      PrintTestPartResult(result);
    %%%%%: 3476-block  0
call    0 never executed
    #####: 3477:      fflush(stdout);
call    0 never executed
call    1 never executed
        -: 3478:  }
        -: 3479:}
        -: 3480:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 1 returned 100% blocks executed 69%
        1: 3481:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
        1: 3482:  if (test_info.result()->Passed()) {
        1: 3482-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 3483:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
        1: 3483-block  0
call    0 returned 1
    #####: 3484:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3484-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3485:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3485-block  0
call    0 never executed
        -: 3486:  } else {
    #####: 3487:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3487-block  0
call    0 never executed
        -: 3488:  }
        1: 3489:  PrintTestName(test_info.test_suite_name(), test_info.name());
        1: 3489-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
       1*: 3490:  if (test_info.result()->Failed()) PrintFullTestCommentIfPresent(test_info);
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 3490-block  0
call    4 never executed
        -: 3491:
        1: 3492:  if (GTEST_FLAG_GET(print_time)) {
        1: 3492-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3493:    printf(" (%s ms)\n",
        1: 3493-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3494:           internal::StreamableToString(test_info.result()->elapsed_time())
        1: 3494-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3494-block  1
call    5 returned 1
    $$$$$: 3494-block  2
call    6 never executed
    $$$$$: 3494-block  3
        -: 3495:               .c_str());
        -: 3496:  } else {
    #####: 3497:    printf("\n");
    %%%%%: 3497-block  0
call    0 never executed
        -: 3498:  }
        1: 3499:  fflush(stdout);
        1: 3499-block  0
call    0 returned 1
call    1 returned 1
        1: 3500:}
        -: 3501:
        -: 3502:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 71%
        1: 3503:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       1*: 3504:  if (!GTEST_FLAG_GET(print_time)) return;
        1: 3504-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3504-block  1
        -: 3505:
        -: 3506:  const std::string counts =
        1: 3507:      FormatCountableNoun(test_case.test_to_run_count(), "test", "test");
        1: 3507-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3507-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3508:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3508-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3509:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
        1: 3509-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        2: 3510:         internal::StreamableToString(test_case.elapsed_time()).c_str());
        1: 3510-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3510-block  1
call    4 returned 1
    $$$$$: 3510-block  2
call    5 never executed
    $$$$$: 3510-block  3
    $$$$$: 3510-block  4
        1: 3511:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3511-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3512:}
        1: 3512-block  0
call    0 returned 1
    $$$$$: 3512-block  1
call    1 never executed
        -: 3513:#else
        -: 3514:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3515:  if (!GTEST_FLAG_GET(print_time)) return;
        -: 3516:
        -: 3517:  const std::string counts =
        -: 3518:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "test");
        -: 3519:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3520:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3521:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3522:  fflush(stdout);
        -: 3523:}
        -: 3524:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3525:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3526:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3527:    const UnitTest& /*unit_test*/) {
        1: 3528:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3528-block  0
call    0 returned 1
        1: 3529:  printf("Global test environment tear-down\n");
call    0 returned 1
        1: 3530:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3531:}
        -: 3532:
        -: 3533:// Internal helper for printing the list of failed test.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3534:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3535:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3535-block  0
call    0 never executed
    #####: 3536:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 never executed
    #####: 3537:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3537-block  0
call    5 never executed
    $$$$$: 3537-block  1
call    6 never executed
        -: 3538:
    #####: 3539:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3539-block  0
    %%%%%: 3539-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3540:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3540-block  0
call    0 never executed
    #####: 3541:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3541-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3541-block  1
    %%%%%: 3541-block  2
    %%%%%: 3541-block  3
branch  6 never executed
branch  7 never executed
    #####: 3542:      continue;
    %%%%%: 3542-block  0
        -: 3543:    }
    #####: 3544:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3544-block  0
    %%%%%: 3544-block  1
    %%%%%: 3544-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3545:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3545-block  0
call    0 never executed
    #####: 3546:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3546-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3546-block  1
    %%%%%: 3546-block  2
    %%%%%: 3546-block  3
branch  7 never executed
branch  8 never executed
    #####: 3547:        continue;
    %%%%%: 3547-block  0
        -: 3548:      }
    #####: 3549:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3549-block  0
call    0 never executed
    #####: 3550:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3551:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3552:      printf("\n");
call    0 never executed
        -: 3553:    }
        -: 3554:  }
    #####: 3555:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3555-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3555-block  1
    %%%%%: 3555-block  2
    %%%%%: 3555-block  3
call    2 never executed
        -: 3556:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3557:}
        -: 3558:
        -: 3559:// Internal helper for printing the list of test suite failures not covered by
        -: 3560:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3561:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3562:    const UnitTest& unit_test) {
    #####: 3563:  int suite_failure_count = 0;
    #####: 3564:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3564-block  0
    %%%%%: 3564-block  1
    %%%%%: 3564-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3565:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3565-block  0
call    0 never executed
    #####: 3566:    if (!test_suite.should_run()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3567:      continue;
    %%%%%: 3567-block  0
        -: 3568:    }
    #####: 3569:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3569-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3570:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3570-block  0
call    0 never executed
    #####: 3571:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
    #####: 3572:      ++suite_failure_count;
        -: 3573:    }
        -: 3574:  }
    #####: 3575:  if (suite_failure_count > 0) {
    %%%%%: 3575-block  0
branch  0 never executed
branch  1 never executed
    #####: 3576:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3576-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3576-block  1
    %%%%%: 3576-block  2
    %%%%%: 3576-block  3
call    2 never executed
        -: 3577:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3578:  }
    #####: 3579:}
        -: 3580:
        -: 3581:// Internal helper for printing the list of skipped test.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3582:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3583:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3583-block  0
call    0 never executed
    #####: 3584:  if (skipped_test_count == 0) {
branch  0 never executed
branch  1 never executed
    #####: 3585:    return;
    %%%%%: 3585-block  0
        -: 3586:  }
        -: 3587:
    #####: 3588:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3588-block  0
    %%%%%: 3588-block  1
    %%%%%: 3588-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3589:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3589-block  0
call    0 never executed
    #####: 3590:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3590-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3590-block  1
    %%%%%: 3590-block  2
    %%%%%: 3590-block  3
branch  6 never executed
branch  7 never executed
    #####: 3591:      continue;
    %%%%%: 3591-block  0
        -: 3592:    }
    #####: 3593:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3593-block  0
    %%%%%: 3593-block  1
    %%%%%: 3593-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3594:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3594-block  0
call    0 never executed
    #####: 3595:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3595-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3595-block  1
    %%%%%: 3595-block  2
    %%%%%: 3595-block  3
branch  7 never executed
branch  8 never executed
    #####: 3596:        continue;
    %%%%%: 3596-block  0
        -: 3597:      }
    #####: 3598:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3598-block  0
call    0 never executed
    #####: 3599:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3600:      printf("\n");
call    0 never executed
        -: 3601:    }
        -: 3602:  }
        -: 3603:}
        -: 3604:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 52%
        1: 3605:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3606:                                                     int /*iteration*/) {
        1: 3607:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3607-block  0
call    0 returned 1
        2: 3608:  printf("%s from %s ran.",
call    0 returned 1
        1: 3608-block  0
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3609:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3609-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3609-block  1
call    6 returned 1
    $$$$$: 3609-block  2
call    7 never executed
    $$$$$: 3609-block  3
        2: 3610:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$: 3610-block  0
call    3 never executed
    $$$$$: 3610-block  1
call    4 never executed
        1: 3611:  if (GTEST_FLAG_GET(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3612:    printf(" (%s ms total)",
        1: 3612-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3613:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3613-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3613-block  1
call    4 returned 1
    $$$$$: 3613-block  2
call    5 never executed
    $$$$$: 3613-block  3
    $$$$$: 3613-block  4
call    6 never executed
        -: 3614:  }
        1: 3615:  printf("\n");
        1: 3615-block  0
call    0 returned 1
        1: 3616:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 returned 1
        1: 3617:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3617-block  0
call    6 returned 1
    $$$$$: 3617-block  1
call    7 never executed
    $$$$$: 3617-block  2
call    8 never executed
        -: 3618:
        1: 3619:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 returned 1
        1: 3620:  if (skipped_test_count > 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3621:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3621-block  0
call    0 never executed
    #####: 3622:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3622-block  0
call    5 never executed
    $$$$$: 3622-block  1
call    6 never executed
    #####: 3623:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3624:  }
        -: 3625:
        1: 3626:  if (!unit_test.Passed()) {
        1: 3626-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3627:    PrintFailedTests(unit_test);
    %%%%%: 3627-block  0
call    0 never executed
    #####: 3628:    PrintFailedTestSuites(unit_test);
call    0 never executed
        -: 3629:  }
        -: 3630:
        1: 3631:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3631-block  0
call    0 returned 1
       1*: 3632:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3632-block  0
branch  2 never executed
branch  3 never executed
    #####: 3633:    if (unit_test.Passed()) {
    %%%%%: 3633-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3634:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3634-block  0
call    0 never executed
        -: 3635:    }
    #####: 3636:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3636-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3636-block  1
    %%%%%: 3636-block  2
    %%%%%: 3636-block  3
call    2 never executed
        -: 3637:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3638:  }
        -: 3639:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3640:  fflush(stdout);
        1: 3640-block  0
call    0 returned 1
call    1 returned 1
        1: 3641:}
        -: 3642:
        -: 3643:// End PrettyUnitTestResultPrinter
        -: 3644:
        -: 3645:// This class implements the TestEventListener interface.
        -: 3646://
        -: 3647:// Class BriefUnitTestResultPrinter is copyable.
        -: 3648:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3649: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC1Ev called 0 returned 0% blocks executed 0%
    #####: 3650:  BriefUnitTestResultPrinter() {}
    %%%%%: 3650-block  0
call    0 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3651:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3652:    printf("%s.%s", test_suite, test);
    %%%%%: 3652-block  0
call    0 never executed
    #####: 3653:  }
        -: 3654:
        -: 3655:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3656:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3657:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3658:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3659:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3660:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3661:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3662:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3663:#else
        -: 3664:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3665:#endif  // OnTestCaseStart
        -: 3666:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3667:  void OnTestStart(const TestInfo& /*test_info*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3668:  void OnTestDisabled(const TestInfo& /*test_info*/) override {}
        -: 3669:
        -: 3670:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3671:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3672:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3673:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3674:#else
        -: 3675:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3676:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3677:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3678:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3679:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3680:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3681:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3682:};
        -: 3683:
        -: 3684:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3685:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3686:    const TestPartResult& result) {
    #####: 3687:  switch (result.type()) {
    %%%%%: 3687-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3688:    // If the test part succeeded, we don't need to do anything.
    #####: 3689:    case TestPartResult::kSuccess:
    #####: 3690:      return;
    %%%%%: 3690-block  0
    #####: 3691:    default:
        -: 3692:      // Print failure message from the assertion
        -: 3693:      // (e.g. expected this and got that).
    #####: 3694:      PrintTestPartResult(result);
    %%%%%: 3694-block  0
call    0 never executed
    #####: 3695:      fflush(stdout);
call    0 never executed
call    1 never executed
        -: 3696:  }
        -: 3697:}
        -: 3698:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3699:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3700:  if (test_info.result()->Failed()) {
    %%%%%: 3700-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3701:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3701-block  0
call    0 never executed
    #####: 3702:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3703:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3704:
    #####: 3705:    if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3706:      printf(" (%s ms)\n",
    %%%%%: 3706-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3707:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3707-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3707-block  1
call    5 never executed
    $$$$$: 3707-block  2
call    6 never executed
    $$$$$: 3707-block  3
        -: 3708:                 .c_str());
        -: 3709:    } else {
    #####: 3710:      printf("\n");
    %%%%%: 3710-block  0
call    0 never executed
        -: 3711:    }
    #####: 3712:    fflush(stdout);
    %%%%%: 3712-block  0
call    0 never executed
call    1 never executed
        -: 3713:  }
    #####: 3714:}
    %%%%%: 3714-block  0
        -: 3715:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3716:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3717:                                                    int /*iteration*/) {
    #####: 3718:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3718-block  0
call    0 never executed
    #####: 3719:  printf("%s from %s ran.",
call    0 never executed
    %%%%%: 3719-block  0
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3720:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3720-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3720-block  1
call    6 never executed
    $$$$$: 3720-block  2
call    7 never executed
    $$$$$: 3720-block  3
    #####: 3721:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 3721-block  0
call    3 never executed
    $$$$$: 3721-block  1
call    4 never executed
    #####: 3722:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3723:    printf(" (%s ms total)",
    %%%%%: 3723-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3724:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3724-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3724-block  1
call    4 never executed
    $$$$$: 3724-block  2
call    5 never executed
    $$$$$: 3724-block  3
    $$$$$: 3724-block  4
call    6 never executed
        -: 3725:  }
    #####: 3726:  printf("\n");
    %%%%%: 3726-block  0
call    0 never executed
    #####: 3727:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3728:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3728-block  0
call    6 never executed
    $$$$$: 3728-block  1
call    7 never executed
    $$$$$: 3728-block  2
call    8 never executed
        -: 3729:
    #####: 3730:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3731:  if (skipped_test_count > 0) {
branch  0 never executed
branch  1 never executed
    #####: 3732:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3732-block  0
call    0 never executed
    #####: 3733:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3733-block  0
call    5 never executed
    $$$$$: 3733-block  1
call    6 never executed
        -: 3734:  }
        -: 3735:
    #####: 3736:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3736-block  0
call    0 never executed
    #####: 3737:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3737-block  0
branch  2 never executed
branch  3 never executed
    #####: 3738:    if (unit_test.Passed()) {
    %%%%%: 3738-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3739:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3739-block  0
call    0 never executed
        -: 3740:    }
    #####: 3741:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3741-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3741-block  1
    %%%%%: 3741-block  2
    %%%%%: 3741-block  3
call    2 never executed
        -: 3742:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3743:  }
        -: 3744:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3745:  fflush(stdout);
    %%%%%: 3745-block  0
call    0 never executed
call    1 never executed
    #####: 3746:}
        -: 3747:
        -: 3748:// End BriefUnitTestResultPrinter
        -: 3749:
        -: 3750:// class TestEventRepeater
        -: 3751://
        -: 3752:// This class forwards events to other event listeners.
        -: 3753:class TestEventRepeater : public TestEventListener {
        -: 3754: public:
function _ZN7testing8internal17TestEventRepeaterC1Ev called 1 returned 100% blocks executed 100%
        1: 3755:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3755-block  0
call    0 returned 1
call    1 returned 1
        -: 3756:  ~TestEventRepeater() override;
        -: 3757:  void Append(TestEventListener* listener);
        -: 3758:  TestEventListener* Release(TestEventListener* listener);
        -: 3759:
        -: 3760:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3761:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3762:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3762-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3763:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3764:
        -: 3765:  void OnTestProgramStart(const UnitTest& unit_test) override;
        -: 3766:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3767:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
        -: 3768:  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
        -: 3769://  Legacy API is deprecated but still available
        -: 3770:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3771:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3772:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3773:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3774:  void OnTestStart(const TestInfo& test_info) override;
        -: 3775:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3776:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3777:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3778://  Legacy API is deprecated but still available
        -: 3779:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3780:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3781:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3782:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3783:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
        -: 3784:  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
        -: 3785:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3786:  void OnTestProgramEnd(const UnitTest& unit_test) override;
        -: 3787:
        -: 3788: private:
        -: 3789:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3790:  // in death test child processes.
        -: 3791:  bool forwarding_enabled_;
        -: 3792:  // The list of listeners that receive events.
        -: 3793:  std::vector<TestEventListener*> listeners_;
        -: 3794:
        -: 3795:  TestEventRepeater(const TestEventRepeater&) = delete;
        -: 3796:  TestEventRepeater& operator=(const TestEventRepeater&) = delete;
        -: 3797:};
        -: 3798:
    #####: 3799:TestEventRepeater::~TestEventRepeater() {
    #####: 3800:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3801:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 0 returned 0% blocks executed 0%
    #####: 3799:TestEventRepeater::~TestEventRepeater() {
        -: 3800:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3801:}
    %%%%%: 3801-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 0 returned 0% blocks executed 0%
    #####: 3799:TestEventRepeater::~TestEventRepeater() {
    #####: 3800:  ForEach(listeners_, Delete<TestEventListener>);
    %%%%%: 3800-block  0
call    0 never executed
    #####: 3801:}
call    0 never executed
call    1 never executed
------------------
        -: 3802:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3803:void TestEventRepeater::Append(TestEventListener* listener) {
        1: 3804:  listeners_.push_back(listener);
        1: 3804-block  0
call    0 returned 1
        1: 3805:}
        -: 3806:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3807:TestEventListener* TestEventRepeater::Release(TestEventListener* listener) {
       1*: 3808:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3808-block  0
    %%%%%: 3808-block  1
        1: 3808-block  2
call    0 returned 1
branch  1 taken 0
branch  2 taken 1 (fallthrough)
    #####: 3809:    if (listeners_[i] == listener) {
    %%%%%: 3809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3810:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3810-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3810-block  1
    $$$$$: 3810-block  2
    #####: 3811:      return listener;
    %%%%%: 3811-block  0
        -: 3812:    }
        -: 3813:  }
        -: 3814:
        1: 3815:  return nullptr;
        1: 3815-block  0
        -: 3816:}
        -: 3817:
        -: 3818:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3819:// This defines a member that forwards the call to all listeners.
        -: 3820:#define GTEST_REPEATER_METHOD_(Name, Type)              \
        -: 3821:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3822:    if (forwarding_enabled_) {                          \
        -: 3823:      for (size_t i = 0; i < listeners_.size(); i++) {  \
        -: 3824:        listeners_[i]->Name(parameter);                 \
        -: 3825:      }                                                 \
        -: 3826:    }                                                   \
        -: 3827:  }
        -: 3828:// This defines a member that forwards the call to all listeners in reverse
        -: 3829:// order.
        -: 3830:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3831:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3832:    if (forwarding_enabled_) {                          \
        -: 3833:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3834:        listeners_[i - 1]->Name(parameter);             \
        -: 3835:      }                                                 \
        -: 3836:    }                                                   \
        -: 3837:  }
        -: 3838:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3839:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3839-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3839-block  1
        1: 3839-block  2
call    2 returned 1
call    3 returned 1
        2: 3839-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3840:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3840-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3840-block  1
        1: 3840-block  2
call    2 returned 1
call    3 returned 1
        2: 3840-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3841://  Legacy API is deprecated but still available
        -: 3842:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3843:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
        1: 3843-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3843-block  1
        1: 3843-block  2
call    2 returned 1
call    3 returned 1
        2: 3843-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3844:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3845:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
        1: 3845-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3845-block  1
        1: 3845-block  2
call    2 returned 1
call    3 returned 1
        2: 3845-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 1 returned 100% blocks executed 100%
        2: 3846:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
        1: 3846-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3846-block  1
        1: 3846-block  2
call    2 returned 1
call    3 returned 1
        2: 3846-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3847:GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
    %%%%%: 3847-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3847-block  1
    %%%%%: 3847-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3847-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3848:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3848-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3848-block  1
    %%%%%: 3848-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3848-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3849:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3849-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3849-block  1
        1: 3849-block  2
call    2 returned 1
call    3 returned 1
        2: 3849-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3850:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3850-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3850-block  1
call    2 returned 1
        1: 3850-block  2
call    3 returned 1
call    4 returned 1
        2: 3850-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3851:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3851-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3851-block  1
call    2 returned 1
        1: 3851-block  2
call    3 returned 1
call    4 returned 1
        2: 3851-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 1 returned 100% blocks executed 100%
        2: 3852:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
        1: 3852-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3852-block  1
call    2 returned 1
        1: 3852-block  2
call    3 returned 1
call    4 returned 1
        2: 3852-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3853://  Legacy API is deprecated but still available
        -: 3854:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3855:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
        1: 3855-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3855-block  1
call    2 returned 1
        1: 3855-block  2
call    3 returned 1
call    4 returned 1
        2: 3855-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3856:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3857:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
        1: 3857-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3857-block  1
call    2 returned 1
        1: 3857-block  2
call    3 returned 1
call    4 returned 1
        2: 3857-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3858:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3858-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3858-block  1
call    2 returned 1
        1: 3858-block  2
call    3 returned 1
call    4 returned 1
        2: 3858-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3859:
        -: 3860:#undef GTEST_REPEATER_METHOD_
        -: 3861:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3862:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3863:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3864:                                             int iteration) {
        1: 3865:  if (forwarding_enabled_) {
        1: 3865-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3866:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3866-block  0
        2: 3866-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3867:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3867-block  0
call    0 returned 1
call    1 returned 1
        -: 3868:    }
        -: 3869:  }
        1: 3870:}
        -: 3871:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3872:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3873:                                           int iteration) {
        1: 3874:  if (forwarding_enabled_) {
        1: 3874-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3875:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3875-block  0
call    0 returned 1
        2: 3875-block  1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3876:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3876-block  0
call    0 returned 1
call    1 returned 1
        -: 3877:    }
        -: 3878:  }
        1: 3879:}
        -: 3880:
        -: 3881:// End TestEventRepeater
        -: 3882:
        -: 3883:#if GTEST_HAS_FILE_SYSTEM
        -: 3884:// This class generates an XML output file.
        -: 3885:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3886: public:
        -: 3887:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3888:
        -: 3889:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3890:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3891:
        -: 3892:  // Prints an XML summary of all unit test.
        -: 3893:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3894:                                const std::vector<TestSuite*>& test_suites);
        -: 3895:
        -: 3896: private:
        -: 3897:  // Is c a whitespace character that is normalized to a space character
        -: 3898:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEh called 0 returned 0% blocks executed 0%
    #####: 3899:  static bool IsNormalizableWhitespace(unsigned char c) {
    #####: 3900:    return c == '\t' || c == '\n' || c == '\r';
    %%%%%: 3900-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3900-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3900-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 3900-block  3
    %%%%%: 3900-block  4
    %%%%%: 3900-block  5
        -: 3901:  }
        -: 3902:
        -: 3903:  // May c appear in a well-formed XML document?
        -: 3904:  // https://www.w3.org/TR/REC-xml/#charsets
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEh called 0 returned 0% blocks executed 0%
    #####: 3905:  static bool IsValidXmlCharacter(unsigned char c) {
    #####: 3906:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3906-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3906-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3906-block  2
    %%%%%: 3906-block  3
    %%%%%: 3906-block  4
        -: 3907:  }
        -: 3908:
        -: 3909:  // Returns an XML-escaped copy of the input string str.  If
        -: 3910:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3911:  // value, and normalizable whitespace is preserved by replacing it
        -: 3912:  // with character references.
        -: 3913:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3914:
        -: 3915:  // Returns the given string with all characters invalid in XML removed.
        -: 3916:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3917:
        -: 3918:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3919:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3920:    return EscapeXml(str, true);
    %%%%%: 3920-block  0
call    0 never executed
        -: 3921:  }
        -: 3922:
        -: 3923:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3924:  static std::string EscapeXmlText(const char* str) {
        -: 3925:    return EscapeXml(str, false);
        -: 3926:  }
        -: 3927:
        -: 3928:  // Verifies that the given attribute belongs to the given element and
        -: 3929:  // streams the attribute as XML.
        -: 3930:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3931:                                 const std::string& element_name,
        -: 3932:                                 const std::string& name,
        -: 3933:                                 const std::string& value);
        -: 3934:
        -: 3935:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3936:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3937:
        -: 3938:  // Streams a test suite XML stanza containing the given test result.
        -: 3939:  //
        -: 3940:  // Requires: result.Failed()
        -: 3941:  static void OutputXmlTestSuiteForTestResult(::std::ostream* stream,
        -: 3942:                                              const TestResult& result);
        -: 3943:
        -: 3944:  // Streams an XML representation of a TestResult object.
        -: 3945:  static void OutputXmlTestResult(::std::ostream* stream,
        -: 3946:                                  const TestResult& result);
        -: 3947:
        -: 3948:  // Streams an XML representation of a TestInfo object.
        -: 3949:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3950:                                const char* test_suite_name,
        -: 3951:                                const TestInfo& test_info);
        -: 3952:
        -: 3953:  // Prints an XML representation of a TestSuite object
        -: 3954:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 3955:                                const TestSuite& test_suite);
        -: 3956:
        -: 3957:  // Prints an XML summary of unit_test to output stream out.
        -: 3958:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3959:                               const UnitTest& unit_test);
        -: 3960:
        -: 3961:  // Produces a string representing the test properties in a result as space
        -: 3962:  // delimited XML attributes based on the property key="value" pairs.
        -: 3963:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3964:  // to delimit this attribute from prior attributes.
        -: 3965:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 3966:
        -: 3967:  // Streams an XML representation of the test properties of a TestResult
        -: 3968:  // object.
        -: 3969:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 3970:                                      const TestResult& result);
        -: 3971:
        -: 3972:  // The output file.
        -: 3973:  const std::string output_file_;
        -: 3974:
        -: 3975:  XmlUnitTestResultPrinter(const XmlUnitTestResultPrinter&) = delete;
        -: 3976:  XmlUnitTestResultPrinter& operator=(const XmlUnitTestResultPrinter&) = delete;
        -: 3977:};
        -: 3978:
        -: 3979:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 3980:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 3981:    : output_file_(output_file) {
    %%%%%: 3981-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3981-block  1
call    5 never executed
    $$$$$: 3981-block  2
call    6 never executed
    $$$$$: 3981-block  3
    #####: 3982:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3983:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 3983-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3983-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3983-block  2
call    7 never executed
    $$$$$: 3983-block  3
call    8 never executed
    $$$$$: 3983-block  4
        -: 3984:  }
    #####: 3985:}
    %%%%%: 3985-block  0
    $$$$$: 3985-block  1
call    0 never executed
    $$$$$: 3985-block  2
call    1 never executed
        -: 3986:
        -: 3987:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3988:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3989:                                                  int /*iteration*/) {
    #####: 3990:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 3990-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3991:  std::stringstream stream;
    %%%%%: 3991-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3992:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 3992-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3993:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 3993-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3993-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 3994:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3995:}
    %%%%%: 3995-block  0
call    0 never executed
    $$$$$: 3995-block  1
call    1 never executed
        -: 3996:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 3997:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 3998:    const std::vector<TestSuite*>& test_suites) {
    #####: 3999:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 3999-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4000:  std::stringstream stream;
    %%%%%: 4000-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4001:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 4001-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4002:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4002-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4002-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 4003:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4004:}
    %%%%%: 4004-block  0
call    0 never executed
    $$$$$: 4004-block  1
call    1 never executed
        -: 4005:
        -: 4006:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4007:// is true, the text is meant to appear as an attribute value, and
        -: 4008:// normalizable whitespace is preserved by replacing it with character
        -: 4009:// references.
        -: 4010://
        -: 4011:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4012:// It is expected that most, if not all, of the text processed by this
        -: 4013:// module will consist of ordinary English text.
        -: 4014:// If this module is ever modified to produce version 1.1 XML output,
        -: 4015:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4016:std::string XmlUnitTestResultPrinter::EscapeXml(const std::string& str,
        -: 4017:                                                bool is_attribute) {
    #####: 4018:  Message m;
    %%%%%: 4018-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4019:
    #####: 4020:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4020-block  0
    %%%%%: 4020-block  1
    %%%%%: 4020-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4021:    const char ch = str[i];
    %%%%%: 4021-block  0
call    0 never executed
    #####: 4022:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4023:      case '<':
    #####: 4024:        m << "&lt;";
    %%%%%: 4024-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4025:        break;
    %%%%%: 4025-block  0
    #####: 4026:      case '>':
    #####: 4027:        m << "&gt;";
    %%%%%: 4027-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4028:        break;
    %%%%%: 4028-block  0
    #####: 4029:      case '&':
    #####: 4030:        m << "&amp;";
    %%%%%: 4030-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4031:        break;
    %%%%%: 4031-block  0
    #####: 4032:      case '\'':
    #####: 4033:        if (is_attribute)
    %%%%%: 4033-block  0
branch  0 never executed
branch  1 never executed
    #####: 4034:          m << "&apos;";
    %%%%%: 4034-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4035:        else
    #####: 4036:          m << '\'';
    %%%%%: 4036-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4036-block  1
    $$$$$: 4036-block  2
    #####: 4037:        break;
    %%%%%: 4037-block  0
    #####: 4038:      case '"':
    #####: 4039:        if (is_attribute)
    %%%%%: 4039-block  0
branch  0 never executed
branch  1 never executed
    #####: 4040:          m << "&quot;";
    %%%%%: 4040-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4041:        else
    #####: 4042:          m << '"';
    %%%%%: 4042-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4042-block  1
    $$$$$: 4042-block  2
    #####: 4043:        break;
    %%%%%: 4043-block  0
    #####: 4044:      default:
    #####: 4045:        if (IsValidXmlCharacter(static_cast<unsigned char>(ch))) {
    %%%%%: 4045-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4046:          if (is_attribute &&
    %%%%%: 4046-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4046-block  1
    %%%%%: 4046-block  2
    %%%%%: 4046-block  3
branch  4 never executed
branch  5 never executed
    #####: 4047:              IsNormalizableWhitespace(static_cast<unsigned char>(ch)))
    %%%%%: 4047-block  0
call    0 never executed
    #####: 4048:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4048-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4048-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4048-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4048-block  3
call    9 never executed
    $$$$$: 4048-block  4
call   10 never executed
    $$$$$: 4048-block  5
    #####: 4049:              << ";";
    %%%%%: 4049-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4050:          else
    #####: 4051:            m << ch;
    %%%%%: 4051-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4052:        }
    #####: 4053:        break;
    %%%%%: 4053-block  0
        -: 4054:    }
        -: 4055:  }
        -: 4056:
    #####: 4057:  return m.GetString();
    %%%%%: 4057-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4057-block  1
    #####: 4058:}
    %%%%%: 4058-block  0
call    0 never executed
    $$$$$: 4058-block  1
call    1 never executed
        -: 4059:
        -: 4060:// Returns the given string with all characters invalid in XML removed.
        -: 4061:// Currently invalid characters are dropped from the string. An
        -: 4062:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4063:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4064:    const std::string& str) {
    #####: 4065:  std::string output;
    %%%%%: 4065-block  0
call    0 never executed
    #####: 4066:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4067:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4067-block  0
call    0 never executed
    %%%%%: 4067-block  1
call    1 never executed
    %%%%%: 4067-block  2
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4068:    if (IsValidXmlCharacter(static_cast<unsigned char>(*it)))
    %%%%%: 4068-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4069:      output.push_back(*it);
    %%%%%: 4069-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4070:
    #####: 4071:  return output;
    %%%%%: 4071-block  0
    %%%%%: 4071-block  1
    =====: 4072:}
    $$$$$: 4072-block  0
call    0 never executed
        -: 4073:
        -: 4074:// The following routines generate an XML representation of a UnitTest
        -: 4075:// object.
        -: 4076://
        -: 4077:// This is how Google Test concepts map to the DTD:
        -: 4078://
        -: 4079:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4080://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4081://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4082://       <failure message="...">...</failure>
        -: 4083://       <failure message="...">...</failure>
        -: 4084://       <failure message="...">...</failure>
        -: 4085://                                     <-- individual assertion failures
        -: 4086://     </testcase>
        -: 4087://   </testsuite>
        -: 4088:// </testsuites>
        -: 4089:
        -: 4090:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4091:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4092:  ::std::stringstream ss;
    %%%%%: 4092-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4093:  // For the exact N seconds, makes sure output has a trailing decimal point.
        -: 4094:  // Sets precision so that we won't have many trailing zeros (e.g., 300 ms
        -: 4095:  // will be just 0.3, 410 ms 0.41, and so on)
    #####: 4096:  ss << std::fixed
    %%%%%: 4096-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4097:     << std::setprecision(
    #####: 4098:            ms % 1000 == 0 ? 0 : (ms % 100 == 0 ? 1 : (ms % 10 == 0 ? 2 : 3)))
    %%%%%: 4098-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4098-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4098-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 4098-block  3
    %%%%%: 4098-block  4
    %%%%%: 4098-block  5
    %%%%%: 4098-block  6
    %%%%%: 4098-block  7
    %%%%%: 4098-block  8
    %%%%%: 4098-block  9
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4099:     << std::showpoint;
    %%%%%: 4099-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4100:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4100-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4101:  return ss.str();
    %%%%%: 4101-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4101-block  1
    #####: 4102:}
    %%%%%: 4102-block  0
call    0 never executed
    $$$$$: 4102-block  1
call    1 never executed
        -: 4103:
function _ZN7testing8internalL17PortableLocaltimeExP2tm called 0 returned 0% blocks executed 0%
    #####: 4104:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4105:#if defined(_MSC_VER)
        -: 4106:  return localtime_s(out, &seconds) == 0;
        -: 4107:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4108:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4109:  // Windows' localtime(), which has a thread-local tm buffer.
    #####: 4110:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
    %%%%%: 4110-block  0
call    0 never executed
    #####: 4111:  if (tm_ptr == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 4111-block  0
    #####: 4112:  *out = *tm_ptr;
    #####: 4113:  return true;
    %%%%%: 4113-block  0
        -: 4114:#elif defined(__STDC_LIB_EXT1__)
        -: 4115:  // Uses localtime_s when available as localtime_r is only available from
        -: 4116:  // C23 standard.
        -: 4117:  return localtime_s(&seconds, out) != nullptr;
        -: 4118:#else
        -: 4119:  return localtime_r(&seconds, out) != nullptr;
        -: 4120:#endif
        -: 4121:}
        -: 4122:
        -: 4123:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4124:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4125:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4126:  struct tm time_struct;
    #####: 4127:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4127-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4127-block  1
branch  3 never executed
branch  4 never executed
    #####: 4128:    return "";
    %%%%%: 4128-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4128-block  1
call    4 never executed
    $$$$$: 4128-block  2
call    5 never executed
    $$$$$: 4128-block  3
        -: 4129:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4130:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4130-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4130-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4130-block  3
call   11 never executed
    $$$$$: 4130-block  4
    $$$$$: 4130-block  5
call   12 never executed
    $$$$$: 4130-block  6
    $$$$$: 4130-block  7
call   13 never executed
    $$$$$: 4130-block  8
    $$$$$: 4130-block  9
    #####: 4131:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4131-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4131-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4131-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4131-block  3
call   12 never executed
    $$$$$: 4131-block  4
    $$$$$: 4131-block  5
call   13 never executed
    $$$$$: 4131-block  6
    $$$$$: 4131-block  7
call   14 never executed
    $$$$$: 4131-block  8
    #####: 4132:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4132-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4132-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4132-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4132-block  3
call   12 never executed
    $$$$$: 4132-block  4
    $$$$$: 4132-block  5
call   13 never executed
    $$$$$: 4132-block  6
    $$$$$: 4132-block  7
call   14 never executed
    $$$$$: 4132-block  8
    #####: 4133:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4133-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4133-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4133-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4133-block  3
call   12 never executed
    $$$$$: 4133-block  4
    $$$$$: 4133-block  5
call   13 never executed
    $$$$$: 4133-block  6
    $$$$$: 4133-block  7
call   14 never executed
    $$$$$: 4133-block  8
    #####: 4134:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4134-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4134-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4134-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4134-block  3
call   12 never executed
    $$$$$: 4134-block  4
    $$$$$: 4134-block  5
call   13 never executed
    $$$$$: 4134-block  6
    $$$$$: 4134-block  7
call   14 never executed
    $$$$$: 4134-block  8
    #####: 4135:         String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4135-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4135-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4135-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4135-block  3
call    9 never executed
    $$$$$: 4135-block  4
    $$$$$: 4135-block  5
call   10 never executed
    $$$$$: 4135-block  6
    #####: 4136:         String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4136-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4136-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4136-block  2
call    7 never executed
    $$$$$: 4136-block  3
        -: 4137:}
        -: 4138:
        -: 4139:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4140:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4141:                                                     const char* data) {
    #####: 4142:  const char* segment = data;
    #####: 4143:  *stream << "<![CDATA[";
    %%%%%: 4143-block  0
call    0 never executed
        -: 4144:  for (;;) {
    #####: 4145:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4146:    if (next_segment != nullptr) {
    %%%%%: 4146-block  0
branch  0 never executed
branch  1 never executed
    #####: 4147:      stream->write(segment,
    #####: 4148:                    static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4148-block  0
call    0 never executed
    #####: 4149:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 4150:      segment = next_segment + strlen("]]>");
        -: 4151:    } else {
    #####: 4152:      *stream << segment;
    %%%%%: 4152-block  0
call    0 never executed
    #####: 4153:      break;
        -: 4154:    }
    #####: 4155:  }
    %%%%%: 4155-block  0
    #####: 4156:  *stream << "]]>";
    %%%%%: 4156-block  0
call    0 never executed
    #####: 4157:}
        -: 4158:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4159:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4160:    std::ostream* stream, const std::string& element_name,
        -: 4161:    const std::string& name, const std::string& value) {
        -: 4162:  const std::vector<std::string>& allowed_names =
    #####: 4163:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4163-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4164:
    #####: 4165:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4165-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4165-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4165-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4165-block  3
call   13 never executed
    %%%%%: 4165-block  4
call   14 never executed
    $$$$$: 4165-block  5
    $$$$$: 4165-block  6
call   15 never executed
    $$$$$: 4165-block  7
        -: 4166:               allowed_names.end())
        -: 4167:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4168:      << ">.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4168-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4168-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4168-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4168-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4168-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4169:
    #####: 4170:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4170-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4170-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4170-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4170-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4170-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4170-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4170-block  6
call   18 never executed
    $$$$$: 4170-block  7
call   19 never executed
    $$$$$: 4170-block  8
    #####: 4171:}
call    0 never executed
    $$$$$: 4171-block  0
call    1 never executed
        -: 4172:
        -: 4173:// Streams a test suite XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter31OutputXmlTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4174:void XmlUnitTestResultPrinter::OutputXmlTestSuiteForTestResult(
        -: 4175:    ::std::ostream* stream, const TestResult& result) {
        -: 4176:  // Output the boilerplate for a minimal test suite with one test.
    #####: 4177:  *stream << "  <testsuite";
    %%%%%: 4177-block  0
call    0 never executed
    #####: 4178:  OutputXmlAttribute(stream, "testsuite", "name", "NonTestSuiteFailure");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4178-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4178-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4178-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4178-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4178-block  4
call   21 never executed
    $$$$$: 4178-block  5
    $$$$$: 4178-block  6
call   22 never executed
    $$$$$: 4178-block  7
    $$$$$: 4178-block  8
call   23 never executed
    $$$$$: 4178-block  9
    $$$$$: 4178-block 10
call   24 never executed
    $$$$$: 4178-block 11
    $$$$$: 4178-block 12
call   25 never executed
    $$$$$: 4178-block 13
    $$$$$: 4178-block 14
call   26 never executed
    $$$$$: 4178-block 15
call   27 never executed
    #####: 4179:  OutputXmlAttribute(stream, "testsuite", "test", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4179-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4179-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4179-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4179-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4179-block  4
call   21 never executed
    $$$$$: 4179-block  5
    $$$$$: 4179-block  6
call   22 never executed
    $$$$$: 4179-block  7
    $$$$$: 4179-block  8
call   23 never executed
    $$$$$: 4179-block  9
    $$$$$: 4179-block 10
call   24 never executed
    $$$$$: 4179-block 11
    $$$$$: 4179-block 12
call   25 never executed
    $$$$$: 4179-block 13
    $$$$$: 4179-block 14
call   26 never executed
    $$$$$: 4179-block 15
call   27 never executed
    #####: 4180:  OutputXmlAttribute(stream, "testsuite", "failures", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4180-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4180-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4180-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4180-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4180-block  4
call   21 never executed
    $$$$$: 4180-block  5
    $$$$$: 4180-block  6
call   22 never executed
    $$$$$: 4180-block  7
    $$$$$: 4180-block  8
call   23 never executed
    $$$$$: 4180-block  9
    $$$$$: 4180-block 10
call   24 never executed
    $$$$$: 4180-block 11
    $$$$$: 4180-block 12
call   25 never executed
    $$$$$: 4180-block 13
    $$$$$: 4180-block 14
call   26 never executed
    $$$$$: 4180-block 15
call   27 never executed
    #####: 4181:  OutputXmlAttribute(stream, "testsuite", "disabled", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4181-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4181-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4181-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4181-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4181-block  4
call   21 never executed
    $$$$$: 4181-block  5
    $$$$$: 4181-block  6
call   22 never executed
    $$$$$: 4181-block  7
    $$$$$: 4181-block  8
call   23 never executed
    $$$$$: 4181-block  9
    $$$$$: 4181-block 10
call   24 never executed
    $$$$$: 4181-block 11
    $$$$$: 4181-block 12
call   25 never executed
    $$$$$: 4181-block 13
    $$$$$: 4181-block 14
call   26 never executed
    $$$$$: 4181-block 15
call   27 never executed
    #####: 4182:  OutputXmlAttribute(stream, "testsuite", "skipped", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4182-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4182-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4182-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4182-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4182-block  4
call   21 never executed
    $$$$$: 4182-block  5
    $$$$$: 4182-block  6
call   22 never executed
    $$$$$: 4182-block  7
    $$$$$: 4182-block  8
call   23 never executed
    $$$$$: 4182-block  9
    $$$$$: 4182-block 10
call   24 never executed
    $$$$$: 4182-block 11
    $$$$$: 4182-block 12
call   25 never executed
    $$$$$: 4182-block 13
    $$$$$: 4182-block 14
call   26 never executed
    $$$$$: 4182-block 15
call   27 never executed
    #####: 4183:  OutputXmlAttribute(stream, "testsuite", "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4183-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4183-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4183-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4183-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4183-block  4
call   21 never executed
    $$$$$: 4183-block  5
    $$$$$: 4183-block  6
call   22 never executed
    $$$$$: 4183-block  7
    $$$$$: 4183-block  8
call   23 never executed
    $$$$$: 4183-block  9
    $$$$$: 4183-block 10
call   24 never executed
    $$$$$: 4183-block 11
    $$$$$: 4183-block 12
call   25 never executed
    $$$$$: 4183-block 13
    $$$$$: 4183-block 14
call   26 never executed
    $$$$$: 4183-block 15
call   27 never executed
    #####: 4184:  OutputXmlAttribute(stream, "testsuite", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4184-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4184-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4184-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4184-block  3
call   15 never executed
    $$$$$: 4184-block  4
    $$$$$: 4184-block  5
call   16 never executed
    $$$$$: 4184-block  6
    $$$$$: 4184-block  7
call   17 never executed
    $$$$$: 4184-block  8
    $$$$$: 4184-block  9
call   18 never executed
    $$$$$: 4184-block 10
    #####: 4185:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4185-block  0
call    3 never executed
    $$$$$: 4185-block  1
call    4 never executed
    #####: 4186:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4186-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4186-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4186-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4186-block  3
call   15 never executed
    $$$$$: 4186-block  4
    $$$$$: 4186-block  5
call   16 never executed
    $$$$$: 4186-block  6
    $$$$$: 4186-block  7
call   17 never executed
    $$$$$: 4186-block  8
    $$$$$: 4186-block  9
call   18 never executed
    $$$$$: 4186-block 10
        -: 4187:      stream, "testsuite", "timestamp",
    #####: 4188:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4188-block  0
call    3 never executed
    $$$$$: 4188-block  1
call    4 never executed
    #####: 4189:  *stream << ">";
call    0 never executed
        -: 4190:
        -: 4191:  // Output the boilerplate for a minimal test case with a single test.
    #####: 4192:  *stream << "    <testcase";
call    0 never executed
    #####: 4193:  OutputXmlAttribute(stream, "testcase", "name", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4193-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4193-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4193-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4193-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4193-block  4
call   21 never executed
    $$$$$: 4193-block  5
    $$$$$: 4193-block  6
call   22 never executed
    $$$$$: 4193-block  7
    $$$$$: 4193-block  8
call   23 never executed
    $$$$$: 4193-block  9
    $$$$$: 4193-block 10
call   24 never executed
    $$$$$: 4193-block 11
    $$$$$: 4193-block 12
call   25 never executed
    $$$$$: 4193-block 13
    $$$$$: 4193-block 14
call   26 never executed
    $$$$$: 4193-block 15
call   27 never executed
    #####: 4194:  OutputXmlAttribute(stream, "testcase", "status", "run");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4194-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4194-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4194-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4194-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4194-block  4
call   21 never executed
    $$$$$: 4194-block  5
    $$$$$: 4194-block  6
call   22 never executed
    $$$$$: 4194-block  7
    $$$$$: 4194-block  8
call   23 never executed
    $$$$$: 4194-block  9
    $$$$$: 4194-block 10
call   24 never executed
    $$$$$: 4194-block 11
    $$$$$: 4194-block 12
call   25 never executed
    $$$$$: 4194-block 13
    $$$$$: 4194-block 14
call   26 never executed
    $$$$$: 4194-block 15
call   27 never executed
    #####: 4195:  OutputXmlAttribute(stream, "testcase", "result", "completed");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4195-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4195-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4195-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4195-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4195-block  4
call   21 never executed
    $$$$$: 4195-block  5
    $$$$$: 4195-block  6
call   22 never executed
    $$$$$: 4195-block  7
    $$$$$: 4195-block  8
call   23 never executed
    $$$$$: 4195-block  9
    $$$$$: 4195-block 10
call   24 never executed
    $$$$$: 4195-block 11
    $$$$$: 4195-block 12
call   25 never executed
    $$$$$: 4195-block 13
    $$$$$: 4195-block 14
call   26 never executed
    $$$$$: 4195-block 15
call   27 never executed
    #####: 4196:  OutputXmlAttribute(stream, "testcase", "classname", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4196-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4196-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4196-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4196-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4196-block  4
call   21 never executed
    $$$$$: 4196-block  5
    $$$$$: 4196-block  6
call   22 never executed
    $$$$$: 4196-block  7
    $$$$$: 4196-block  8
call   23 never executed
    $$$$$: 4196-block  9
    $$$$$: 4196-block 10
call   24 never executed
    $$$$$: 4196-block 11
    $$$$$: 4196-block 12
call   25 never executed
    $$$$$: 4196-block 13
    $$$$$: 4196-block 14
call   26 never executed
    $$$$$: 4196-block 15
call   27 never executed
    #####: 4197:  OutputXmlAttribute(stream, "testcase", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4197-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4197-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4197-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4197-block  3
call   15 never executed
    $$$$$: 4197-block  4
    $$$$$: 4197-block  5
call   16 never executed
    $$$$$: 4197-block  6
    $$$$$: 4197-block  7
call   17 never executed
    $$$$$: 4197-block  8
    $$$$$: 4197-block  9
call   18 never executed
    $$$$$: 4197-block 10
    #####: 4198:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4198-block  0
call    3 never executed
    $$$$$: 4198-block  1
call    4 never executed
    #####: 4199:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4199-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4199-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4199-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4199-block  3
call   15 never executed
    $$$$$: 4199-block  4
    $$$$$: 4199-block  5
call   16 never executed
    $$$$$: 4199-block  6
    $$$$$: 4199-block  7
call   17 never executed
    $$$$$: 4199-block  8
    $$$$$: 4199-block  9
call   18 never executed
    $$$$$: 4199-block 10
        -: 4200:      stream, "testcase", "timestamp",
    #####: 4201:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4201-block  0
call    3 never executed
        -: 4202:
        -: 4203:  // Output the actual test result.
    #####: 4204:  OutputXmlTestResult(stream, result);
call    0 never executed
        -: 4205:
        -: 4206:  // Complete the test suite.
    #####: 4207:  *stream << "  </testsuite>\n";
call    0 never executed
    #####: 4208:}
        -: 4209:
        -: 4210:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4211:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4212:                                                 const char* test_suite_name,
        -: 4213:                                                 const TestInfo& test_info) {
    #####: 4214:  const TestResult& result = *test_info.result();
    %%%%%: 4214-block  0
call    0 never executed
    #####: 4215:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4215-block  0
        -: 4216:
    #####: 4217:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4218:    return;
    %%%%%: 4218-block  0
        -: 4219:  }
        -: 4220:
    #####: 4221:  *stream << "    <testcase";
    %%%%%: 4221-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4222:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4222-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4222-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4222-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4222-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4222-block  4
call   16 never executed
    $$$$$: 4222-block  5
    $$$$$: 4222-block  6
call   17 never executed
    $$$$$: 4222-block  7
    $$$$$: 4222-block  8
call   18 never executed
    $$$$$: 4222-block  9
    $$$$$: 4222-block 10
call   19 never executed
    $$$$$: 4222-block 11
        -: 4223:
    #####: 4224:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4225:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4225-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4225-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4225-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4225-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4225-block  4
call   16 never executed
    $$$$$: 4225-block  5
    $$$$$: 4225-block  6
call   17 never executed
    $$$$$: 4225-block  7
    $$$$$: 4225-block  8
call   18 never executed
    $$$$$: 4225-block  9
    $$$$$: 4225-block 10
call   19 never executed
    $$$$$: 4225-block 11
        -: 4226:                       test_info.value_param());
        -: 4227:  }
    #####: 4228:  if (test_info.type_param() != nullptr) {
    %%%%%: 4228-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4229:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4229-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4229-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4229-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4229-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4229-block  4
call   16 never executed
    $$$$$: 4229-block  5
    $$$$$: 4229-block  6
call   17 never executed
    $$$$$: 4229-block  7
    $$$$$: 4229-block  8
call   18 never executed
    $$$$$: 4229-block  9
    $$$$$: 4229-block 10
call   19 never executed
    $$$$$: 4229-block 11
        -: 4230:                       test_info.type_param());
        -: 4231:  }
        -: 4232:
    #####: 4233:  OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4233-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4233-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4233-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4233-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4233-block  4
call   16 never executed
    $$$$$: 4233-block  5
    $$$$$: 4233-block  6
call   17 never executed
    $$$$$: 4233-block  7
    $$$$$: 4233-block  8
call   18 never executed
    $$$$$: 4233-block  9
    $$$$$: 4233-block 10
call   19 never executed
    $$$$$: 4233-block 11
    #####: 4234:  OutputXmlAttribute(stream, kTestsuite, "line",
    %%%%%: 4234-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4234-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4234-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4234-block  3
call    9 never executed
    $$$$$: 4234-block  4
    $$$$$: 4234-block  5
call   10 never executed
    $$$$$: 4234-block  6
    #####: 4235:                     StreamableToString(test_info.line()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4235-block  0
call    5 never executed
    $$$$$: 4235-block  1
    $$$$$: 4235-block  2
    #####: 4236:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4237:    *stream << " />\n";
    %%%%%: 4237-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4238:    return;
    %%%%%: 4238-block  0
        -: 4239:  }
        -: 4240:
    #####: 4241:  OutputXmlAttribute(stream, kTestsuite, "status",
    %%%%%: 4241-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4241-block  1
    %%%%%: 4241-block  2
    %%%%%: 4241-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4241-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4241-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4241-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4241-block  7
call   17 never executed
    $$$$$: 4241-block  8
    $$$$$: 4241-block  9
call   18 never executed
    $$$$$: 4241-block 10
    $$$$$: 4241-block 11
call   19 never executed
    $$$$$: 4241-block 12
    $$$$$: 4241-block 13
call   20 never executed
    $$$$$: 4241-block 14
    #####: 4242:                     test_info.should_run() ? "run" : "notrun");
call    0 never executed
    #####: 4243:  OutputXmlAttribute(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4243-block  0
    %%%%%: 4243-block  1
    %%%%%: 4243-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4243-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4243-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4243-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4243-block  6
call   17 never executed
    $$$$$: 4243-block  7
    $$$$$: 4243-block  8
call   18 never executed
    $$$$$: 4243-block  9
    $$$$$: 4243-block 10
call   19 never executed
    $$$$$: 4243-block 11
    $$$$$: 4243-block 12
call   20 never executed
    $$$$$: 4243-block 13
    #####: 4244:                     test_info.should_run()
call    0 never executed
    #####: 4245:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4245-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4245-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4245-block  2
    %%%%%: 4245-block  3
        -: 4246:                         : "suppressed");
    #####: 4247:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4247-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4247-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4247-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4247-block  3
call    9 never executed
    $$$$$: 4247-block  4
    $$$$$: 4247-block  5
call   10 never executed
    $$$$$: 4247-block  6
    #####: 4248:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4248-block  0
call    5 never executed
    $$$$$: 4248-block  1
    #####: 4249:  OutputXmlAttribute(
    %%%%%: 4249-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4249-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4249-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4249-block  3
call    9 never executed
    $$$$$: 4249-block  4
    $$$$$: 4249-block  5
call   10 never executed
    $$$$$: 4249-block  6
        -: 4250:      stream, kTestsuite, "timestamp",
    #####: 4251:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4251-block  0
call    5 never executed
    $$$$$: 4251-block  1
    #####: 4252:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4252-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4252-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4252-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4252-block  3
call   15 never executed
    $$$$$: 4252-block  4
    $$$$$: 4252-block  5
call   16 never executed
    $$$$$: 4252-block  6
    $$$$$: 4252-block  7
call   17 never executed
    $$$$$: 4252-block  8
    $$$$$: 4252-block  9
call   18 never executed
    $$$$$: 4252-block 10
        -: 4253:
    #####: 4254:  OutputXmlTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4255:}
    %%%%%: 4255-block  0
    %%%%%: 4255-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4255-block  2
call    3 never executed
        -: 4256:
function _ZN7testing8internal24XmlUnitTestResultPrinter19OutputXmlTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4257:void XmlUnitTestResultPrinter::OutputXmlTestResult(::std::ostream* stream,
        -: 4258:                                                   const TestResult& result) {
    #####: 4259:  int failures = 0;
    #####: 4260:  int skips = 0;
    #####: 4261:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4261-block  0
    %%%%%: 4261-block  1
    %%%%%: 4261-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4262:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4262-block  0
call    0 never executed
    #####: 4263:    if (part.failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4264:      if (++failures == 1 && skips == 0) {
    %%%%%: 4264-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4264-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4264-block  2
    %%%%%: 4264-block  3
    %%%%%: 4264-block  4
branch  4 never executed
branch  5 never executed
    #####: 4265:        *stream << ">\n";
    %%%%%: 4265-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4266:      }
        -: 4267:      const std::string location =
        -: 4268:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4269:                                                          part.line_number());
    %%%%%: 4269-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4270:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4270-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4270-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4270-block  2
    #####: 4271:      *stream << "      <failure message=\"" << EscapeXmlAttribute(summary)
    %%%%%: 4271-block  0
call    0 never executed
    $$$$$: 4271-block  1
call    1 never executed
    $$$$$: 4271-block  2
    #####: 4272:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4272-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4272-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4272-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4273:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4273-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4273-block  1
    #####: 4274:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4274-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4274-block  1
call    7 never executed
    $$$$$: 4274-block  2
call    8 never executed
    $$$$$: 4274-block  3
    #####: 4275:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4276:    } else if (part.skipped()) {
    %%%%%: 4276-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%: 4276-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4276-block  2
call    6 never executed
    $$$$$: 4276-block  3
call    7 never executed
    $$$$$: 4276-block  4
call    8 never executed
    #####: 4277:      if (++skips == 1 && failures == 0) {
    %%%%%: 4277-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4277-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4277-block  2
    %%%%%: 4277-block  3
    %%%%%: 4277-block  4
branch  4 never executed
branch  5 never executed
    #####: 4278:        *stream << ">\n";
    %%%%%: 4278-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4279:      }
        -: 4280:      const std::string location =
        -: 4281:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4282:                                                          part.line_number());
    %%%%%: 4282-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4283:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4283-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4283-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4283-block  2
        -: 4284:      *stream << "      <skipped message=\""
    #####: 4285:              << EscapeXmlAttribute(summary.c_str()) << "\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4285-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4285-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4285-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4285-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4285-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4285-block  5
call   20 never executed
    $$$$$: 4285-block  6
    $$$$$: 4285-block  7
call   21 never executed
    $$$$$: 4285-block  8
    $$$$$: 4285-block  9
call   22 never executed
    $$$$$: 4285-block 10
    #####: 4286:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4286-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4286-block  1
    #####: 4287:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4287-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4287-block  1
call    7 never executed
    $$$$$: 4287-block  2
call    8 never executed
    $$$$$: 4287-block  3
    #####: 4288:      *stream << "</skipped>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4289:    }
    %%%%%: 4289-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4289-block  1
call    3 never executed
    $$$$$: 4289-block  2
call    4 never executed
    $$$$$: 4289-block  3
call    5 never executed
        -: 4290:  }
        -: 4291:
    #####: 4292:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4292-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4292-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4292-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4292-block  3
    %%%%%: 4292-block  4
    %%%%%: 4292-block  5
branch  7 never executed
branch  8 never executed
    #####: 4293:    *stream << " />\n";
    %%%%%: 4293-block  0
call    0 never executed
        -: 4294:  } else {
    #####: 4295:    if (failures == 0 && skips == 0) {
    %%%%%: 4295-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4295-block  1
branch  2 never executed
branch  3 never executed
    #####: 4296:      *stream << ">\n";
    %%%%%: 4296-block  0
call    0 never executed
        -: 4297:    }
    #####: 4298:    OutputXmlTestProperties(stream, result);
    %%%%%: 4298-block  0
call    0 never executed
    #####: 4299:    *stream << "    </testcase>\n";
call    0 never executed
        -: 4300:  }
    #####: 4301:}
    %%%%%: 4301-block  0
        -: 4302:
        -: 4303:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4304:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
        -: 4305:                                                 const TestSuite& test_suite) {
    #####: 4306:  const std::string kTestsuite = "testsuite";
    %%%%%: 4306-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4306-block  1
    #####: 4307:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4307-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4308:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4308-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4308-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4308-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4308-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4308-block  4
call   16 never executed
    $$$$$: 4308-block  5
    $$$$$: 4308-block  6
call   17 never executed
    $$$$$: 4308-block  7
    $$$$$: 4308-block  8
call   18 never executed
    $$$$$: 4308-block  9
    $$$$$: 4308-block 10
call   19 never executed
    $$$$$: 4308-block 11
    #####: 4309:  OutputXmlAttribute(stream, kTestsuite, "test",
    %%%%%: 4309-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4309-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4309-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4309-block  3
call    9 never executed
    $$$$$: 4309-block  4
    $$$$$: 4309-block  5
call   10 never executed
    $$$$$: 4309-block  6
    #####: 4310:                     StreamableToString(test_suite.reportable_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4310-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4310-block  1
call    7 never executed
    $$$$$: 4310-block  2
    $$$$$: 4310-block  3
    #####: 4311:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4312:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4312-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4312-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4312-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4312-block  3
call    9 never executed
    $$$$$: 4312-block  4
    $$$$$: 4312-block  5
call   10 never executed
    $$$$$: 4312-block  6
    #####: 4313:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4313-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4313-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4313-block  2
call    7 never executed
    $$$$$: 4313-block  3
    $$$$$: 4313-block  4
    #####: 4314:    OutputXmlAttribute(
    %%%%%: 4314-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4314-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4314-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4314-block  3
call    9 never executed
    $$$$$: 4314-block  4
    $$$$$: 4314-block  5
call   10 never executed
    $$$$$: 4314-block  6
        -: 4315:        stream, kTestsuite, "disabled",
    #####: 4316:        StreamableToString(test_suite.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4316-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4316-block  1
call    7 never executed
    $$$$$: 4316-block  2
    $$$$$: 4316-block  3
    #####: 4317:    OutputXmlAttribute(stream, kTestsuite, "skipped",
    %%%%%: 4317-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4317-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4317-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4317-block  3
call    9 never executed
    $$$$$: 4317-block  4
    $$$$$: 4317-block  5
call   10 never executed
    $$$$$: 4317-block  6
    #####: 4318:                       StreamableToString(test_suite.skipped_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4318-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4318-block  1
call    7 never executed
    $$$$$: 4318-block  2
    $$$$$: 4318-block  3
        -: 4319:
    #####: 4320:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4320-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4320-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4320-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4320-block  3
call   15 never executed
    $$$$$: 4320-block  4
    $$$$$: 4320-block  5
call   16 never executed
    $$$$$: 4320-block  6
    $$$$$: 4320-block  7
call   17 never executed
    $$$$$: 4320-block  8
    $$$$$: 4320-block  9
call   18 never executed
    $$$$$: 4320-block 10
        -: 4321:
    #####: 4322:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4322-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4322-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4322-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4322-block  3
call    9 never executed
    $$$$$: 4322-block  4
    $$$$$: 4322-block  5
call   10 never executed
    $$$$$: 4322-block  6
    #####: 4323:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4323-block  0
call    5 never executed
    $$$$$: 4323-block  1
    #####: 4324:    OutputXmlAttribute(
    %%%%%: 4324-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4324-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4324-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4324-block  3
call    9 never executed
    $$$$$: 4324-block  4
    $$$$$: 4324-block  5
call   10 never executed
    $$$$$: 4324-block  6
        -: 4325:        stream, kTestsuite, "timestamp",
    #####: 4326:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4326-block  0
call    5 never executed
    $$$$$: 4326-block  1
    #####: 4327:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4327-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4327-block  1
call    7 never executed
    $$$$$: 4327-block  2
call    8 never executed
    $$$$$: 4327-block  3
        -: 4328:  }
    #####: 4329:  *stream << ">\n";
    %%%%%: 4329-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4330:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4330-block  0
    %%%%%: 4330-block  1
    %%%%%: 4330-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4331:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4331-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4331-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4332:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4332-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4332-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4333:  }
    #####: 4334:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4334-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4334-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4334-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4335:}
    %%%%%: 4335-block  0
call    0 never executed
    $$$$$: 4335-block  1
call    1 never executed
        -: 4336:
        -: 4337:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4338:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
        -: 4339:                                                const UnitTest& unit_test) {
    #####: 4340:  const std::string kTestsuites = "testsuites";
    %%%%%: 4340-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4340-block  1
        -: 4341:
    #####: 4342:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4343:  *stream << "<" << kTestsuites;
    %%%%%: 4343-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4343-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4344:
    #####: 4345:  OutputXmlAttribute(stream, kTestsuites, "test",
    %%%%%: 4345-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4345-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4345-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4345-block  3
call    9 never executed
    $$$$$: 4345-block  4
    $$$$$: 4345-block  5
call   10 never executed
    $$$$$: 4345-block  6
    #####: 4346:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4346-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4346-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4346-block  2
call    7 never executed
    $$$$$: 4346-block  3
    $$$$$: 4346-block  4
    #####: 4347:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 4347-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4347-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4347-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4347-block  3
call    9 never executed
    $$$$$: 4347-block  4
    $$$$$: 4347-block  5
call   10 never executed
    $$$$$: 4347-block  6
    #####: 4348:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4348-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4348-block  1
call    7 never executed
    $$$$$: 4348-block  2
    $$$$$: 4348-block  3
    #####: 4349:  OutputXmlAttribute(
    %%%%%: 4349-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4349-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4349-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4349-block  3
call    9 never executed
    $$$$$: 4349-block  4
    $$$$$: 4349-block  5
call   10 never executed
    $$$$$: 4349-block  6
        -: 4350:      stream, kTestsuites, "disabled",
    #####: 4351:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4351-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4351-block  1
call    7 never executed
    $$$$$: 4351-block  2
    $$$$$: 4351-block  3
    #####: 4352:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4352-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4352-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4352-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4352-block  3
call   15 never executed
    $$$$$: 4352-block  4
    $$$$$: 4352-block  5
call   16 never executed
    $$$$$: 4352-block  6
    $$$$$: 4352-block  7
call   17 never executed
    $$$$$: 4352-block  8
    $$$$$: 4352-block  9
call   18 never executed
    $$$$$: 4352-block 10
    #####: 4353:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 4353-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4353-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4353-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4353-block  3
call    9 never executed
    $$$$$: 4353-block  4
    $$$$$: 4353-block  5
call   10 never executed
    $$$$$: 4353-block  6
    #####: 4354:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4354-block  0
call    5 never executed
    $$$$$: 4354-block  1
    #####: 4355:  OutputXmlAttribute(
    %%%%%: 4355-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4355-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4355-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4355-block  3
call    9 never executed
    $$$$$: 4355-block  4
    $$$$$: 4355-block  5
call   10 never executed
    $$$$$: 4355-block  6
        -: 4356:      stream, kTestsuites, "timestamp",
    #####: 4357:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4357-block  0
call    5 never executed
    $$$$$: 4357-block  1
        -: 4358:
    #####: 4359:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4360:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4360-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4360-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4360-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4360-block  3
call    9 never executed
    $$$$$: 4360-block  4
    $$$$$: 4360-block  5
call   10 never executed
    $$$$$: 4360-block  6
    #####: 4361:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4361-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4361-block  1
call    5 never executed
    $$$$$: 4361-block  2
    $$$$$: 4361-block  3
        -: 4362:  }
    #####: 4363:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4363-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4363-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4363-block  2
call    7 never executed
    $$$$$: 4363-block  3
call    8 never executed
    $$$$$: 4363-block  4
        -: 4364:
    #####: 4365:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4365-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4365-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4365-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4365-block  3
call   15 never executed
    $$$$$: 4365-block  4
    $$$$$: 4365-block  5
call   16 never executed
    $$$$$: 4365-block  6
    $$$$$: 4365-block  7
call   17 never executed
    $$$$$: 4365-block  8
    $$$$$: 4365-block  9
call   18 never executed
    $$$$$: 4365-block 10
    #####: 4366:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4367:
    #####: 4368:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4368-block  0
    %%%%%: 4368-block  1
    %%%%%: 4368-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4369:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4369-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4369-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4369-block  2
branch  6 never executed
branch  7 never executed
    #####: 4370:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4370-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4370-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4371:  }
        -: 4372:
        -: 4373:  // If there was a test failure outside of one of the test suites (like in a
        -: 4374:  // test environment) include that in the output.
    #####: 4375:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4375-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4375-block  1
branch  4 never executed
branch  5 never executed
    #####: 4376:    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4376-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4377:  }
        -: 4378:
    #####: 4379:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4379-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4379-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4379-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4380:}
    %%%%%: 4380-block  0
call    0 never executed
    $$$$$: 4380-block  1
call    1 never executed
        -: 4381:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4382:void XmlUnitTestResultPrinter::PrintXmlTestsList(
        -: 4383:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4384:  const std::string kTestsuites = "testsuites";
    %%%%%: 4384-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4384-block  1
        -: 4385:
    #####: 4386:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4387:  *stream << "<" << kTestsuites;
    %%%%%: 4387-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4387-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4388:
    #####: 4389:  int total_tests = 0;
    #####: 4390:  for (auto test_suite : test_suites) {
    %%%%%: 4390-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4390-block  1
call    2 never executed
    %%%%%: 4390-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4391:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4392:  }
    #####: 4393:  OutputXmlAttribute(stream, kTestsuites, "test",
    %%%%%: 4393-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4393-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4393-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4393-block  3
call    9 never executed
    $$$$$: 4393-block  4
    $$$$$: 4393-block  5
call   10 never executed
    $$$$$: 4393-block  6
    #####: 4394:                     StreamableToString(total_tests));
    %%%%%: 4394-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 4394-block  1
call    4 never executed
    $$$$$: 4394-block  2
    #####: 4395:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4395-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4395-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4395-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4395-block  3
call   15 never executed
    $$$$$: 4395-block  4
    $$$$$: 4395-block  5
call   16 never executed
    $$$$$: 4395-block  6
    $$$$$: 4395-block  7
call   17 never executed
    $$$$$: 4395-block  8
    $$$$$: 4395-block  9
call   18 never executed
    $$$$$: 4395-block 10
    #####: 4396:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4397:
    #####: 4398:  for (auto test_suite : test_suites) {
    %%%%%: 4398-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4398-block  1
call    2 never executed
    %%%%%: 4398-block  2
call    3 never executed
    %%%%%: 4398-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4399:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4400:  }
    #####: 4401:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4401-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4401-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4401-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4402:}
    %%%%%: 4402-block  0
call    0 never executed
    $$$$$: 4402-block  1
call    1 never executed
        -: 4403:
        -: 4404:// Produces a string representing the test properties in a result as space
        -: 4405:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4406:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4407:    const TestResult& result) {
    #####: 4408:  Message attributes;
    %%%%%: 4408-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4409:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4409-block  0
    %%%%%: 4409-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4410:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4410-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4411:    attributes << " " << property.key() << "="
    %%%%%: 4411-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4411-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4411-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 4411-block  3
    #####: 4412:               << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4412-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4412-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4412-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4412-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4412-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4412-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4412-block  6
call   20 never executed
    $$$$$: 4412-block  7
    $$$$$: 4412-block  8
call   21 never executed
    $$$$$: 4412-block  9
    $$$$$: 4412-block 10
call   22 never executed
    $$$$$: 4412-block 11
        -: 4413:  }
    #####: 4414:  return attributes.GetString();
    %%%%%: 4414-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4414-block  1
    #####: 4415:}
    %%%%%: 4415-block  0
call    0 never executed
    $$$$$: 4415-block  1
call    1 never executed
        -: 4416:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4417:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
        -: 4418:    std::ostream* stream, const TestResult& result) {
    #####: 4419:  const std::string kProperties = "properties";
    %%%%%: 4419-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4419-block  1
    #####: 4420:  const std::string kProperty = "property";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4420-block  0
        -: 4421:
    #####: 4422:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4423:    return;
    %%%%%: 4423-block  0
        -: 4424:  }
        -: 4425:
    #####: 4426:  *stream << "      <" << kProperties << ">\n";
    %%%%%: 4426-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4426-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4426-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4427:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4427-block  0
    %%%%%: 4427-block  1
    %%%%%: 4427-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4428:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4428-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4429:    *stream << "        <" << kProperty;
    %%%%%: 4429-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4429-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4430:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4430-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4430-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4430-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4430-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4430-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4430-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4430-block  6
call   20 never executed
    $$$$$: 4430-block  7
    $$$$$: 4430-block  8
call   21 never executed
    $$$$$: 4430-block  9
    $$$$$: 4430-block 10
call   22 never executed
    $$$$$: 4430-block 11
    #####: 4431:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4431-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4431-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4431-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4431-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4431-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4431-block  5
call   20 never executed
    $$$$$: 4431-block  6
    $$$$$: 4431-block  7
call   21 never executed
    $$$$$: 4431-block  8
    $$$$$: 4431-block  9
call   22 never executed
    $$$$$: 4431-block 10
    #####: 4432:    *stream << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4433:  }
    #####: 4434:  *stream << "      </" << kProperties << ">\n";
    %%%%%: 4434-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4434-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4434-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4435:}
    %%%%%: 4435-block  0
    %%%%%: 4435-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4435-block  2
    %%%%%: 4435-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4435-block  4
call    6 never executed
    $$$$$: 4435-block  5
call    7 never executed
        -: 4436:
        -: 4437:// End XmlUnitTestResultPrinter
        -: 4438:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 4439:
        -: 4440:#if GTEST_HAS_FILE_SYSTEM
        -: 4441:// This class generates an JSON output file.
        -: 4442:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4443: public:
        -: 4444:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4445:
        -: 4446:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4447:
        -: 4448:  // Prints an JSON summary of all unit test.
        -: 4449:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4450:                                const std::vector<TestSuite*>& test_suites);
        -: 4451:
        -: 4452: private:
        -: 4453:  // Returns an JSON-escaped copy of the input string str.
        -: 4454:  static std::string EscapeJson(const std::string& str);
        -: 4455:
        -: 4456:  //// Verifies that the given attribute belongs to the given element and
        -: 4457:  //// streams the attribute as JSON.
        -: 4458:  static void OutputJsonKey(std::ostream* stream,
        -: 4459:                            const std::string& element_name,
        -: 4460:                            const std::string& name, const std::string& value,
        -: 4461:                            const std::string& indent, bool comma = true);
        -: 4462:  static void OutputJsonKey(std::ostream* stream,
        -: 4463:                            const std::string& element_name,
        -: 4464:                            const std::string& name, int value,
        -: 4465:                            const std::string& indent, bool comma = true);
        -: 4466:
        -: 4467:  // Streams a test suite JSON stanza containing the given test result.
        -: 4468:  //
        -: 4469:  // Requires: result.Failed()
        -: 4470:  static void OutputJsonTestSuiteForTestResult(::std::ostream* stream,
        -: 4471:                                               const TestResult& result);
        -: 4472:
        -: 4473:  // Streams a JSON representation of a TestResult object.
        -: 4474:  static void OutputJsonTestResult(::std::ostream* stream,
        -: 4475:                                   const TestResult& result);
        -: 4476:
        -: 4477:  // Streams a JSON representation of a TestInfo object.
        -: 4478:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4479:                                 const char* test_suite_name,
        -: 4480:                                 const TestInfo& test_info);
        -: 4481:
        -: 4482:  // Prints a JSON representation of a TestSuite object
        -: 4483:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4484:                                 const TestSuite& test_suite);
        -: 4485:
        -: 4486:  // Prints a JSON summary of unit_test to output stream out.
        -: 4487:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4488:                                const UnitTest& unit_test);
        -: 4489:
        -: 4490:  // Produces a string representing the test properties in a result as
        -: 4491:  // a JSON dictionary.
        -: 4492:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4493:                                          const std::string& indent);
        -: 4494:
        -: 4495:  // The output file.
        -: 4496:  const std::string output_file_;
        -: 4497:
        -: 4498:  JsonUnitTestResultPrinter(const JsonUnitTestResultPrinter&) = delete;
        -: 4499:  JsonUnitTestResultPrinter& operator=(const JsonUnitTestResultPrinter&) =
        -: 4500:      delete;
        -: 4501:};
        -: 4502:
        -: 4503:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4504:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4505:    : output_file_(output_file) {
    %%%%%: 4505-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4505-block  1
call    5 never executed
    $$$$$: 4505-block  2
call    6 never executed
    $$$$$: 4505-block  3
    #####: 4506:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4507:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4507-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4507-block  2
call    7 never executed
    $$$$$: 4507-block  3
call    8 never executed
    $$$$$: 4507-block  4
        -: 4508:  }
    #####: 4509:}
    %%%%%: 4509-block  0
    $$$$$: 4509-block  1
call    0 never executed
    $$$$$: 4509-block  2
call    1 never executed
        -: 4510:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4511:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4512:                                                   int /*iteration*/) {
    #####: 4513:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4513-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4514:  std::stringstream stream;
    %%%%%: 4514-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4515:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4515-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4516:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4516-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 4517:  fclose(jsonout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4518:}
    %%%%%: 4518-block  0
call    0 never executed
    $$$$$: 4518-block  1
call    1 never executed
        -: 4519:
        -: 4520:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4521:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4522:  Message m;
    %%%%%: 4522-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4523:
    #####: 4524:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4524-block  0
    %%%%%: 4524-block  1
    %%%%%: 4524-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4525:    const char ch = str[i];
    %%%%%: 4525-block  0
call    0 never executed
    #####: 4526:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4527:      case '\\':
        -: 4528:      case '"':
        -: 4529:      case '/':
    #####: 4530:        m << '\\' << ch;
    %%%%%: 4530-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4530-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4530-block  2
    #####: 4531:        break;
    %%%%%: 4531-block  0
    #####: 4532:      case '\b':
    #####: 4533:        m << "\\b";
    %%%%%: 4533-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4534:        break;
    %%%%%: 4534-block  0
    #####: 4535:      case '\t':
    #####: 4536:        m << "\\t";
    %%%%%: 4536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4537:        break;
    %%%%%: 4537-block  0
    #####: 4538:      case '\n':
    #####: 4539:        m << "\\n";
    %%%%%: 4539-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4540:        break;
    %%%%%: 4540-block  0
    #####: 4541:      case '\f':
    #####: 4542:        m << "\\f";
    %%%%%: 4542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4543:        break;
    %%%%%: 4543-block  0
    #####: 4544:      case '\r':
    #####: 4545:        m << "\\r";
    %%%%%: 4545-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4546:        break;
    %%%%%: 4546-block  0
    #####: 4547:      default:
    #####: 4548:        if (ch < ' ') {
    %%%%%: 4548-block  0
branch  0 never executed
branch  1 never executed
    #####: 4549:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4549-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4549-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4549-block  3
call    9 never executed
    $$$$$: 4549-block  4
call   10 never executed
    $$$$$: 4549-block  5
        -: 4550:        } else {
    #####: 4551:          m << ch;
    %%%%%: 4551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4552:        }
    #####: 4553:        break;
    %%%%%: 4553-block  0
        -: 4554:    }
        -: 4555:  }
        -: 4556:
    #####: 4557:  return m.GetString();
    %%%%%: 4557-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4557-block  1
    #####: 4558:}
    %%%%%: 4558-block  0
call    0 never executed
    $$$$$: 4558-block  1
call    1 never executed
        -: 4559:
        -: 4560:// The following routines generate an JSON representation of a UnitTest
        -: 4561:// object.
        -: 4562:
        -: 4563:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEx called 0 returned 0% blocks executed 0%
    #####: 4564:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4565:  ::std::stringstream ss;
    %%%%%: 4565-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4566:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4566-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4566-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4567:  return ss.str();
    %%%%%: 4567-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4567-block  1
    #####: 4568:}
    %%%%%: 4568-block  0
call    0 never executed
    $$$$$: 4568-block  1
call    1 never executed
        -: 4569:
        -: 4570:// Converts the given epoch time in milliseconds to a date string in the
        -: 4571:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339Ex called 0 returned 0% blocks executed 0%
    #####: 4572:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4573:  struct tm time_struct;
    #####: 4574:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4574-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4574-block  1
branch  3 never executed
branch  4 never executed
    #####: 4575:    return "";
    %%%%%: 4575-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4575-block  1
call    4 never executed
    $$$$$: 4575-block  2
call    5 never executed
    $$$$$: 4575-block  3
        -: 4576:  // YYYY-MM-DDThh:mm:ss
    #####: 4577:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4577-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4577-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4577-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4577-block  3
call   11 never executed
    $$$$$: 4577-block  4
    $$$$$: 4577-block  5
call   12 never executed
    $$$$$: 4577-block  6
    $$$$$: 4577-block  7
call   13 never executed
    $$$$$: 4577-block  8
    $$$$$: 4577-block  9
    #####: 4578:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4578-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4578-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4578-block  3
call   12 never executed
    $$$$$: 4578-block  4
    $$$$$: 4578-block  5
call   13 never executed
    $$$$$: 4578-block  6
    $$$$$: 4578-block  7
call   14 never executed
    $$$$$: 4578-block  8
    #####: 4579:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4579-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4579-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4579-block  3
call   12 never executed
    $$$$$: 4579-block  4
    $$$$$: 4579-block  5
call   13 never executed
    $$$$$: 4579-block  6
    $$$$$: 4579-block  7
call   14 never executed
    $$$$$: 4579-block  8
    #####: 4580:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4580-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4580-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4580-block  3
call   12 never executed
    $$$$$: 4580-block  4
    $$$$$: 4580-block  5
call   13 never executed
    $$$$$: 4580-block  6
    $$$$$: 4580-block  7
call   14 never executed
    $$$$$: 4580-block  8
    #####: 4581:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4581-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4581-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4581-block  3
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 4581-block  4
call   13 never executed
    $$$$$: 4581-block  5
    $$$$$: 4581-block  6
call   14 never executed
    $$$$$: 4581-block  7
    $$$$$: 4581-block  8
call   15 never executed
    $$$$$: 4581-block  9
    #####: 4582:         String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4582-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4582-block  2
call    7 never executed
    $$$$$: 4582-block  3
        -: 4583:}
        -: 4584:
function _ZN7testing8internalL6IndentEy called 0 returned 0% blocks executed 0%
    #####: 4585:static inline std::string Indent(size_t width) {
    #####: 4586:  return std::string(width, ' ');
    %%%%%: 4586-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4586-block  1
call    4 never executed
    %%%%%: 4586-block  2
    $$$$$: 4586-block  3
call    5 never executed
        -: 4587:}
        -: 4588:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4589:void JsonUnitTestResultPrinter::OutputJsonKey(std::ostream* stream,
        -: 4590:                                              const std::string& element_name,
        -: 4591:                                              const std::string& name,
        -: 4592:                                              const std::string& value,
        -: 4593:                                              const std::string& indent,
        -: 4594:                                              bool comma) {
        -: 4595:  const std::vector<std::string>& allowed_names =
    #####: 4596:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4597:
    #####: 4598:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4598-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4598-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4598-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4598-block  3
call   13 never executed
    %%%%%: 4598-block  4
call   14 never executed
    $$$$$: 4598-block  5
    $$$$$: 4598-block  6
call   15 never executed
    $$$$$: 4598-block  7
        -: 4599:               allowed_names.end())
        -: 4600:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4601:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4601-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4601-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4601-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4601-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4601-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4602:
    #####: 4603:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4603-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4603-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4603-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4603-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4603-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4603-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4603-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4603-block  7
call   21 never executed
    $$$$$: 4603-block  8
call   22 never executed
    $$$$$: 4603-block  9
    #####: 4604:  if (comma) *stream << ",\n";
branch  0 never executed
branch  1 never executed
    %%%%%: 4604-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4605:}
    %%%%%: 4605-block  0
call    0 never executed
    $$$$$: 4605-block  1
call    1 never executed
        -: 4606:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4607:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4608:    std::ostream* stream, const std::string& element_name,
        -: 4609:    const std::string& name, int value, const std::string& indent, bool comma) {
        -: 4610:  const std::vector<std::string>& allowed_names =
    #####: 4611:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4611-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4612:
    #####: 4613:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4613-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4613-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4613-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4613-block  3
call   13 never executed
    %%%%%: 4613-block  4
call   14 never executed
    $$$$$: 4613-block  5
    $$$$$: 4613-block  6
call   15 never executed
    $$$$$: 4613-block  7
        -: 4614:               allowed_names.end())
        -: 4615:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4616:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4616-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4616-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4616-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4616-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4616-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4617:
    #####: 4618:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4618-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4618-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4618-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4618-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4618-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4618-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4618-block  6
call   18 never executed
    $$$$$: 4618-block  7
call   19 never executed
    $$$$$: 4618-block  8
    #####: 4619:  if (comma) *stream << ",\n";
branch  0 never executed
branch  1 never executed
    %%%%%: 4619-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4620:}
    %%%%%: 4620-block  0
call    0 never executed
    $$$$$: 4620-block  1
call    1 never executed
        -: 4621:
        -: 4622:// Streams a test suite JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter32OutputJsonTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4623:void JsonUnitTestResultPrinter::OutputJsonTestSuiteForTestResult(
        -: 4624:    ::std::ostream* stream, const TestResult& result) {
        -: 4625:  // Output the boilerplate for a new test suite.
    #####: 4626:  *stream << Indent(4) << "{\n";
    %%%%%: 4626-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4626-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4626-block  2
call    7 never executed
    $$$$$: 4626-block  3
call    8 never executed
    $$$$$: 4626-block  4
call    9 never executed
    #####: 4627:  OutputJsonKey(stream, "testsuite", "name", "NonTestSuiteFailure", Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4627-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4627-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4627-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4627-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4627-block  4
call   23 never executed
    $$$$$: 4627-block  5
    $$$$$: 4627-block  6
call   24 never executed
    $$$$$: 4627-block  7
    $$$$$: 4627-block  8
call   25 never executed
    $$$$$: 4627-block  9
    $$$$$: 4627-block 10
call   26 never executed
    $$$$$: 4627-block 11
    $$$$$: 4627-block 12
call   27 never executed
    $$$$$: 4627-block 13
    $$$$$: 4627-block 14
call   28 never executed
    $$$$$: 4627-block 15
    $$$$$: 4627-block 16
call   29 never executed
    $$$$$: 4627-block 17
call   30 never executed
    #####: 4628:  OutputJsonKey(stream, "testsuite", "test", 1, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4628-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4628-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4628-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4628-block  3
call   17 never executed
    $$$$$: 4628-block  4
    $$$$$: 4628-block  5
call   18 never executed
    $$$$$: 4628-block  6
    $$$$$: 4628-block  7
call   19 never executed
    $$$$$: 4628-block  8
    $$$$$: 4628-block  9
call   20 never executed
    $$$$$: 4628-block 10
    $$$$$: 4628-block 11
call   21 never executed
    $$$$$: 4628-block 12
call   22 never executed
    #####: 4629:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4630:    OutputJsonKey(stream, "testsuite", "failures", 1, Indent(6));
    %%%%%: 4630-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4630-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4630-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4630-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4630-block  4
call   17 never executed
    $$$$$: 4630-block  5
    $$$$$: 4630-block  6
call   18 never executed
    $$$$$: 4630-block  7
    $$$$$: 4630-block  8
call   19 never executed
    $$$$$: 4630-block  9
    $$$$$: 4630-block 10
call   20 never executed
    $$$$$: 4630-block 11
    $$$$$: 4630-block 12
call   21 never executed
    $$$$$: 4630-block 13
call   22 never executed
    #####: 4631:    OutputJsonKey(stream, "testsuite", "disabled", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4631-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4631-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4631-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4631-block  3
call   17 never executed
    $$$$$: 4631-block  4
    $$$$$: 4631-block  5
call   18 never executed
    $$$$$: 4631-block  6
    $$$$$: 4631-block  7
call   19 never executed
    $$$$$: 4631-block  8
    $$$$$: 4631-block  9
call   20 never executed
    $$$$$: 4631-block 10
    $$$$$: 4631-block 11
call   21 never executed
    $$$$$: 4631-block 12
call   22 never executed
    #####: 4632:    OutputJsonKey(stream, "testsuite", "skipped", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4632-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4632-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4632-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4632-block  3
call   17 never executed
    $$$$$: 4632-block  4
    $$$$$: 4632-block  5
call   18 never executed
    $$$$$: 4632-block  6
    $$$$$: 4632-block  7
call   19 never executed
    $$$$$: 4632-block  8
    $$$$$: 4632-block  9
call   20 never executed
    $$$$$: 4632-block 10
    $$$$$: 4632-block 11
call   21 never executed
    $$$$$: 4632-block 12
call   22 never executed
    #####: 4633:    OutputJsonKey(stream, "testsuite", "errors", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4633-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4633-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4633-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4633-block  3
call   17 never executed
    $$$$$: 4633-block  4
    $$$$$: 4633-block  5
call   18 never executed
    $$$$$: 4633-block  6
    $$$$$: 4633-block  7
call   19 never executed
    $$$$$: 4633-block  8
    $$$$$: 4633-block  9
call   20 never executed
    $$$$$: 4633-block 10
    $$$$$: 4633-block 11
call   21 never executed
    $$$$$: 4633-block 12
call   22 never executed
    #####: 4634:    OutputJsonKey(stream, "testsuite", "time",
    %%%%%: 4634-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4634-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4634-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4634-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4634-block  4
call   15 never executed
    $$$$$: 4634-block  5
    $$$$$: 4634-block  6
call   16 never executed
    $$$$$: 4634-block  7
    $$$$$: 4634-block  8
call   17 never executed
    $$$$$: 4634-block  9
    $$$$$: 4634-block 10
call   18 never executed
    $$$$$: 4634-block 11
    #####: 4635:                  FormatTimeInMillisAsDuration(result.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4635-block  0
call    5 never executed
    $$$$$: 4635-block  1
    #####: 4636:                  Indent(6));
call    0 never executed
call    1 never executed
    $$$$$: 4636-block  0
call    2 never executed
    $$$$$: 4636-block  1
call    3 never executed
    #####: 4637:    OutputJsonKey(stream, "testsuite", "timestamp",
    %%%%%: 4637-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4637-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4637-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4637-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4637-block  4
call   15 never executed
    $$$$$: 4637-block  5
    $$$$$: 4637-block  6
call   16 never executed
    $$$$$: 4637-block  7
    $$$$$: 4637-block  8
call   17 never executed
    $$$$$: 4637-block  9
    $$$$$: 4637-block 10
call   18 never executed
    $$$$$: 4637-block 11
    #####: 4638:                  FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4638-block  0
call    5 never executed
    $$$$$: 4638-block  1
    #####: 4639:                  Indent(6));
call    0 never executed
call    1 never executed
    $$$$$: 4639-block  0
call    2 never executed
    $$$$$: 4639-block  1
call    3 never executed
        -: 4640:  }
    #####: 4641:  *stream << Indent(6) << "\"testsuite\": [\n";
    %%%%%: 4641-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4641-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4641-block  2
call    7 never executed
    $$$$$: 4641-block  3
call    8 never executed
    $$$$$: 4641-block  4
call    9 never executed
        -: 4642:
        -: 4643:  // Output the boilerplate for a new test case.
    #####: 4644:  *stream << Indent(8) << "{\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4644-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4644-block  1
call    7 never executed
    $$$$$: 4644-block  2
call    8 never executed
    $$$$$: 4644-block  3
call    9 never executed
    #####: 4645:  OutputJsonKey(stream, "testcase", "name", "", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4645-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4645-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4645-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4645-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4645-block  4
call   23 never executed
    $$$$$: 4645-block  5
    $$$$$: 4645-block  6
call   24 never executed
    $$$$$: 4645-block  7
    $$$$$: 4645-block  8
call   25 never executed
    $$$$$: 4645-block  9
    $$$$$: 4645-block 10
call   26 never executed
    $$$$$: 4645-block 11
    $$$$$: 4645-block 12
call   27 never executed
    $$$$$: 4645-block 13
    $$$$$: 4645-block 14
call   28 never executed
    $$$$$: 4645-block 15
    $$$$$: 4645-block 16
call   29 never executed
    $$$$$: 4645-block 17
call   30 never executed
    #####: 4646:  OutputJsonKey(stream, "testcase", "status", "RUN", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4646-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4646-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4646-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4646-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4646-block  4
call   23 never executed
    $$$$$: 4646-block  5
    $$$$$: 4646-block  6
call   24 never executed
    $$$$$: 4646-block  7
    $$$$$: 4646-block  8
call   25 never executed
    $$$$$: 4646-block  9
    $$$$$: 4646-block 10
call   26 never executed
    $$$$$: 4646-block 11
    $$$$$: 4646-block 12
call   27 never executed
    $$$$$: 4646-block 13
    $$$$$: 4646-block 14
call   28 never executed
    $$$$$: 4646-block 15
    $$$$$: 4646-block 16
call   29 never executed
    $$$$$: 4646-block 17
call   30 never executed
    #####: 4647:  OutputJsonKey(stream, "testcase", "result", "COMPLETED", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4647-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4647-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4647-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4647-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4647-block  4
call   23 never executed
    $$$$$: 4647-block  5
    $$$$$: 4647-block  6
call   24 never executed
    $$$$$: 4647-block  7
    $$$$$: 4647-block  8
call   25 never executed
    $$$$$: 4647-block  9
    $$$$$: 4647-block 10
call   26 never executed
    $$$$$: 4647-block 11
    $$$$$: 4647-block 12
call   27 never executed
    $$$$$: 4647-block 13
    $$$$$: 4647-block 14
call   28 never executed
    $$$$$: 4647-block 15
    $$$$$: 4647-block 16
call   29 never executed
    $$$$$: 4647-block 17
call   30 never executed
    #####: 4648:  OutputJsonKey(stream, "testcase", "timestamp",
    %%%%%: 4648-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4648-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4648-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4648-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4648-block  4
call   15 never executed
    $$$$$: 4648-block  5
    $$$$$: 4648-block  6
call   16 never executed
    $$$$$: 4648-block  7
    $$$$$: 4648-block  8
call   17 never executed
    $$$$$: 4648-block  9
    $$$$$: 4648-block 10
call   18 never executed
    $$$$$: 4648-block 11
    #####: 4649:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4649-block  0
call    5 never executed
    $$$$$: 4649-block  1
    #####: 4650:                Indent(10));
call    0 never executed
call    1 never executed
    $$$$$: 4650-block  0
call    2 never executed
    $$$$$: 4650-block  1
call    3 never executed
    #####: 4651:  OutputJsonKey(stream, "testcase", "time",
    %%%%%: 4651-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4651-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4651-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4651-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4651-block  4
call   15 never executed
    $$$$$: 4651-block  5
    $$$$$: 4651-block  6
call   16 never executed
    $$$$$: 4651-block  7
    $$$$$: 4651-block  8
call   17 never executed
    $$$$$: 4651-block  9
    $$$$$: 4651-block 10
call   18 never executed
    $$$$$: 4651-block 11
    #####: 4652:                FormatTimeInMillisAsDuration(result.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4652-block  0
call    5 never executed
    $$$$$: 4652-block  1
    #####: 4653:                Indent(10));
call    0 never executed
call    1 never executed
    $$$$$: 4653-block  0
call    2 never executed
    $$$$$: 4653-block  1
call    3 never executed
    #####: 4654:  OutputJsonKey(stream, "testcase", "classname", "", Indent(10), false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4654-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4654-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4654-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4654-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4654-block  4
call   23 never executed
    $$$$$: 4654-block  5
    $$$$$: 4654-block  6
call   24 never executed
    $$$$$: 4654-block  7
    $$$$$: 4654-block  8
call   25 never executed
    $$$$$: 4654-block  9
    $$$$$: 4654-block 10
call   26 never executed
    $$$$$: 4654-block 11
    $$$$$: 4654-block 12
call   27 never executed
    $$$$$: 4654-block 13
    $$$$$: 4654-block 14
call   28 never executed
    $$$$$: 4654-block 15
    $$$$$: 4654-block 16
call   29 never executed
    $$$$$: 4654-block 17
call   30 never executed
    #####: 4655:  *stream << TestPropertiesAsJson(result, Indent(10));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4655-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4655-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4655-block  2
call    9 never executed
    $$$$$: 4655-block  3
    $$$$$: 4655-block  4
call   10 never executed
    $$$$$: 4655-block  5
call   11 never executed
        -: 4656:
        -: 4657:  // Output the actual test result.
    #####: 4658:  OutputJsonTestResult(stream, result);
call    0 never executed
        -: 4659:
        -: 4660:  // Finish the test suite.
    #####: 4661:  *stream << "\n" << Indent(6) << "]\n" << Indent(4) << "}";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4661-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4661-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4661-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4661-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4661-block  4
call   17 never executed
call   18 never executed
    $$$$$: 4661-block  5
call   19 never executed
    $$$$$: 4661-block  6
    $$$$$: 4661-block  7
call   20 never executed
    #####: 4662:}
        -: 4663:
        -: 4664:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4665:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4666:                                                   const char* test_suite_name,
        -: 4667:                                                   const TestInfo& test_info) {
    #####: 4668:  const TestResult& result = *test_info.result();
    %%%%%: 4668-block  0
call    0 never executed
    #####: 4669:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4669-block  0
    #####: 4670:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4671:
    #####: 4672:  *stream << Indent(8) << "{\n";
    %%%%%: 4672-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4672-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4672-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4672-block  3
call    9 never executed
    $$$$$: 4672-block  4
call   10 never executed
    $$$$$: 4672-block  5
    #####: 4673:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4673-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4673-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4673-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4673-block  3
call   16 never executed
    $$$$$: 4673-block  4
    $$$$$: 4673-block  5
call   17 never executed
    $$$$$: 4673-block  6
    $$$$$: 4673-block  7
call   18 never executed
    $$$$$: 4673-block  8
    $$$$$: 4673-block  9
call   19 never executed
    $$$$$: 4673-block 10
        -: 4674:
    #####: 4675:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4676:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4676-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4676-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4676-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4676-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4676-block  4
call   16 never executed
    $$$$$: 4676-block  5
    $$$$$: 4676-block  6
call   17 never executed
    $$$$$: 4676-block  7
    $$$$$: 4676-block  8
call   18 never executed
    $$$$$: 4676-block  9
    $$$$$: 4676-block 10
call   19 never executed
    $$$$$: 4676-block 11
        -: 4677:                  kIndent);
        -: 4678:  }
    #####: 4679:  if (test_info.type_param() != nullptr) {
    %%%%%: 4679-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4680:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4680-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4680-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4680-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4680-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4680-block  4
call   16 never executed
    $$$$$: 4680-block  5
    $$$$$: 4680-block  6
call   17 never executed
    $$$$$: 4680-block  7
    $$$$$: 4680-block  8
call   18 never executed
    $$$$$: 4680-block  9
    $$$$$: 4680-block 10
call   19 never executed
    $$$$$: 4680-block 11
        -: 4681:                  kIndent);
        -: 4682:  }
        -: 4683:
    #####: 4684:  OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4684-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4684-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4684-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4684-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4684-block  4
call   16 never executed
    $$$$$: 4684-block  5
    $$$$$: 4684-block  6
call   17 never executed
    $$$$$: 4684-block  7
    $$$$$: 4684-block  8
call   18 never executed
    $$$$$: 4684-block  9
    $$$$$: 4684-block 10
call   19 never executed
    $$$$$: 4684-block 11
    #####: 4685:  OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4685-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4685-block  1
call    8 never executed
call    9 never executed
    $$$$$: 4685-block  2
call   10 never executed
    $$$$$: 4685-block  3
    $$$$$: 4685-block  4
call   11 never executed
    $$$$$: 4685-block  5
    #####: 4686:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4687:    *stream << "\n" << Indent(8) << "}";
    %%%%%: 4687-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4687-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4687-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4687-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4687-block  4
call   12 never executed
    $$$$$: 4687-block  5
call   13 never executed
    $$$$$: 4687-block  6
    #####: 4688:    return;
        -: 4689:  } else {
    #####: 4690:    *stream << ",\n";
    %%%%%: 4690-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4691:  }
        -: 4692:
    #####: 4693:  OutputJsonKey(stream, kTestsuite, "status",
    %%%%%: 4693-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4693-block  1
    %%%%%: 4693-block  2
    %%%%%: 4693-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4693-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4693-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4693-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4693-block  7
call   17 never executed
    $$$$$: 4693-block  8
    $$$$$: 4693-block  9
call   18 never executed
    $$$$$: 4693-block 10
    $$$$$: 4693-block 11
call   19 never executed
    $$$$$: 4693-block 12
    $$$$$: 4693-block 13
call   20 never executed
    $$$$$: 4693-block 14
    #####: 4694:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
call    0 never executed
    #####: 4695:  OutputJsonKey(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4695-block  0
    %%%%%: 4695-block  1
    %%%%%: 4695-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4695-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4695-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4695-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4695-block  6
call   17 never executed
    $$$$$: 4695-block  7
    $$$$$: 4695-block  8
call   18 never executed
    $$$$$: 4695-block  9
    $$$$$: 4695-block 10
call   19 never executed
    $$$$$: 4695-block 11
    $$$$$: 4695-block 12
call   20 never executed
    $$$$$: 4695-block 13
    #####: 4696:                test_info.should_run()
call    0 never executed
    #####: 4697:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4697-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4697-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4697-block  2
    %%%%%: 4697-block  3
        -: 4698:                    : "SUPPRESSED",
        -: 4699:                kIndent);
    #####: 4700:  OutputJsonKey(stream, kTestsuite, "timestamp",
    %%%%%: 4700-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4700-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4700-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4700-block  3
call    9 never executed
    $$$$$: 4700-block  4
    $$$$$: 4700-block  5
call   10 never executed
    $$$$$: 4700-block  6
    #####: 4701:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4701-block  0
call    5 never executed
    $$$$$: 4701-block  1
        -: 4702:                kIndent);
    #####: 4703:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4703-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4703-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4703-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4703-block  3
call    9 never executed
    $$$$$: 4703-block  4
    $$$$$: 4703-block  5
call   10 never executed
    $$$$$: 4703-block  6
    #####: 4704:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4704-block  0
call    5 never executed
    $$$$$: 4704-block  1
    #####: 4705:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4705-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4705-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4705-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4705-block  3
call   15 never executed
    $$$$$: 4705-block  4
    $$$$$: 4705-block  5
call   16 never executed
    $$$$$: 4705-block  6
    $$$$$: 4705-block  7
call   17 never executed
    $$$$$: 4705-block  8
    $$$$$: 4705-block  9
call   18 never executed
    $$$$$: 4705-block 10
        -: 4706:                false);
    #####: 4707:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4707-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4707-block  1
call    6 never executed
    $$$$$: 4707-block  2
call    7 never executed
    $$$$$: 4707-block  3
        -: 4708:
    #####: 4709:  OutputJsonTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4710:}
    %%%%%: 4710-block  0
    %%%%%: 4710-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4710-block  2
    %%%%%: 4710-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4710-block  4
call    6 never executed
    $$$$$: 4710-block  5
call    7 never executed
        -: 4711:
function _ZN7testing8internal25JsonUnitTestResultPrinter20OutputJsonTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4712:void JsonUnitTestResultPrinter::OutputJsonTestResult(::std::ostream* stream,
        -: 4713:                                                     const TestResult& result) {
    #####: 4714:  const std::string kIndent = Indent(10);
    %%%%%: 4714-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4715:
    #####: 4716:  int failures = 0;
    #####: 4717:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4717-block  0
    %%%%%: 4717-block  1
    %%%%%: 4717-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4718:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4718-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4719:    if (part.failed()) {
    %%%%%: 4719-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4720:      *stream << ",\n";
    %%%%%: 4720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4721:      if (++failures == 1) {
    %%%%%: 4721-block  0
branch  0 never executed
branch  1 never executed
        -: 4722:        *stream << kIndent << "\""
        -: 4723:                << "failures"
    #####: 4724:                << "\": [\n";
    %%%%%: 4724-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4724-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4724-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4724-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4725:      }
        -: 4726:      const std::string location =
        -: 4727:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4728:                                                          part.line_number());
    %%%%%: 4728-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4729:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 4729-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4729-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4729-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    $$$$$: 4729-block  3
    $$$$$: 4729-block  4
        -: 4730:      *stream << kIndent << "  {\n"
        -: 4731:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4732:              << kIndent << "    \"type\": \"\"\n"
    #####: 4733:              << kIndent << "  }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4733-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4733-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4733-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4733-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4733-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4733-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4733-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4733-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4733-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
    #####: 4734:    }
    %%%%%: 4734-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4734-block  1
call    2 never executed
    $$$$$: 4734-block  2
call    3 never executed
        -: 4735:  }
        -: 4736:
    #####: 4737:  if (failures > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4737-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4737-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4737-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4737-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 4738:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4738-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4738-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4738-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4738-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4738-block  4
call   12 never executed
    $$$$$: 4738-block  5
call   13 never executed
    $$$$$: 4738-block  6
    #####: 4739:}
call    0 never executed
    $$$$$: 4739-block  0
call    1 never executed
        -: 4740:
        -: 4741:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4742:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
        -: 4743:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4744:  const std::string kTestsuite = "testsuite";
    %%%%%: 4744-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4744-block  1
    #####: 4745:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4746:
    #####: 4747:  *stream << Indent(4) << "{\n";
    %%%%%: 4747-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4747-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4747-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4747-block  3
call    9 never executed
    $$$$$: 4747-block  4
call   10 never executed
    $$$$$: 4747-block  5
    #####: 4748:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4748-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4748-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4748-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4748-block  3
call   16 never executed
    $$$$$: 4748-block  4
    $$$$$: 4748-block  5
call   17 never executed
    $$$$$: 4748-block  6
    $$$$$: 4748-block  7
call   18 never executed
    $$$$$: 4748-block  8
    $$$$$: 4748-block  9
call   19 never executed
    $$$$$: 4748-block 10
    #####: 4749:  OutputJsonKey(stream, kTestsuite, "test", test_suite.reportable_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4749-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4749-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4749-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4749-block  3
call   12 never executed
    $$$$$: 4749-block  4
    $$$$$: 4749-block  5
call   13 never executed
    $$$$$: 4749-block  6
        -: 4750:                kIndent);
    #####: 4751:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4752:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4752-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4752-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4752-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4752-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4752-block  4
call   12 never executed
    $$$$$: 4752-block  5
    $$$$$: 4752-block  6
call   13 never executed
    $$$$$: 4752-block  7
        -: 4753:                  test_suite.failed_test_count(), kIndent);
    #####: 4754:    OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4754-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4754-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4754-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4754-block  3
call   12 never executed
    $$$$$: 4754-block  4
    $$$$$: 4754-block  5
call   13 never executed
    $$$$$: 4754-block  6
        -: 4755:                  test_suite.reportable_disabled_test_count(), kIndent);
    #####: 4756:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4756-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4756-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4756-block  2
call    9 never executed
    $$$$$: 4756-block  3
    $$$$$: 4756-block  4
call   10 never executed
    $$$$$: 4756-block  5
    #####: 4757:    OutputJsonKey(
    %%%%%: 4757-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4757-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4757-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4757-block  3
call    9 never executed
    $$$$$: 4757-block  4
    $$$$$: 4757-block  5
call   10 never executed
    $$$$$: 4757-block  6
        -: 4758:        stream, kTestsuite, "timestamp",
    #####: 4759:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4759-block  0
call    5 never executed
    $$$$$: 4759-block  1
        -: 4760:        kIndent);
    #####: 4761:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4761-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4761-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4761-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4761-block  3
call    9 never executed
    $$$$$: 4761-block  4
    $$$$$: 4761-block  5
call   10 never executed
    $$$$$: 4761-block  6
    #####: 4762:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4762-block  0
call    5 never executed
    $$$$$: 4762-block  1
        -: 4763:                  kIndent, false);
    #####: 4764:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4764-block  0
call    4 never executed
    $$$$$: 4764-block  1
call    5 never executed
    $$$$$: 4764-block  2
    #####: 4765:            << ",\n";
    %%%%%: 4765-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4765-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4766:  }
        -: 4767:
    #####: 4768:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4768-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4768-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4768-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4768-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4769:
    #####: 4770:  bool comma = false;
    #####: 4771:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4771-block  0
    %%%%%: 4771-block  1
    %%%%%: 4771-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4772:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4772-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4772-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4773:      if (comma) {
    %%%%%: 4773-block  0
branch  0 never executed
branch  1 never executed
    #####: 4774:        *stream << ",\n";
    %%%%%: 4774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4775:      } else {
    #####: 4776:        comma = true;
    %%%%%: 4776-block  0
        -: 4777:      }
    #####: 4778:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4778-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4778-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4779:    }
        -: 4780:  }
    #####: 4781:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4781-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4781-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4781-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4781-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4781-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4781-block  6
call   18 never executed
    $$$$$: 4781-block  7
call   19 never executed
    $$$$$: 4781-block  8
    #####: 4782:}
call    0 never executed
call    1 never executed
    $$$$$: 4782-block  0
call    2 never executed
    $$$$$: 4782-block  1
call    3 never executed
        -: 4783:
        -: 4784:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4785:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
        -: 4786:                                                  const UnitTest& unit_test) {
    #####: 4787:  const std::string kTestsuites = "testsuites";
    %%%%%: 4787-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4787-block  1
    #####: 4788:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4789:  *stream << "{\n";
    %%%%%: 4789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4790:
    #####: 4791:  OutputJsonKey(stream, kTestsuites, "test", unit_test.reportable_test_count(),
    %%%%%: 4791-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4791-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4791-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4791-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4791-block  4
call   12 never executed
    $$$$$: 4791-block  5
    $$$$$: 4791-block  6
call   13 never executed
    $$$$$: 4791-block  7
        -: 4792:                kIndent);
    #####: 4793:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4793-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4793-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4793-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4793-block  3
call   12 never executed
    $$$$$: 4793-block  4
    $$$$$: 4793-block  5
call   13 never executed
    $$$$$: 4793-block  6
        -: 4794:                kIndent);
    #####: 4795:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4795-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4795-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4795-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4795-block  3
call   12 never executed
    $$$$$: 4795-block  4
    $$$$$: 4795-block  5
call   13 never executed
    $$$$$: 4795-block  6
        -: 4796:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4797:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4797-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4797-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4797-block  2
call    9 never executed
    $$$$$: 4797-block  3
    $$$$$: 4797-block  4
call   10 never executed
    $$$$$: 4797-block  5
    #####: 4798:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4799:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4799-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4799-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4799-block  2
call    8 never executed
call    9 never executed
    $$$$$: 4799-block  3
call   10 never executed
    $$$$$: 4799-block  4
    $$$$$: 4799-block  5
call   11 never executed
    $$$$$: 4799-block  6
        -: 4800:                  kIndent);
        -: 4801:  }
    #####: 4802:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4802-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4802-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4802-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4802-block  3
call    9 never executed
    $$$$$: 4802-block  4
    $$$$$: 4802-block  5
call   10 never executed
    $$$$$: 4802-block  6
    #####: 4803:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4803-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4803-block  1
call    5 never executed
    $$$$$: 4803-block  2
        -: 4804:                kIndent);
    #####: 4805:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4805-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4805-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4805-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4805-block  3
call    9 never executed
    $$$$$: 4805-block  4
    $$$$$: 4805-block  5
call   10 never executed
    $$$$$: 4805-block  6
    #####: 4806:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4806-block  0
call    5 never executed
    $$$$$: 4806-block  1
        -: 4807:                false);
        -: 4808:
    #####: 4809:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4809-block  0
call    4 never executed
    $$$$$: 4809-block  1
call    5 never executed
    $$$$$: 4809-block  2
    #####: 4810:          << ",\n";
    %%%%%: 4810-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4810-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4811:
    #####: 4812:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4812-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4812-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4812-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4812-block  3
call   15 never executed
    $$$$$: 4812-block  4
    $$$$$: 4812-block  5
call   16 never executed
    $$$$$: 4812-block  6
    $$$$$: 4812-block  7
call   17 never executed
    $$$$$: 4812-block  8
    $$$$$: 4812-block  9
call   18 never executed
    $$$$$: 4812-block 10
    #####: 4813:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4813-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4813-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4813-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4814:
    #####: 4815:  bool comma = false;
    #####: 4816:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4816-block  0
    %%%%%: 4816-block  1
    %%%%%: 4816-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4817:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4817-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4817-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4817-block  2
branch  6 never executed
branch  7 never executed
    #####: 4818:      if (comma) {
    %%%%%: 4818-block  0
branch  0 never executed
branch  1 never executed
    #####: 4819:        *stream << ",\n";
    %%%%%: 4819-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4820:      } else {
    #####: 4821:        comma = true;
    %%%%%: 4821-block  0
        -: 4822:      }
    #####: 4823:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4823-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4823-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4824:    }
        -: 4825:  }
        -: 4826:
        -: 4827:  // If there was a test failure outside of one of the test suites (like in a
        -: 4828:  // test environment) include that in the output.
    #####: 4829:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4829-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4829-block  1
branch  4 never executed
branch  5 never executed
    #####: 4830:    if (comma) {
    %%%%%: 4830-block  0
branch  0 never executed
branch  1 never executed
    #####: 4831:      *stream << ",\n";
    %%%%%: 4831-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4832:    }
    #####: 4833:    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4833-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4834:  }
        -: 4835:
        -: 4836:  *stream << "\n"
        -: 4837:          << kIndent << "]\n"
    #####: 4838:          << "}\n";
    %%%%%: 4838-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4838-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4838-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4838-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4839:}
    %%%%%: 4839-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4839-block  1
call    2 never executed
    $$$$$: 4839-block  2
call    3 never executed
        -: 4840:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4841:void JsonUnitTestResultPrinter::PrintJsonTestList(
        -: 4842:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4843:  const std::string kTestsuites = "testsuites";
    %%%%%: 4843-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4843-block  1
    #####: 4844:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4845:  *stream << "{\n";
    %%%%%: 4845-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4846:  int total_tests = 0;
    #####: 4847:  for (auto test_suite : test_suites) {
    %%%%%: 4847-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4847-block  1
call    2 never executed
    %%%%%: 4847-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4848:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4849:  }
    #####: 4850:  OutputJsonKey(stream, kTestsuites, "test", total_tests, kIndent);
    %%%%%: 4850-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4850-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4850-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4850-block  3
call    9 never executed
    $$$$$: 4850-block  4
    $$$$$: 4850-block  5
call   10 never executed
    $$$$$: 4850-block  6
        -: 4851:
    #####: 4852:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4852-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4852-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4852-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4852-block  3
call   15 never executed
    $$$$$: 4852-block  4
    $$$$$: 4852-block  5
call   16 never executed
    $$$$$: 4852-block  6
    $$$$$: 4852-block  7
call   17 never executed
    $$$$$: 4852-block  8
    $$$$$: 4852-block  9
call   18 never executed
    $$$$$: 4852-block 10
    #####: 4853:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4853-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4853-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4853-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4854:
    #####: 4855:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4855-block  0
    %%%%%: 4855-block  1
    %%%%%: 4855-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4856:    if (i != 0) {
    %%%%%: 4856-block  0
branch  0 never executed
branch  1 never executed
    #####: 4857:      *stream << ",\n";
    %%%%%: 4857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4858:    }
    #####: 4859:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4859-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4860:  }
        -: 4861:
        -: 4862:  *stream << "\n"
        -: 4863:          << kIndent << "]\n"
    #####: 4864:          << "}\n";
    %%%%%: 4864-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4864-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4864-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4864-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4865:}
    %%%%%: 4865-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4865-block  1
call    2 never executed
    $$$$$: 4865-block  2
call    3 never executed
        -: 4866:// Produces a string representing the test properties in a result as
        -: 4867:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4868:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4869:    const TestResult& result, const std::string& indent) {
    #####: 4870:  Message attributes;
    %%%%%: 4870-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4871:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4871-block  0
    %%%%%: 4871-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4872:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4872-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4873:    attributes << ",\n"
    %%%%%: 4873-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4874:               << indent << "\"" << property.key() << "\": "
    %%%%%: 4874-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4874-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4874-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4874-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 4874-block  4
    #####: 4875:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 4875-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4875-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4875-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4875-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4875-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4875-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4875-block  6
call   20 never executed
    $$$$$: 4875-block  7
    $$$$$: 4875-block  8
call   21 never executed
    $$$$$: 4875-block  9
    $$$$$: 4875-block 10
call   22 never executed
    $$$$$: 4875-block 11
        -: 4876:  }
    #####: 4877:  return attributes.GetString();
    %%%%%: 4877-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4877-block  1
    #####: 4878:}
    %%%%%: 4878-block  0
call    0 never executed
    $$$$$: 4878-block  1
call    1 never executed
        -: 4879:
        -: 4880:// End JsonUnitTestResultPrinter
        -: 4881:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 4882:
        -: 4883:#if GTEST_CAN_STREAM_RESULTS_
        -: 4884:
        -: 4885:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4886:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4887:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4888:// in both time and space -- important as the input str may contain an
        -: 4889:// arbitrarily long test failure message and stack trace.
        -: 4890:std::string StreamingListener::UrlEncode(const char* str) {
        -: 4891:  std::string result;
        -: 4892:  result.reserve(strlen(str) + 1);
        -: 4893:  for (char ch = *str; ch != '\0'; ch = *++str) {
        -: 4894:    switch (ch) {
        -: 4895:      case '%':
        -: 4896:      case '=':
        -: 4897:      case '&':
        -: 4898:      case '\n':
        -: 4899:        result.push_back('%');
        -: 4900:        result.append(String::FormatByte(static_cast<unsigned char>(ch)));
        -: 4901:        break;
        -: 4902:      default:
        -: 4903:        result.push_back(ch);
        -: 4904:        break;
        -: 4905:    }
        -: 4906:  }
        -: 4907:  return result;
        -: 4908:}
        -: 4909:
        -: 4910:void StreamingListener::SocketWriter::MakeConnection() {
        -: 4911:  GTEST_CHECK_(sockfd_ == -1)
        -: 4912:      << "MakeConnection() can't be called when there is already a connection.";
        -: 4913:
        -: 4914:  addrinfo hints;
        -: 4915:  memset(&hints, 0, sizeof(hints));
        -: 4916:  hints.ai_family = AF_UNSPEC;  // To allow both IPv4 and IPv6 addresses.
        -: 4917:  hints.ai_socktype = SOCK_STREAM;
        -: 4918:  addrinfo* servinfo = nullptr;
        -: 4919:
        -: 4920:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4921:  // the given host name.
        -: 4922:  const int error_num =
        -: 4923:      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
        -: 4924:  if (error_num != 0) {
        -: 4925:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
        -: 4926:                        << gai_strerror(error_num);
        -: 4927:  }
        -: 4928:
        -: 4929:  // Loop through all the results and connect to the first we can.
        -: 4930:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
        -: 4931:       cur_addr = cur_addr->ai_next) {
        -: 4932:    sockfd_ = socket(cur_addr->ai_family, cur_addr->ai_socktype,
        -: 4933:                     cur_addr->ai_protocol);
        -: 4934:    if (sockfd_ != -1) {
        -: 4935:      // Connect the client socket to the server socket.
        -: 4936:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
        -: 4937:        close(sockfd_);
        -: 4938:        sockfd_ = -1;
        -: 4939:      }
        -: 4940:    }
        -: 4941:  }
        -: 4942:
        -: 4943:  freeaddrinfo(servinfo);  // all done with this structure
        -: 4944:
        -: 4945:  if (sockfd_ == -1) {
        -: 4946:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
        -: 4947:                        << host_name_ << ":" << port_num_;
        -: 4948:  }
        -: 4949:}
        -: 4950:
        -: 4951:// End of class Streaming Listener
        -: 4952:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4953:
        -: 4954:// class OsStackTraceGetter
        -: 4955:
        -: 4956:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4957:    "... " GTEST_NAME_ " internal frames ...";
        -: 4958:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 4959:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
        -: 4960:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4961:#ifdef GTEST_HAS_ABSL
        -: 4962:  std::string result;
        -: 4963:
        -: 4964:  if (max_depth <= 0) {
        -: 4965:    return result;
        -: 4966:  }
        -: 4967:
        -: 4968:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 4969:
        -: 4970:  std::vector<void*> raw_stack(max_depth);
        -: 4971:  // Skips the frames requested by the caller, plus this function.
        -: 4972:  const int raw_stack_size =
        -: 4973:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 4974:
        -: 4975:  void* caller_frame = nullptr;
        -: 4976:  {
        -: 4977:    MutexLock lock(&mutex_);
        -: 4978:    caller_frame = caller_frame_;
        -: 4979:  }
        -: 4980:
        -: 4981:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 4982:    if (raw_stack[i] == caller_frame &&
        -: 4983:        !GTEST_FLAG_GET(show_internal_stack_frames)) {
        -: 4984:      // Add a marker to the trace and stop adding frames.
        -: 4985:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 4986:      break;
        -: 4987:    }
        -: 4988:
        -: 4989:    char tmp[1024];
        -: 4990:    const char* symbol = "(unknown)";
        -: 4991:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 4992:      symbol = tmp;
        -: 4993:    }
        -: 4994:
        -: 4995:    char line[1024];
        -: 4996:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 4997:    result += line;
        -: 4998:  }
        -: 4999:
        -: 5000:  return result;
        -: 5001:
        -: 5002:#else   // !GTEST_HAS_ABSL
        -: 5003:  static_cast<void>(max_depth);
        -: 5004:  static_cast<void>(skip_count);
    #####: 5005:  return "";
    %%%%%: 5005-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5005-block  1
call    4 never executed
    %%%%%: 5005-block  2
    $$$$$: 5005-block  3
call    5 never executed
        -: 5006:#endif  // GTEST_HAS_ABSL
        -: 5007:}
        -: 5008:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 7 returned 100% blocks executed 100%
        7: 5009:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5010:#ifdef GTEST_HAS_ABSL
        -: 5011:  void* caller_frame = nullptr;
        -: 5012:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 5013:    caller_frame = nullptr;
        -: 5014:  }
        -: 5015:
        -: 5016:  MutexLock lock(&mutex_);
        -: 5017:  caller_frame_ = caller_frame;
        -: 5018:#endif  // GTEST_HAS_ABSL
        7: 5019:}
        -: 5020:
        -: 5021:#ifdef GTEST_HAS_DEATH_TEST
        -: 5022:// A helper class that creates the premature-exit file in its
        -: 5023:// constructor and deletes the file in its destructor.
        -: 5024:class ScopedPrematureExitFile {
        -: 5025: public:
function _ZN7testing8internal23ScopedPrematureExitFileC1EPKc called 1 returned 100% blocks executed 50%
        1: 5026:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
       1*: 5027:      : premature_exit_filepath_(
        1: 5027-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5027-block  1
        1: 5027-block  2
        1: 5027-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5027-block  4
call    6 returned 1
    $$$$$: 5027-block  5
call    7 never executed
    $$$$$: 5027-block  6
call    8 never executed
        -: 5028:            premature_exit_filepath ? premature_exit_filepath : "") {
        -: 5029:    // If a path to the premature-exit file is specified...
        1: 5030:    if (!premature_exit_filepath_.empty()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 5031:      // create the file with a single "0" character in it.  I/O
        -: 5032:      // errors are ignored as there's nothing better we can do and we
        -: 5033:      // don't want to fail the test because of this.
    #####: 5034:      FILE* pfile = posix::FOpen(premature_exit_filepath_.c_str(), "w");
    %%%%%: 5034-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5035:      fwrite("0", 1, 1, pfile);
    %%%%%: 5035-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5036:      fclose(pfile);
    %%%%%: 5036-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5037:    }
        1: 5038:  }
        1: 5038-block  0
    $$$$$: 5038-block  1
call    0 never executed
        -: 5039:
function _ZN7testing8internal23ScopedPrematureExitFileD1Ev called 1 returned 100% blocks executed 27%
        2: 5040:  ~ScopedPrematureExitFile() {
        -: 5041:#ifndef GTEST_OS_ESP8266
        1: 5042:    if (!premature_exit_filepath_.empty()) {
        1: 5042-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5043:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5043-block  0
call    0 never executed
call    1 never executed
    #####: 5044:      if (retval) {
branch  0 never executed
branch  1 never executed
    #####: 5045:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5045-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5046:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5047:                          << retval;
call    0 never executed
        -: 5048:      }
        -: 5049:    }
        -: 5050:#endif
        1: 5051:  }
        1: 5051-block  0
call    0 returned 1
        -: 5052:
        -: 5053: private:
        -: 5054:  const std::string premature_exit_filepath_;
        -: 5055:
        -: 5056:  ScopedPrematureExitFile(const ScopedPrematureExitFile&) = delete;
        -: 5057:  ScopedPrematureExitFile& operator=(const ScopedPrematureExitFile&) = delete;
        -: 5058:};
        -: 5059:#endif  // GTEST_HAS_DEATH_TEST
        -: 5060:
        -: 5061:}  // namespace internal
        -: 5062:
        -: 5063:// class TestEventListeners
        -: 5064:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 5065:TestEventListeners::TestEventListeners()
        1: 5066:    : repeater_(new internal::TestEventRepeater()),
        1: 5066-block  0
call    0 returned 1
call    1 returned 1
        1: 5067:      default_result_printer_(nullptr),
        1: 5068:      default_xml_generator_(nullptr) {}
        -: 5069:
function _ZN7testing18TestEventListenersD2Ev called 0 returned 0% blocks executed 0%
    #####: 5070:TestEventListeners::~TestEventListeners() { delete repeater_; }
    %%%%%: 5070-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5070-block  1
call    2 never executed
        -: 5071:
        -: 5072:// Returns the standard listener responsible for the default console
        -: 5073:// output.  Can be removed from the listeners list to shut down default
        -: 5074:// console output.  Note that removing this object from the listener list
        -: 5075:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 5076:void TestEventListeners::Append(TestEventListener* listener) {
        1: 5077:  repeater_->Append(listener);
        1: 5077-block  0
call    0 returned 1
        1: 5078:}
        -: 5079:
        -: 5080:// Removes the given event listener from the list and returns it.  It then
        -: 5081:// becomes the caller's responsibility to delete the listener. Returns
        -: 5082:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 5083:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 5084:  if (listener == default_result_printer_)
        1: 5084-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5085:    default_result_printer_ = nullptr;
        1: 5085-block  0
    #####: 5086:  else if (listener == default_xml_generator_)
    %%%%%: 5086-block  0
branch  0 never executed
branch  1 never executed
    #####: 5087:    default_xml_generator_ = nullptr;
    %%%%%: 5087-block  0
        1: 5088:  return repeater_->Release(listener);
        1: 5088-block  0
call    0 returned 1
        -: 5089:}
        -: 5090:
        -: 5091:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5092:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 14 returned 100% blocks executed 100%
       14: 5093:TestEventListener* TestEventListeners::repeater() { return repeater_; }
       14: 5093-block  0
        -: 5094:
        -: 5095:// Sets the default_result_printer attribute to the provided listener.
        -: 5096:// The listener is also added to the listener list and previous
        -: 5097:// default_result_printer is removed from it and deleted. The listener can
        -: 5098:// also be NULL in which case it will not be added to the list. Does
        -: 5099:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 5100:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 5101:  if (default_result_printer_ != listener) {
        1: 5101-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5102:    // It is an error to pass this method a listener that is already in the
        -: 5103:    // list.
       1*: 5104:    delete Release(default_result_printer_);
        1: 5104-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5104-block  1
call    3 never executed
        1: 5105:    default_result_printer_ = listener;
        1: 5106:    if (listener != nullptr) Append(listener);
        1: 5106-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5106-block  1
call    2 returned 1
        -: 5107:  }
        1: 5108:}
        -: 5109:
        -: 5110:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5111:// listener is also added to the listener list and previous
        -: 5112:// default_xml_generator is removed from it and deleted. The listener can
        -: 5113:// also be NULL in which case it will not be added to the list. Does
        -: 5114:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5115:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5116:  if (default_xml_generator_ != listener) {
    %%%%%: 5116-block  0
branch  0 never executed
branch  1 never executed
        -: 5117:    // It is an error to pass this method a listener that is already in the
        -: 5118:    // list.
    #####: 5119:    delete Release(default_xml_generator_);
    %%%%%: 5119-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5119-block  1
call    3 never executed
    #####: 5120:    default_xml_generator_ = listener;
    #####: 5121:    if (listener != nullptr) Append(listener);
    %%%%%: 5121-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5121-block  1
call    2 never executed
        -: 5122:  }
    #####: 5123:}
        -: 5124:
        -: 5125:// Controls whether events will be forwarded by the repeater to the
        -: 5126:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5127:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5128:  return repeater_->forwarding_enabled();
    %%%%%: 5128-block  0
call    0 never executed
        -: 5129:}
        -: 5130:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEv called 0 returned 0% blocks executed 0%
    #####: 5131:void TestEventListeners::SuppressEventForwarding() {
    #####: 5132:  repeater_->set_forwarding_enabled(false);
    %%%%%: 5132-block  0
call    0 never executed
    #####: 5133:}
        -: 5134:
        -: 5135:// class UnitTest
        -: 5136:
        -: 5137:// Gets the singleton UnitTest object.  The first time this method is
        -: 5138:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5139:// calls will return the same object.
        -: 5140://
        -: 5141:// We don't protect this under mutex_ as a user is not supposed to
        -: 5142:// call this before main() starts, from which point on the return
        -: 5143:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 46 returned 100% blocks executed 82%
       46: 5144:UnitTest* UnitTest::GetInstance() {
        -: 5145:  // CodeGear C++Builder insists on a public destructor for the
        -: 5146:  // default implementation.  Use this implementation to keep good OO
        -: 5147:  // design with private destructor.
        -: 5148:
        -: 5149:#if defined(__BORLANDC__)
        -: 5150:  static UnitTest* const instance = new UnitTest;
        -: 5151:  return instance;
        -: 5152:#else
       46: 5153:  static UnitTest instance;
       46: 5153-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 45
        1: 5153-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5153-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5153-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 5153-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 5153-block  5
call   12 never executed
       46: 5154:  return &instance;
       46: 5154-block  0
       46: 5154-block  1
        -: 5155:#endif  // defined(__BORLANDC__)
        -: 5156:}
        -: 5157:
        -: 5158:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5159:int UnitTest::successful_test_suite_count() const {
    #####: 5160:  return impl()->successful_test_suite_count();
    %%%%%: 5160-block  0
call    0 never executed
call    1 never executed
        -: 5161:}
        -: 5162:
        -: 5163:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5164:int UnitTest::failed_test_suite_count() const {
    #####: 5165:  return impl()->failed_test_suite_count();
    %%%%%: 5165-block  0
call    0 never executed
call    1 never executed
        -: 5166:}
        -: 5167:
        -: 5168:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5169:int UnitTest::total_test_suite_count() const {
    #####: 5170:  return impl()->total_test_suite_count();
    %%%%%: 5170-block  0
call    0 never executed
call    1 never executed
        -: 5171:}
        -: 5172:
        -: 5173:// Gets the number of all test suites that contain at least one test
        -: 5174:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5175:int UnitTest::test_suite_to_run_count() const {
        2: 5176:  return impl()->test_suite_to_run_count();
        2: 5176-block  0
call    0 returned 2
call    1 returned 2
        -: 5177:}
        -: 5178:
        -: 5179://  Legacy API is deprecated but still available
        -: 5180:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5181:int UnitTest::successful_test_case_count() const {
    #####: 5182:  return impl()->successful_test_suite_count();
    %%%%%: 5182-block  0
call    0 never executed
call    1 never executed
        -: 5183:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5184:int UnitTest::failed_test_case_count() const {
    #####: 5185:  return impl()->failed_test_suite_count();
    %%%%%: 5185-block  0
call    0 never executed
call    1 never executed
        -: 5186:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5187:int UnitTest::total_test_case_count() const {
    #####: 5188:  return impl()->total_test_suite_count();
    %%%%%: 5188-block  0
call    0 never executed
call    1 never executed
        -: 5189:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5190:int UnitTest::test_case_to_run_count() const {
    #####: 5191:  return impl()->test_suite_to_run_count();
    %%%%%: 5191-block  0
call    0 never executed
call    1 never executed
        -: 5192:}
        -: 5193:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5194:
        -: 5195:// Gets the number of successful test.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5196:int UnitTest::successful_test_count() const {
        1: 5197:  return impl()->successful_test_count();
        1: 5197-block  0
call    0 returned 1
call    1 returned 1
        -: 5198:}
        -: 5199:
        -: 5200:// Gets the number of skipped test.
function _ZNK7testing8UnitTest18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 5201:int UnitTest::skipped_test_count() const {
        1: 5202:  return impl()->skipped_test_count();
        1: 5202-block  0
call    0 returned 1
call    1 returned 1
        -: 5203:}
        -: 5204:
        -: 5205:// Gets the number of failed test.
function _ZNK7testing8UnitTest17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5206:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5206-block  0
call    0 never executed
call    1 never executed
        -: 5207:
        -: 5208:// Gets the number of disabled test that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 5209:int UnitTest::reportable_disabled_test_count() const {
        1: 5210:  return impl()->reportable_disabled_test_count();
        1: 5210-block  0
call    0 returned 1
call    1 returned 1
        -: 5211:}
        -: 5212:
        -: 5213:// Gets the number of disabled test.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5214:int UnitTest::disabled_test_count() const {
    #####: 5215:  return impl()->disabled_test_count();
    %%%%%: 5215-block  0
call    0 never executed
call    1 never executed
        -: 5216:}
        -: 5217:
        -: 5218:// Gets the number of test to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5219:int UnitTest::reportable_test_count() const {
    #####: 5220:  return impl()->reportable_test_count();
    %%%%%: 5220-block  0
call    0 never executed
call    1 never executed
        -: 5221:}
        -: 5222:
        -: 5223:// Gets the number of all test.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5224:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5224-block  0
call    0 never executed
call    1 never executed
        -: 5225:
        -: 5226:// Gets the number of test that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5227:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5227-block  0
call    0 returned 2
call    1 returned 2
        -: 5228:
        -: 5229:// Gets the time of the test program start, in ms from the start of the
        -: 5230:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5231:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5232:  return impl()->start_timestamp();
    %%%%%: 5232-block  0
call    0 never executed
call    1 never executed
        -: 5233:}
        -: 5234:
        -: 5235:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 5236:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5237:  return impl()->elapsed_time();
        1: 5237-block  0
call    0 returned 1
call    1 returned 1
        -: 5238:}
        -: 5239:
        -: 5240:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5241:// passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 5242:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5242-block  0
call    0 returned 1
call    1 returned 1
        -: 5243:
        -: 5244:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5245:// failed or something outside of all test failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5246:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5246-block  0
call    0 never executed
call    1 never executed
        -: 5247:
        -: 5248:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5249:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5250:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5251:  return impl()->GetTestSuite(i);
    %%%%%: 5251-block  0
call    0 never executed
call    1 never executed
        -: 5252:}
        -: 5253:
        -: 5254://  Legacy API is deprecated but still available
        -: 5255:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5256:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5257:  return impl()->GetTestCase(i);
    %%%%%: 5257-block  0
call    0 never executed
call    1 never executed
        -: 5258:}
        -: 5259:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5260:
        -: 5261:// Returns the TestResult containing information on test failures and
        -: 5262:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5263:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5264:  return *impl()->ad_hoc_test_result();
    %%%%%: 5264-block  0
call    0 never executed
call    1 never executed
        -: 5265:}
        -: 5266:
        -: 5267:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5268:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5269:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5270:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5270-block  0
call    0 never executed
call    1 never executed
        -: 5271:}
        -: 5272:
        -: 5273:// Returns the list of event listeners that can be used to track events
        -: 5274:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 13 returned 100% blocks executed 100%
       13: 5275:TestEventListeners& UnitTest::listeners() { return *impl()->listeners(); }
       13: 5275-block  0
call    0 returned 13
call    1 returned 13
        -: 5276:
        -: 5277:// Registers and returns a global test environment.  When a test
        -: 5278:// program is run, all global test environments will be set-up in the
        -: 5279:// order they were registered.  After all test in the program have
        -: 5280:// finished, all global test environments will be torn-down in the
        -: 5281:// *reverse* order they were registered.
        -: 5282://
        -: 5283:// The UnitTest object takes ownership of the given environment.
        -: 5284://
        -: 5285:// We don't protect this under mutex_, as we only support calling it
        -: 5286:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5287:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5288:  if (env == nullptr) {
    %%%%%: 5288-block  0
branch  0 never executed
branch  1 never executed
    #####: 5289:    return nullptr;
    %%%%%: 5289-block  0
        -: 5290:  }
        -: 5291:
    #####: 5292:  impl_->environments().push_back(env);
    %%%%%: 5292-block  0
call    0 never executed
call    1 never executed
    #####: 5293:  return env;
        -: 5294:}
        -: 5295:
        -: 5296:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5297:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5298:// this to report their results.  The user code should use the
        -: 5299:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 5300:void UnitTest::AddTestPartResult(TestPartResult::Type result_type,
        -: 5301:                                 const char* file_name, int line_number,
        -: 5302:                                 const std::string& message,
        -: 5303:                                 const std::string& os_stack_trace)
        -: 5304:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5305:  Message msg;
    %%%%%: 5305-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5306:  msg << message;
    %%%%%: 5306-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5307:
    #####: 5308:  internal::MutexLock lock(&mutex_);
    %%%%%: 5308-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5309:  if (impl_->gtest_trace_stack().size() > 0) {
    %%%%%: 5309-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5309-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5310:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5310-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5310-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5310-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5311:
    #####: 5312:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5312-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5312-block  1
call    3 never executed
    %%%%%: 5312-block  2
branch  4 never executed
branch  5 never executed
    #####: 5313:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5313-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5313-block  1
call    3 never executed
    #####: 5314:      msg << "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5315:          << internal::FormatFileLocation(trace.file, trace.line) << " "
    %%%%%: 5315-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5315-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5315-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5315-block  3
call    9 never executed
    $$$$$: 5315-block  4
call   10 never executed
    $$$$$: 5315-block  5
    #####: 5316:          << trace.message;
    %%%%%: 5316-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5317:    }
        -: 5318:  }
        -: 5319:
    #####: 5320:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5320-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5320-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5320-block  2
    %%%%%: 5320-block  3
    %%%%%: 5320-block  4
branch  6 never executed
branch  7 never executed
    #####: 5321:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5321-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5321-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5322:  }
        -: 5323:
        -: 5324:  const TestPartResult result = TestPartResult(
    #####: 5325:      result_type, file_name, line_number, msg.GetString().c_str());
    %%%%%: 5325-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5325-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 5325-block  2
    #####: 5326:  impl_->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5326-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5327:      result);
        -: 5328:
    #####: 5329:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5329-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5329-block  1
branch  2 never executed
branch  3 never executed
        -: 5330:      result_type != TestPartResult::kSkip) {
        -: 5331:    // gtest_break_on_failure takes precedence over
        -: 5332:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5333:    // in the code (perhaps in order to use Google Test assertions
        -: 5334:    // with another testing framework) and specify the former on the
        -: 5335:    // command line for debugging.
    #####: 5336:    if (GTEST_FLAG_GET(break_on_failure)) {
    %%%%%: 5336-block  0
branch  0 never executed
branch  1 never executed
        -: 5337:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 5338:    !defined(GTEST_OS_WINDOWS_RT)
        -: 5339:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5340:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5341:      // the --gtest_catch_exceptions flags are specified.
    #####: 5342:      DebugBreak();
    %%%%%: 5342-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5343:#elif (!defined(__native_client__)) &&            \
        -: 5344:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5345:     (defined(__x86_64__) || defined(__i386__)))
        -: 5346:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
        -: 5347:      asm("int3");
        -: 5348:#elif GTEST_HAS_BUILTIN(__builtin_trap)
        -: 5349:      __builtin_trap();
        -: 5350:#elif defined(SIGTRAP)
        -: 5351:      raise(SIGTRAP);
        -: 5352:#else
        -: 5353:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5354:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5355:      // portability: some debuggers don't correctly trap abort().
        -: 5356:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5357:#endif  // GTEST_OS_WINDOWS
    #####: 5358:    } else if (GTEST_FLAG_GET(throw_on_failure)) {
    %%%%%: 5358-block  0
branch  0 never executed
branch  1 never executed
        -: 5359:#if GTEST_HAS_EXCEPTIONS
    #####: 5360:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5360-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5360-block  1
call    4 never executed
    $$$$$: 5360-block  2
call    5 never executed
        -: 5361:#else
        -: 5362:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5363:      // that cannot be suppressed in VC 7.1 or below.
        -: 5364:      exit(1);
        -: 5365:#endif
        -: 5366:    }
        -: 5367:  }
    #####: 5368:}
    %%%%%: 5368-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 5368-block  1
call    3 never executed
    $$$$$: 5368-block  2
call    4 never executed
    $$$$$: 5368-block  3
call    5 never executed
        -: 5369:
        -: 5370:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5371:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5372:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5373:// when invoked elsewhere.  If the result already contains a property with
        -: 5374:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5375:void UnitTest::RecordProperty(const std::string& key,
        -: 5376:                              const std::string& value) {
    #####: 5377:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5377-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5377-block  1
call    4 never executed
    $$$$$: 5377-block  2
call    5 never executed
    #####: 5378:}
        -: 5379:
        -: 5380:// Runs all test in this UnitTest object and prints the result.
        -: 5381:// Returns 0 if successful, or 1 otherwise.
        -: 5382://
        -: 5383:// We don't protect this under mutex_, as we only support calling it
        -: 5384:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 78%
        1: 5385:int UnitTest::Run() {
        -: 5386:#ifdef GTEST_HAS_DEATH_TEST
        -: 5387:  const bool in_death_test_child_process =
        1: 5388:      GTEST_FLAG_GET(internal_run_death_test).length() > 0;
        1: 5388-block  0
call    0 returned 1
        -: 5389:
        -: 5390:  // Google Test implements this protocol for catching that a test
        -: 5391:  // program exits before returning control to Google Test:
        -: 5392:  //
        -: 5393:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5394:  //      is specified by the environment variable
        -: 5395:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5396:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5397:  //
        -: 5398:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5399:  // running a Google-Test-based test program and check the existence
        -: 5400:  // of the file at the end of the test execution to see if it has
        -: 5401:  // exited prematurely.
        -: 5402:
        -: 5403:  // If we are in the child process of a death test, don't
        -: 5404:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5405:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5406:  // the file upon entering/leaving this function.  If the program
        -: 5407:  // somehow exits before this function has a chance to return, the
        -: 5408:  // premature-exit file will be left undeleted, causing a test runner
        -: 5409:  // that understands the premature-exit-file protocol to report the
        -: 5410:  // test as having failed.
        -: 5411:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5412:      in_death_test_child_process
        -: 5413:          ? nullptr
       1*: 5414:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5414-block  0
        1: 5414-block  1
call    2 returned 1
        1: 5414-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 5415:#else
        -: 5416:  const bool in_death_test_child_process = false;
        -: 5417:#endif  // GTEST_HAS_DEATH_TEST
        -: 5418:
        -: 5419:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5420:  // used for the duration of the program.
        1: 5421:  impl()->set_catch_exceptions(GTEST_FLAG_GET(catch_exceptions));
        1: 5421-block  0
call    0 returned 1
call    1 returned 1
        -: 5422:
        -: 5423:#ifdef GTEST_OS_WINDOWS
        -: 5424:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5425:  // test or this is executing in the context of death test child
        -: 5426:  // process. In either case the user does not want to see pop-up dialogs
        -: 5427:  // about crashes - they are expected.
       1*: 5428:  if (impl()->catch_exceptions() || in_death_test_child_process) {
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5428-block  0
branch  4 never executed
branch  5 never executed
        1: 5428-block  1
    %%%%%: 5428-block  2
        1: 5428-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        -: 5429:#if !defined(GTEST_OS_WINDOWS_MOBILE) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 5430:    !defined(GTEST_OS_WINDOWS_RT)
        -: 5431:    // SetErrorMode doesn't exist on CE.
        1: 5432:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        1: 5432-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5433:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5434:#endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5435:
        -: 5436:#if (defined(_MSC_VER) || defined(GTEST_OS_WINDOWS_MINGW)) && \
        -: 5437:    !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 5438:    // Death test children can be terminated with _abort().  On Windows,
        -: 5439:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5440:    // abort message to go to stderr instead.
        1: 5441:    _set_error_mode(_OUT_TO_STDERR);
        1: 5441-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5442:#endif
        -: 5443:
        -: 5444:#if defined(_MSC_VER) && !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 5445:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5446:    // offering a choice to debug the aborted program. We need to suppress
        -: 5447:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5448:    // executed. Google Test will notify the user of any unexpected
        -: 5449:    // failure via stderr.
        -: 5450:    if (!GTEST_FLAG_GET(break_on_failure))
        -: 5451:      _set_abort_behavior(
        -: 5452:          0x0,                                    // Clear the following flags:
        -: 5453:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5454:
        -: 5455:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5456:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5457:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5458:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5459:    if (!IsDebuggerPresent()) {
        -: 5460:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5461:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5462:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5463:    }
        -: 5464:#endif
        -: 5465:  }
        -: 5466:#else
        -: 5467:  (void)in_death_test_child_process;  // Needed inside the #if block above
        -: 5468:#endif  // GTEST_OS_WINDOWS
        -: 5469:
        1: 5470:  return internal::HandleExceptionsInMethodIfSupported(
        1: 5470-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 5471:             impl(), &internal::UnitTestImpl::RunAllTests,
        -: 5472:             "auxiliary test code (environments or event listeners)")
       1*: 5473:             ? 0
        1: 5473-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5473-block  1
    %%%%%: 5473-block  2
        1: 5474:             : 1;
        1: 5474-block  0
        1: 5475:}
        1: 5475-block  0
call    0 returned 1
    $$$$$: 5475-block  1
call    1 never executed
        -: 5476:
        -: 5477:#if GTEST_HAS_FILE_SYSTEM
        -: 5478:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5479:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5480:const char* UnitTest::original_working_dir() const {
    #####: 5481:  return impl_->original_working_dir_.c_str();
    %%%%%: 5481-block  0
call    0 never executed
        -: 5482:}
        -: 5483:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5484:
        -: 5485:// Returns the TestSuite object for the test that's currently running,
        -: 5486:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5487:const TestSuite* UnitTest::current_test_suite() const
        -: 5488:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5489:  internal::MutexLock lock(&mutex_);
    %%%%%: 5489-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5490:  return impl_->current_test_suite();
    %%%%%: 5490-block  0
call    0 never executed
    %%%%%: 5490-block  1
    #####: 5491:}
call    0 never executed
        -: 5492:
        -: 5493:// Legacy API is still available but deprecated
        -: 5494:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5495:const TestCase* UnitTest::current_test_case() const
        -: 5496:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5497:  internal::MutexLock lock(&mutex_);
    %%%%%: 5497-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5498:  return impl_->current_test_suite();
    %%%%%: 5498-block  0
call    0 never executed
    %%%%%: 5498-block  1
    #####: 5499:}
call    0 never executed
        -: 5500:#endif
        -: 5501:
        -: 5502:// Returns the TestInfo object for the test that's currently running,
        -: 5503:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5504:const TestInfo* UnitTest::current_test_info() const
        -: 5505:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5506:  internal::MutexLock lock(&mutex_);
    %%%%%: 5506-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5507:  return impl_->current_test_info();
    %%%%%: 5507-block  0
call    0 never executed
    %%%%%: 5507-block  1
    #####: 5508:}
call    0 never executed
        -: 5509:
        -: 5510:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5511:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5511-block  0
call    0 never executed
        -: 5512:
        -: 5513:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5514:// value-parameterized test and instantiate and register them.
        -: 5515:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5516:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5517:  return impl_->parameterized_test_registry();
    %%%%%: 5517-block  0
call    0 never executed
        -: 5518:}
        -: 5519:
        -: 5520:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 62%
        1: 5521:UnitTest::UnitTest() { impl_ = new internal::UnitTestImpl(this); }
        1: 5521-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5521-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5521-block  2
    $$$$$: 5521-block  3
call    7 never executed
    $$$$$: 5521-block  4
call    8 never executed
        -: 5522:
        -: 5523:// Destructor of UnitTest.
    #####: 5524:UnitTest::~UnitTest() { delete impl_; }
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5524:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5524-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 0 returned 0% blocks executed 0%
    #####: 5524:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5524-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5524-block  1
call    2 never executed
    %%%%%: 5524-block  2
call    3 never executed
------------------
        -: 5525:
        -: 5526:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5527:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5528:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5529:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5530:  internal::MutexLock lock(&mutex_);
    %%%%%: 5530-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5531:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5531-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5531-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5532:}
    %%%%%: 5532-block  0
call    0 never executed
    $$$$$: 5532-block  1
call    1 never executed
        -: 5533:
        -: 5534:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5535:void UnitTest::PopGTestTrace() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5536:  internal::MutexLock lock(&mutex_);
    %%%%%: 5536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5537:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5537-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5537-block  1
call    3 never executed
    #####: 5538:}
call    0 never executed
    $$$$$: 5538-block  0
call    1 never executed
        -: 5539:
        -: 5540:namespace internal {
        -: 5541:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 44%
        1: 5542:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        1: 5543:    : parent_(parent),
        -: 5544:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        1: 5545:          default_global_test_part_result_reporter_(this),
call    0 returned 1
        1: 5546:      default_per_thread_test_part_result_reporter_(this),
call    0 returned 1
        1: 5547:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_reporter_(
        -: 5548:          &default_global_test_part_result_reporter_),
        1: 5549:      per_thread_test_part_result_reporter_(
        1: 5549-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 5549-block  1
        -: 5550:          &default_per_thread_test_part_result_reporter_),
        1: 5551:      parameterized_test_registry_(),
call    0 returned 1
        1: 5552:      parameterized_tests_registered_(false),
        1: 5553:      last_death_test_suite_(-1),
        1: 5554:      current_test_suite_(nullptr),
        1: 5555:      current_test_info_(nullptr),
        1: 5556:      ad_hoc_test_result_(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5557:      os_stack_trace_getter_(nullptr),
        1: 5558:      post_flag_parse_init_performed_(false),
        1: 5559:      random_seed_(0),  // Will be overridden by the flag before first use.
        1: 5560:      random_(0),       // Will be reseeded before first use.
        1: 5560-block  0
call    0 returned 1
        1: 5561:      start_timestamp_(0),
        1: 5562:      elapsed_time_(0),
        -: 5563:#ifdef GTEST_HAS_DEATH_TEST
        1: 5564:      death_test_factory_(new DefaultDeathTestFactory),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5564-block  0
call    3 returned 1
call    4 returned 1
        -: 5565:#endif
        -: 5566:      // Will be overridden by the flag before first use.
        7: 5567:      catch_exceptions_(false) {
        1: 5567-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5567-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
        1: 5567-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1: 5568:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 5568-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5568-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5569:}
        1: 5569-block  0
    $$$$$: 5569-block  1
call    0 never executed
    $$$$$: 5569-block  2
call    1 never executed
    $$$$$: 5569-block  3
call    2 never executed
    $$$$$: 5569-block  4
call    3 never executed
    $$$$$: 5569-block  5
call    4 never executed
    $$$$$: 5569-block  6
call    5 never executed
    $$$$$: 5569-block  7
call    6 never executed
    $$$$$: 5569-block  8
call    7 never executed
    $$$$$: 5569-block  9
call    8 never executed
    $$$$$: 5569-block 10
call    9 never executed
    $$$$$: 5569-block 11
call   10 never executed
    $$$$$: 5569-block 12
call   11 never executed
    $$$$$: 5569-block 13
call   12 never executed
    $$$$$: 5569-block 14
call   13 never executed
    $$$$$: 5569-block 15
call   14 never executed
    $$$$$: 5569-block 16
call   15 never executed
        -: 5570:
    #####: 5571:UnitTestImpl::~UnitTestImpl() {
        -: 5572:  // Deletes every TestSuite.
    #####: 5573:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5574:
        -: 5575:  // Deletes every Environment.
    #####: 5576:  ForEach(environments_, internal::Delete<Environment>);
        -: 5577:
    #####: 5578:  delete os_stack_trace_getter_;
    #####: 5579:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 0 returned 0% blocks executed 0%
    #####: 5571:UnitTestImpl::~UnitTestImpl() {
        -: 5572:  // Deletes every TestSuite.
        -: 5573:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5574:
        -: 5575:  // Deletes every Environment.
        -: 5576:  ForEach(environments_, internal::Delete<Environment>);
        -: 5577:
        -: 5578:  delete os_stack_trace_getter_;
    #####: 5579:}
    %%%%%: 5579-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 0 returned 0% blocks executed 0%
    #####: 5571:UnitTestImpl::~UnitTestImpl() {
        -: 5572:  // Deletes every TestSuite.
    #####: 5573:  ForEach(test_suites_, internal::Delete<TestSuite>);
    %%%%%: 5573-block  0
call    0 never executed
        -: 5574:
        -: 5575:  // Deletes every Environment.
    #####: 5576:  ForEach(environments_, internal::Delete<Environment>);
call    0 never executed
        -: 5577:
    #####: 5578:  delete os_stack_trace_getter_;
branch  0 never executed
branch  1 never executed
    %%%%%: 5578-block  0
call    2 never executed
    #####: 5579:}
    %%%%%: 5579-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
------------------
        -: 5580:
        -: 5581:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5582:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5583:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5584:// otherwise.  If the result already contains a property with the same key,
        -: 5585:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5586:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5587:  std::string xml_element;
    %%%%%: 5587-block  0
call    0 never executed
        -: 5588:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5589:
    #####: 5590:  if (current_test_info_ != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5591:    xml_element = "testcase";
    %%%%%: 5591-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5592:    test_result = &(current_test_info_->result_);
    %%%%%: 5592-block  0
    #####: 5593:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5593-block  0
branch  0 never executed
branch  1 never executed
    #####: 5594:    xml_element = "testsuite";
    %%%%%: 5594-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5595:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5595-block  0
        -: 5596:  } else {
    #####: 5597:    xml_element = "testsuites";
    %%%%%: 5597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5598:    test_result = &ad_hoc_test_result_;
    %%%%%: 5598-block  0
        -: 5599:  }
    #####: 5600:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5600-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5601:}
    %%%%%: 5601-block  0
call    0 never executed
    $$$$$: 5601-block  1
call    1 never executed
        -: 5602:
        -: 5603:#ifdef GTEST_HAS_DEATH_TEST
        -: 5604:// Disables event forwarding if the control is currently in a death test
        -: 5605:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 5606:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 5607:  if (internal_run_death_test_flag_.get() != nullptr)
        1: 5607-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5608:    listeners()->SuppressEventForwarding();
    %%%%%: 5608-block  0
call    0 never executed
call    1 never executed
        1: 5609:}
        -: 5610:#endif  // GTEST_HAS_DEATH_TEST
        -: 5611:
        -: 5612:// Initializes event listeners performing XML output as specified by
        -: 5613:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 21%
        1: 5614:void UnitTestImpl::ConfigureXmlOutput() {
        1: 5615:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 5615-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5616:#if GTEST_HAS_FILE_SYSTEM
        1: 5617:  if (output_format == "xml") {
        1: 5617-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5618:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5618-block  0
call    0 never executed
    %%%%%: 5618-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5619:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5619-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5619-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5619-block  2
call   10 never executed
    $$$$$: 5619-block  3
call   11 never executed
    $$$$$: 5619-block  4
call   12 never executed
    $$$$$: 5619-block  5
        1: 5620:  } else if (output_format == "json") {
        1: 5620-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5621:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5621-block  0
call    0 never executed
    %%%%%: 5621-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5622:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5622-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5622-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5622-block  2
call   10 never executed
    $$$$$: 5622-block  3
call   11 never executed
    $$$$$: 5622-block  4
call   12 never executed
    $$$$$: 5622-block  5
        1: 5623:  } else if (output_format != "") {
        1: 5623-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5624:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5624-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5624-block  1
call    3 never executed
    %%%%%: 5624-block  2
call    4 never executed
    $$$$$: 5624-block  3
call    5 never executed
    $$$$$: 5624-block  4
    #####: 5625:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5625-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5625-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5626:  }
        -: 5627:#else
        -: 5628:  GTEST_LOG_(ERROR) << "ERROR: alternative output formats require "
        -: 5629:                    << "GTEST_HAS_FILE_SYSTEM to be enabled";
        -: 5630:#endif  // GTEST_HAS_FILE_SYSTEM
        1: 5631:}
        1: 5631-block  0
call    0 returned 1
    $$$$$: 5631-block  1
call    1 never executed
        -: 5632:
        -: 5633:#if GTEST_CAN_STREAM_RESULTS_
        -: 5634:// Initializes event listeners for streaming test results in string form.
        -: 5635:// Must not be called before InitGoogleTest.
        -: 5636:void UnitTestImpl::ConfigureStreamingOutput() {
        -: 5637:  const std::string& target = GTEST_FLAG_GET(stream_result_to);
        -: 5638:  if (!target.empty()) {
        -: 5639:    const size_t pos = target.find(':');
        -: 5640:    if (pos != std::string::npos) {
        -: 5641:      listeners()->Append(
        -: 5642:          new StreamingListener(target.substr(0, pos), target.substr(pos + 1)));
        -: 5643:    } else {
        -: 5644:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
        -: 5645:                          << "\" ignored.";
        -: 5646:    }
        -: 5647:  }
        -: 5648:}
        -: 5649:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5650:
        -: 5651:// Performs initialization dependent upon flag values obtained in
        -: 5652:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5653:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5654:// this function is also called from RunAllTests.  Since this function can be
        -: 5655:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 64%
        2: 5656:void UnitTestImpl::PostFlagParsingInit() {
        -: 5657:  // Ensures that this function does not execute more than once.
        2: 5658:  if (!post_flag_parse_init_performed_) {
        2: 5658-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 5659:    post_flag_parse_init_performed_ = true;
        -: 5660:
        -: 5661:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5662:    // Register to send notifications about key process state changes.
        -: 5663:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5664:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5665:
        -: 5666:#ifdef GTEST_HAS_DEATH_TEST
        1: 5667:    InitDeathTestSubprocessControlInfo();
        1: 5667-block  0
call    0 returned 1
        1: 5668:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 5669:#endif  // GTEST_HAS_DEATH_TEST
        -: 5670:
        -: 5671:    // Registers parameterized test. This makes parameterized test
        -: 5672:    // available to the UnitTest reflection API without running
        -: 5673:    // RUN_ALL_TESTS.
        1: 5674:    RegisterParameterizedTests();
call    0 returned 1
        -: 5675:
        -: 5676:    // Configures listeners for XML output. This makes it possible for users
        -: 5677:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 5678:    ConfigureXmlOutput();
call    0 returned 1
        -: 5679:
        1: 5680:    if (GTEST_FLAG_GET(brief)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5681:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5681-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 5682:    }
        -: 5683:
        -: 5684:#if GTEST_CAN_STREAM_RESULTS_
        -: 5685:    // Configures listeners for streaming test results to the specified server.
        -: 5686:    ConfigureStreamingOutput();
        -: 5687:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5688:
        -: 5689:#ifdef GTEST_HAS_ABSL
        -: 5690:    if (GTEST_FLAG_GET(install_failure_signal_handler)) {
        -: 5691:      absl::FailureSignalHandlerOptions options;
        -: 5692:      absl::InstallFailureSignalHandler(options);
        -: 5693:    }
        -: 5694:#endif  // GTEST_HAS_ABSL
        -: 5695:  }
        2: 5696:}
        -: 5697:
        -: 5698:// A predicate that checks the name of a TestSuite against a known
        -: 5699:// value.
        -: 5700://
        -: 5701:// This is used for implementation of the UnitTest class only.  We put
        -: 5702:// it in the anonymous namespace to prevent polluting the outer
        -: 5703:// namespace.
        -: 5704://
        -: 5705:// TestSuiteNameIs is copyable.
        -: 5706:class TestSuiteNameIs {
        -: 5707: public:
        -: 5708:  // Constructor.
function _ZN7testing8internal15TestSuiteNameIsC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 12 returned 100% blocks executed 100%
       12: 5709:  explicit TestSuiteNameIs(const std::string& name) : name_(name) {}
       12: 5709-block  0
call    0 returned 12
        -: 5710:
        -: 5711:  // Returns true if and only if the name of test_suite matches name_.
function _ZNK7testing8internal15TestSuiteNameIsclEPKNS_9TestSuiteE called 11 returned 100% blocks executed 88%
       11: 5712:  bool operator()(const TestSuite* test_suite) const {
      22*: 5713:    return test_suite != nullptr &&
       11: 5713-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11: 5713-block  1
    %%%%%: 5713-block  2
       22: 5714:           strcmp(test_suite->name(), name_.c_str()) == 0;
       11: 5714-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0
       11: 5714-block  1
        -: 5715:  }
        -: 5716:
        -: 5717: private:
        -: 5718:  std::string name_;
        -: 5719:};
        -: 5720:
        -: 5721:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5722:// exist, creates one and returns it.  It's the CALLER'S
        -: 5723:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5724:// TESTS ARE NOT SHUFFLED.
        -: 5725://
        -: 5726:// Arguments:
        -: 5727://
        -: 5728://   test_suite_name: name of the test suite
        -: 5729://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5730://                    this is not a typed or a type-parameterized test suite.
        -: 5731://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5732://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteEPKcS3_PFvvES5_ called 12 returned 100% blocks executed 48%
       12: 5733:TestSuite* UnitTestImpl::GetTestSuite(
        -: 5734:    const char* test_suite_name, const char* type_param,
        -: 5735:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5736:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5737:  // Can we find a TestSuite with the given name?
        -: 5738:  const auto test_suite =
       12: 5739:      std::find_if(test_suites_.rbegin(), test_suites_.rend(),
       12: 5739-block  0
call    0 returned 12
call    1 returned 12
    $$$$$: 5739-block  1
    $$$$$: 5739-block  2
       24: 5740:                   TestSuiteNameIs(test_suite_name));
       12: 5740-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 5740-block  1
call    4 returned 12
branch  5 taken 12 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 12
branch  8 taken 12 (fallthrough)
branch  9 taken 0 (throw)
       12: 5740-block  2
call   10 returned 12
call   11 returned 12
call   12 returned 12
    $$$$$: 5740-block  3
call   13 never executed
    $$$$$: 5740-block  4
    $$$$$: 5740-block  5
call   14 never executed
    $$$$$: 5740-block  6
    $$$$$: 5740-block  7
call   15 never executed
    $$$$$: 5740-block  8
        -: 5741:
       12: 5742:  if (test_suite != test_suites_.rend()) return *test_suite;
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 5742-block  0
branch  4 taken 11 (fallthrough)
branch  5 taken 1
       11: 5742-block  1
call    6 returned 11
    $$$$$: 5742-block  2
        -: 5743:
        -: 5744:  // No.  Let's create one.
        -: 5745:  auto* const new_test_suite =
        1: 5746:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
        1: 5746-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5746-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5746-block  2
call    6 never executed
        -: 5747:
        2: 5748:  const UnitTestFilter death_test_suite_filter(kDeathTestSuiteFilter);
        1: 5748-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5748-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
    $$$$$: 5748-block  2
    $$$$$: 5748-block  3
        -: 5749:  // Is this a death test suite?
        1: 5750:  if (death_test_suite_filter.MatchesName(test_suite_name)) {
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5750-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5750-block  1
call    7 returned 1
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    $$$$$: 5750-block  2
call   11 never executed
    $$$$$: 5750-block  3
    $$$$$: 5750-block  4
call   12 never executed
    $$$$$: 5750-block  5
        -: 5751:    // Yes.  Inserts the test suite after the last death test suite
        -: 5752:    // defined so far.  This only works when the test suites haven't
        -: 5753:    // been shuffled.  Otherwise we may end up running a death test
        -: 5754:    // after a non-death test.
    #####: 5755:    ++last_death_test_suite_;
    #####: 5756:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
    %%%%%: 5756-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5756-block  1
    $$$$$: 5756-block  2
    $$$$$: 5756-block  3
    $$$$$: 5756-block  4
        -: 5757:                        new_test_suite);
        -: 5758:  } else {
        -: 5759:    // No.  Appends to the end of the list.
        1: 5760:    test_suites_.push_back(new_test_suite);
        1: 5760-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5761:  }
        -: 5762:
        1: 5763:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
        1: 5763-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 5763-block  1
        1: 5764:  return new_test_suite;
        1: 5765:}
        1: 5765-block  0
call    0 returned 1
    $$$$$: 5765-block  1
call    1 never executed
        -: 5766:
        -: 5767:// Helpers for setting up / tearing down the given environment.  They
        -: 5768:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5769:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5769-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5770:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5770-block  0
call    0 never executed
        -: 5771:
        -: 5772:// Runs all test in this UnitTest object, prints the result, and
        -: 5773:// returns true if all test are successful.  If any exception is
        -: 5774:// thrown during a test, the test is considered to be failed, but the
        -: 5775:// rest of the test will still be run.
        -: 5776://
        -: 5777:// When parameterized test are enabled, it expands and registers
        -: 5778:// parameterized test first in RegisterParameterizedTests().
        -: 5779:// All other functions called from RunAllTests() may safely assume that
        -: 5780:// parameterized test are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 52%
        1: 5781:bool UnitTestImpl::RunAllTests() {
        -: 5782:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5783:  // called.
        1: 5784:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 5784-block  0
call    0 returned 1
        -: 5785:
        -: 5786:  // Do not run any test if the --help flag was specified.
       1*: 5787:  if (g_help_flag) return true;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5787-block  0
        -: 5788:
        -: 5789:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5790:  // user didn't call InitGoogleTest.
        1: 5791:  PostFlagParsingInit();
        1: 5791-block  0
call    0 returned 1
        -: 5792:
        -: 5793:#if GTEST_HAS_FILE_SYSTEM
        -: 5794:  // Even if sharding is not on, test runners may want to use the
        -: 5795:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5796:  // protocol.
        1: 5797:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 5798:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5799:
        -: 5800:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5801:  // death test.
        1: 5802:  bool in_subprocess_for_death_test = false;
        -: 5803:
        -: 5804:#ifdef GTEST_HAS_DEATH_TEST
        1: 5805:  in_subprocess_for_death_test =
        1: 5806:      (internal_run_death_test_flag_.get() != nullptr);
call    0 returned 1
        -: 5807:#if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5808:  if (in_subprocess_for_death_test) {
        -: 5809:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5810:  }
        -: 5811:#endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5812:#endif  // GTEST_HAS_DEATH_TEST
        -: 5813:
        1: 5814:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 5815:                                        in_subprocess_for_death_test);
        -: 5816:
        -: 5817:  // Compares the full test names with the filter to decide which
        -: 5818:  // test to run.
        -: 5819:  const bool has_tests_to_run =
       1*: 5820:      FilterTests(should_shard ? HONOR_SHARDING_PROTOCOL
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5820-block  0
        1: 5820-block  1
        1: 5820-block  2
call    2 returned 1
        1: 5821:                               : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5822:
        -: 5823:  // Lists the test and exits if the --gtest_list_tests flag was specified.
        1: 5824:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5825:    // This must be called *after* FilterTests() has been called.
    #####: 5826:    ListTestsMatchingFilter();
    %%%%%: 5826-block  0
call    0 never executed
    #####: 5827:    return true;
        -: 5828:  }
        -: 5829:
        1: 5830:  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));
        1: 5830-block  0
call    0 returned 1
        -: 5831:
        -: 5832:  // True if and only if at least one test has failed.
        1: 5833:  bool failed = false;
        -: 5834:
        1: 5835:  TestEventListener* repeater = listeners()->repeater();
call    0 returned 1
call    1 returned 1
        -: 5836:
        1: 5837:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 5838:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 5839:
        -: 5840:  // How many times to repeat the test?  We don't want to repeat them
        -: 5841:  // when we are inside the subprocess of a death test.
       1*: 5842:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5842-block  0
        1: 5842-block  1
        -: 5843:
        -: 5844:  // Repeats forever if the repeat count is negative.
        1: 5845:  const bool gtest_repeat_forever = repeat < 0;
        -: 5846:
        -: 5847:  // Should test environments be set up and torn down for each repeat, or only
        -: 5848:  // set up on the first and torn down on the last iteration? If there is no
        -: 5849:  // "last" iteration because the test will repeat forever, always recreate the
        -: 5850:  // environments to avoid leaks in case one of the environments is using
        -: 5851:  // resources that are external to this process. Without this check there would
        -: 5852:  // be no way to clean up those external resources automatically.
        1: 5853:  const bool recreate_environments_when_repeating =
       1*: 5854:      GTEST_FLAG_GET(recreate_environments_when_repeating) ||
        1: 5854-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5854-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5854-block  2
        1: 5854-block  3
        -: 5855:      gtest_repeat_forever;
        -: 5856:
        2: 5857:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 5857-block  0
        1: 5857-block  1
        2: 5857-block  2
branch  0 taken 0
branch  1 taken 2 (fallthrough)
        2: 5857-block  3
branch  2 taken 1
branch  3 taken 1 (fallthrough)
        -: 5858:    // We want to preserve failures generated by ad-hoc test
        -: 5859:    // assertions executed before RUN_ALL_TESTS().
        1: 5860:    ClearNonAdHocTestResult();
        1: 5860-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5861:
        1: 5862:    Timer timer;
        1: 5862-block  0
call    0 returned 1
        -: 5863:
        -: 5864:    // Shuffles test suites and test if requested.
        1: 5865:    if (has_tests_to_run && GTEST_FLAG_GET(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5865-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5866:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5866-block  0
call    0 never executed
call    1 never executed
        -: 5867:      // This should be done before calling OnTestIterationStart(),
        -: 5868:      // such that a test event listener can see the actual test order
        -: 5869:      // in the event.
    #####: 5870:      ShuffleTests();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5871:    }
        -: 5872:
        -: 5873:    // Tells the unit test event listeners that the test are about to start.
        1: 5874:    repeater->OnTestIterationStart(*parent_, i);
        1: 5874-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5875:
        -: 5876:    // Runs each test suite if there is at least one test to run.
        1: 5877:    if (has_tests_to_run) {
        1: 5877-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5878:      // Sets up all environments beforehand. If test environments aren't
        -: 5879:      // recreated for each iteration, only do so on the first iteration.
       1*: 5880:      if (i == 0 || recreate_environments_when_repeating) {
        1: 5880-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5880-block  1
branch  2 never executed
branch  3 never executed
        1: 5881:        repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5881-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5882:        ForEach(environments_, SetUpEnvironment);
        1: 5882-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5883:        repeater->OnEnvironmentsSetUpEnd(*parent_);
        1: 5883-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5884:      }
        -: 5885:
        -: 5886:      // Runs the test only if there was no fatal failure or skip triggered
        -: 5887:      // during global set-up.
        1: 5888:      if (Test::IsSkipped()) {
        1: 5888-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5888-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 5889:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5890:        // emitted by default.
        -: 5891:        TestResult& test_result =
    #####: 5892:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5892-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5892-block  1
call    3 never executed
    #####: 5893:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5893-block  0
    %%%%%: 5893-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5894:          const TestPartResult& test_part_result =
    #####: 5895:              test_result.GetTestPartResult(j);
    %%%%%: 5895-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5896:          if (test_part_result.type() == TestPartResult::kSkip) {
    %%%%%: 5896-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5897:            const std::string& result = test_part_result.message();
    %%%%%: 5897-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5897-block  1
call    5 never executed
    $$$$$: 5897-block  2
call    6 never executed
    $$$$$: 5897-block  3
    #####: 5898:            printf("%s\n", result.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5899:          }
    %%%%%: 5899-block  0
call    0 never executed
    $$$$$: 5899-block  1
call    1 never executed
        -: 5900:        }
    #####: 5901:        fflush(stdout);
    %%%%%: 5901-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5901-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        1: 5902:      } else if (!Test::HasFatalFailure()) {
        1: 5902-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5902-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        2: 5903:        for (int test_index = 0; test_index < total_test_suite_count();
        1: 5903-block  0
        1: 5903-block  1
        2: 5903-block  2
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        -: 5904:             test_index++) {
        1: 5905:          GetMutableSuiteCase(test_index)->Run();
        1: 5905-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5905-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
       1*: 5906:          if (GTEST_FLAG_GET(fail_fast) &&
        1: 5906-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5906-block  1
        1: 5906-block  2
        1: 5906-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5907:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5907-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5907-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5907-block  2
branch  6 never executed
branch  7 never executed
    #####: 5908:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5908-block  0
    %%%%%: 5908-block  1
    %%%%%: 5908-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5909:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5909-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5909-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5910:            }
    #####: 5911:            break;
    %%%%%: 5911-block  0
        -: 5912:          }
        -: 5913:        }
    #####: 5914:      } else if (Test::HasFatalFailure()) {
    %%%%%: 5914-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5914-block  1
branch  3 never executed
branch  4 never executed
        -: 5915:        // If there was a fatal failure during the global setup then we know we
        -: 5916:        // aren't going to run any test. Explicitly mark all of the test as
        -: 5917:        // skipped to make this obvious in the output.
    #####: 5918:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5918-block  0
    %%%%%: 5918-block  1
    %%%%%: 5918-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5919:             test_index++) {
    #####: 5920:          GetMutableSuiteCase(test_index)->Skip();
    %%%%%: 5920-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5920-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5921:        }
        -: 5922:      }
        -: 5923:
        -: 5924:      // Tears down all environments in reverse order afterwards. If test
        -: 5925:      // environments aren't recreated for each iteration, only do so on the
        -: 5926:      // last iteration.
       1*: 5927:      if (i == repeat - 1 || recreate_environments_when_repeating) {
        1: 5927-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5927-block  1
branch  2 never executed
branch  3 never executed
        1: 5928:        repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5928-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5929:        std::for_each(environments_.rbegin(), environments_.rend(),
        1: 5929-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5929-block  1
    $$$$$: 5929-block  2
        -: 5930:                      TearDownEnvironment);
        1: 5931:        repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 5931-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5932:      }
        -: 5933:    }
        -: 5934:
        1: 5935:    elapsed_time_ = timer.Elapsed();
        1: 5935-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5936:
        -: 5937:    // Tells the unit test event listener that the test have just finished.
        1: 5938:    repeater->OnTestIterationEnd(*parent_, i);
        1: 5938-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5939:
        -: 5940:    // Gets the result and clears it.
        1: 5941:    if (!Passed()) {
        1: 5941-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5941-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5942:      failed = true;
    %%%%%: 5942-block  0
        -: 5943:    }
        -: 5944:
        -: 5945:    // Restores the original test order after the iteration.  This
        -: 5946:    // allows the user to quickly repro a failure that happens in the
        -: 5947:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5948:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5949:    // case the user somehow changes the value of the flag somewhere
        -: 5950:    // (it's always safe to unshuffle the test).
        1: 5951:    UnshuffleTests();
        1: 5951-block  0
call    0 returned 1
        -: 5952:
        1: 5953:    if (GTEST_FLAG_GET(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5954:      // Picks a new random seed for each iteration.
    #####: 5955:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 5955-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5955-block  1
        -: 5956:    }
        -: 5957:  }
        -: 5958:
        1: 5959:  repeater->OnTestProgramEnd(*parent_);
        1: 5959-block  0
call    0 returned 1
        -: 5960:
        1: 5961:  if (!gtest_is_initialized_before_run_all_tests) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5962:    ColoredPrintf(
    %%%%%: 5962-block  0
call    0 never executed
        -: 5963:        GTestColor::kRed,
        -: 5964:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 5965:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 5966:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 5967:        " will start to enforce the valid usage. "
        -: 5968:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 5969:  }
        -: 5970:
        1: 5971:  return !failed;
        1: 5971-block  0
        -: 5972:}
        -: 5973:
        -: 5974:#if GTEST_HAS_FILE_SYSTEM
        -: 5975:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 5976:// if the variable is present. If a file already exists at this location, this
        -: 5977:// function will write over it. If the variable is present, but the file cannot
        -: 5978:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 30%
        1: 5979:void WriteToShardStatusFileIfNeeded() {
        1: 5980:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 5980-block  0
call    0 returned 1
        1: 5981:  if (test_shard_file != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5982:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 5982-block  0
call    0 never executed
    #####: 5983:    if (file == nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5984:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 5984-block  0
call    0 never executed
        -: 5985:                    "Could not write to the test shard status file \"%s\" "
        -: 5986:                    "specified by the %s environment variable.\n",
        -: 5987:                    test_shard_file, kTestShardStatusFile);
    #####: 5988:      fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 5989:      exit(EXIT_FAILURE);
call    0 never executed
        -: 5990:    }
    #####: 5991:    fclose(file);
    %%%%%: 5991-block  0
call    0 never executed
        -: 5992:  }
        1: 5993:}
        -: 5994:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5995:
        -: 5996:// Checks whether sharding is enabled by examining the relevant
        -: 5997:// environment variable values. If the variables are present,
        -: 5998:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 5999:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 6000:// disabled because it must only be applied to the original test
        -: 6001:// process. Otherwise, we could filter out death test we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 9%
        2: 6002:bool ShouldShard(const char* total_shards_env, const char* shard_index_env,
        -: 6003:                 bool in_subprocess_for_death_test) {
        2: 6004:  if (in_subprocess_for_death_test) {
        2: 6004-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6005:    return false;
    %%%%%: 6005-block  0
        -: 6006:  }
        -: 6007:
        2: 6008:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 6008-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6009:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 6009-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 6010:
        2: 6011:  if (total_shards == -1 && shard_index == -1) {
        2: 6011-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 6011-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 6012:    return false;
        2: 6012-block  0
    #####: 6013:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 6013-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6013-block  1
branch  2 never executed
branch  3 never executed
    #####: 6014:    const Message msg = Message() << "Invalid environment variables: you have "
    %%%%%: 6014-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6014-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 6014-block  2
    #####: 6015:                                  << kTestShardIndex << " = " << shard_index
    %%%%%: 6015-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6015-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6015-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6016:                                  << ", but have left " << kTestTotalShards
    %%%%%: 6016-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6016-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6017:                                  << " unset.\n";
    %%%%%: 6017-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6017-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6018:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6018-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6018-block  1
call    7 never executed
    $$$$$: 6018-block  2
call    8 never executed
    $$$$$: 6018-block  3
    #####: 6019:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6019-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6020:    exit(EXIT_FAILURE);
    %%%%%: 6020-block  0
call    0 never executed
    #####: 6021:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 6021-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6021-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6021-block  2
call    4 never executed
    #####: 6022:    const Message msg = Message()
    %%%%%: 6022-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6022-block  1
    #####: 6023:                        << "Invalid environment variables: you have "
    %%%%%: 6023-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6024:                        << kTestTotalShards << " = " << total_shards
    %%%%%: 6024-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6024-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6024-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6025:                        << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 6025-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6025-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6025-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6025-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6026:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6026-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6026-block  1
call    7 never executed
    $$$$$: 6026-block  2
call    8 never executed
    $$$$$: 6026-block  3
    #####: 6027:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6027-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6028:    exit(EXIT_FAILURE);
    %%%%%: 6028-block  0
call    0 never executed
    #####: 6029:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 6029-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6029-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6029-block  2
call    4 never executed
        -: 6030:    const Message msg =
    #####: 6031:        Message() << "Invalid environment variables: we require 0 <= "
    %%%%%: 6031-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6031-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 6031-block  2
    #####: 6032:                  << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 6032-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6032-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6032-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6033:                  << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 6033-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6033-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6033-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6033-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6034:                  << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 6034-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6034-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6034-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6034-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6034-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 6034-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    #####: 6035:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6035-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6035-block  1
call    7 never executed
    $$$$$: 6035-block  2
call    8 never executed
    $$$$$: 6035-block  3
    #####: 6036:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6036-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6037:    exit(EXIT_FAILURE);
    %%%%%: 6037-block  0
call    0 never executed
    =====: 6038:  }
    $$$$$: 6038-block  0
call    0 never executed
        -: 6039:
    #####: 6040:  return total_shards > 1;
    %%%%%: 6040-block  0
        -: 6041:}
        -: 6042:
        -: 6043:// Parses the environment variable var as an Int32. If it is unset,
        -: 6044:// returns default_val. If it is not an Int32, prints an error
        -: 6045:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 35%
        4: 6046:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        4: 6047:  const char* str_val = posix::GetEnv(var);
        4: 6047-block  0
call    0 returned 4
        4: 6048:  if (str_val == nullptr) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6049:    return default_val;
        4: 6049-block  0
        -: 6050:  }
        -: 6051:
        -: 6052:  int32_t result;
    #####: 6053:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 6053-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6053-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6053-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6053-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6053-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 6053-block  5
call   15 never executed
    $$$$$: 6053-block  6
        -: 6054:                  str_val, &result)) {
    #####: 6055:    exit(EXIT_FAILURE);
    %%%%%: 6055-block  0
call    0 never executed
        -: 6056:  }
    #####: 6057:  return result;
    %%%%%: 6057-block  0
        -: 6058:}
        -: 6059:
        -: 6060:// Given the total number of shards, the shard index, and the test id,
        -: 6061:// returns true if and only if the test should be run on this shard. The test id
        -: 6062:// is some arbitrary but unique non-negative integer assigned to each test
        -: 6063:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6064:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6065:  return (test_id % total_shards) == shard_index;
    %%%%%: 6065-block  0
        -: 6066:}
        -: 6067:
        -: 6068:// Compares the name of each test with the user-specified filter to
        -: 6069:// decide whether the test should be run, then records the result in
        -: 6070:// each TestSuite and TestInfo object.
        -: 6071:// If shard_tests == true, further filters test based on sharding
        -: 6072:// variables in the environment - see
        -: 6073:// https://github.com/google/googletest/blob/main/docs/advanced.md
        -: 6074:// . Returns the number of test that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 67%
        1: 6075:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        -: 6076:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6077:                                   ? Int32FromEnvOrDie(kTestTotalShards, -1)
        1: 6077-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6077-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6077-block  2
        1: 6077-block  3
        1: 6078:                                   : -1;
        -: 6079:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6080:                                  ? Int32FromEnvOrDie(kTestShardIndex, -1)
        1: 6080-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6080-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6080-block  2
        1: 6080-block  3
        1: 6081:                                  : -1;
        -: 6082:
        -: 6083:  const PositiveAndNegativeUnitTestFilter gtest_flag_filter(
        1: 6084:      GTEST_FLAG_GET(filter));
        1: 6084-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 6085:  const UnitTestFilter disable_test_filter(kDisableTestFilter);
        1: 6085-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 6085-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
    $$$$$: 6085-block  2
    $$$$$: 6085-block  3
        -: 6086:  // num_runnable_tests are the number of test that will
        -: 6087:  // run across all shards (i.e., match filter and are not disabled).
        -: 6088:  // num_selected_tests are the number of test to be run on
        -: 6089:  // this shard.
        1: 6090:  int num_runnable_tests = 0;
        1: 6091:  int num_selected_tests = 0;
        2: 6092:  for (auto* test_suite : test_suites_) {
call    0 returned 1
call    1 returned 1
        1: 6092-block  0
call    2 returned 1
call    3 returned 1
        2: 6092-block  1
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        1: 6093:    const std::string& test_suite_name = test_suite->name();
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 6093-block  0
call    5 returned 1
    $$$$$: 6093-block  1
call    6 never executed
    $$$$$: 6093-block  2
        1: 6094:    test_suite->set_should_run(false);
call    0 returned 1
        -: 6095:
       13: 6096:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
       13: 6096-block  0
call    0 returned 13
call    1 returned 13
branch  2 taken 12
branch  3 taken 1 (fallthrough)
       12: 6097:      TestInfo* const test_info = test_suite->test_info_list()[j];
       12: 6097-block  0
call    0 returned 12
call    1 returned 12
       12: 6098:      const std::string test_name(test_info->name());
call    0 returned 12
call    1 returned 12
call    2 returned 12
branch  3 taken 12 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 6098-block  0
        -: 6099:      // A test is disabled if test suite name or test name matches
        -: 6100:      // kDisableTestFilter.
        -: 6101:      const bool is_disabled =
      24*: 6102:          disable_test_filter.MatchesName(test_suite_name) ||
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 6102-block  0
branch  3 taken 12 (fallthrough)
branch  4 taken 0
    %%%%%: 6102-block  1
       12: 6102-block  2
       12: 6103:          disable_test_filter.MatchesName(test_name);
       12: 6103-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 6103-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 12
       12: 6104:      test_info->is_disabled_ = is_disabled;
        -: 6105:
        -: 6106:      const bool matches_filter =
       12: 6107:          gtest_flag_filter.MatchesTest(test_suite_name, test_name);
       12: 6107-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 6108:      test_info->matches_filter_ = matches_filter;
        -: 6109:
       12: 6110:      const bool is_runnable =
       12: 6111:          (GTEST_FLAG_GET(also_run_disabled_tests) || !is_disabled) &&
       12: 6111-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 6111-block  1
branch  2 taken 12 (fallthrough)
branch  3 taken 0
       12: 6111-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 11
        1: 6111-block  3
       11: 6111-block  4
        -: 6112:          matches_filter;
        -: 6113:
        -: 6114:      const bool is_in_another_shard =
      12*: 6115:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
       12: 6115-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    %%%%%: 6115-block  1
       12: 6115-block  2
    #####: 6116:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6116-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       12: 6117:      test_info->is_in_another_shard_ = is_in_another_shard;
       12: 6118:      const bool is_selected = is_runnable && !is_in_another_shard;
       12: 6118-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 11
        1: 6118-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 6118-block  2
       11: 6118-block  3
        -: 6119:
       12: 6120:      num_runnable_tests += is_runnable;
       12: 6121:      num_selected_tests += is_selected;
        -: 6122:
       12: 6123:      test_info->should_run_ = is_selected;
       12: 6124:      test_suite->set_should_run(test_suite->should_run() || is_selected);
       12: 6124-block  0
call    0 returned 12
branch  1 taken 3 (fallthrough)
branch  2 taken 9
        3: 6124-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 2
       10: 6124-block  2
        2: 6124-block  3
       12: 6124-block  4
call    5 returned 12
       12: 6125:    }
call    0 returned 12
    $$$$$: 6125-block  0
call    1 never executed
        1: 6126:  }
        1: 6126-block  0
call    0 returned 1
    $$$$$: 6126-block  1
call    1 never executed
        1: 6127:  return num_selected_tests;
        1: 6127-block  0
        1: 6128:}
        1: 6128-block  0
call    0 returned 1
call    1 returned 1
    $$$$$: 6128-block  1
call    2 never executed
    $$$$$: 6128-block  2
call    3 never executed
        -: 6129:
        -: 6130:// Prints the given C-string on a single line by replacing all '\n'
        -: 6131:// characters with string "\\n".  If the output takes more than
        -: 6132:// max_length characters, only prints the first max_length characters
        -: 6133:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6134:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6135:  if (str != nullptr) {
    %%%%%: 6135-block  0
branch  0 never executed
branch  1 never executed
    #####: 6136:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6136-block  0
    %%%%%: 6136-block  1
    %%%%%: 6136-block  2
branch  0 never executed
branch  1 never executed
    #####: 6137:      if (i >= max_length) {
    %%%%%: 6137-block  0
branch  0 never executed
branch  1 never executed
    #####: 6138:        printf("...");
    %%%%%: 6138-block  0
call    0 never executed
    #####: 6139:        break;
        -: 6140:      }
    #####: 6141:      if (*str == '\n') {
    %%%%%: 6141-block  0
branch  0 never executed
branch  1 never executed
    #####: 6142:        printf("\\n");
    %%%%%: 6142-block  0
call    0 never executed
    #####: 6143:        i += 2;
        -: 6144:      } else {
    #####: 6145:        printf("%c", *str);
    %%%%%: 6145-block  0
call    0 never executed
    #####: 6146:        ++i;
        -: 6147:      }
        -: 6148:    }
        -: 6149:  }
    #####: 6150:}
        -: 6151:
        -: 6152:// Prints the names of the test matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 6153:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6154:  // Print at most this many characters for each type/value parameter.
    #####: 6155:  const int kMaxParamLength = 250;
        -: 6156:
    #####: 6157:  for (auto* test_suite : test_suites_) {
    %%%%%: 6157-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6157-block  1
call    2 never executed
    %%%%%: 6157-block  2
call    3 never executed
    %%%%%: 6157-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 6158:    bool printed_test_suite_name = false;
        -: 6159:
    #####: 6160:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 6160-block  0
    %%%%%: 6160-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6161:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 6161-block  0
call    0 never executed
call    1 never executed
    #####: 6162:      if (test_info->matches_filter_) {
branch  0 never executed
branch  1 never executed
    #####: 6163:        if (!printed_test_suite_name) {
    %%%%%: 6163-block  0
branch  0 never executed
branch  1 never executed
    #####: 6164:          printed_test_suite_name = true;
    #####: 6165:          printf("%s.", test_suite->name());
    %%%%%: 6165-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6166:          if (test_suite->type_param() != nullptr) {
    %%%%%: 6166-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6167:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6167-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6168:            // We print the type parameter on a single line to make
        -: 6169:            // the output easy to parse by a program.
    #####: 6170:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 6170-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6171:          }
    #####: 6172:          printf("\n");
    %%%%%: 6172-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6173:        }
    #####: 6174:        printf("  %s", test_info->name());
    %%%%%: 6174-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6175:        if (test_info->value_param() != nullptr) {
    %%%%%: 6175-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6176:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6176-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6177:          // We print the value parameter on a single line to make the
        -: 6178:          // output easy to parse by a program.
    #####: 6179:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6179-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6180:        }
    #####: 6181:        printf("\n");
    %%%%%: 6181-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6182:      }
        -: 6183:    }
        -: 6184:  }
    #####: 6185:  fflush(stdout);
    %%%%%: 6185-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6185-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 6186:#if GTEST_HAS_FILE_SYSTEM
    #####: 6187:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 6187-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6188:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 6188-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6188-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6188-block  2
    %%%%%: 6188-block  3
    %%%%%: 6188-block  4
branch  6 never executed
branch  7 never executed
    #####: 6189:    FILE* fileout = OpenFileForWriting(
    %%%%%: 6189-block  0
call    0 never executed
    %%%%%: 6189-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6189-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6189-block  3
call    8 never executed
    $$$$$: 6189-block  4
call    9 never executed
    $$$$$: 6189-block  5
    $$$$$: 6189-block  6
call   10 never executed
    $$$$$: 6189-block  7
    #####: 6190:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 6190-block  0
call    5 never executed
    $$$$$: 6190-block  1
    #####: 6191:    std::stringstream stream;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6192:    if (output_format == "xml") {
    %%%%%: 6192-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6193:      XmlUnitTestResultPrinter(
    %%%%%: 6193-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6193-block  1
call    4 never executed
    $$$$$: 6193-block  2
call    5 never executed
    $$$$$: 6193-block  3
    #####: 6194:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6194-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6194-block  1
call    4 never executed
    $$$$$: 6194-block  2
    #####: 6195:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 6195-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6196:    } else if (output_format == "json") {
    %%%%%: 6196-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6197:      JsonUnitTestResultPrinter(
    %%%%%: 6197-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6197-block  1
call    4 never executed
    $$$$$: 6197-block  2
call    5 never executed
    $$$$$: 6197-block  3
    #####: 6198:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6198-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6198-block  1
call    4 never executed
    $$$$$: 6198-block  2
    #####: 6199:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6199-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6200:    }
    #####: 6201:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6201-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6201-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 6202:    fclose(fileout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6203:  }
    %%%%%: 6203-block  0
call    0 never executed
    $$$$$: 6203-block  1
call    1 never executed
        -: 6204:#endif  // GTEST_HAS_FILE_SYSTEM
    #####: 6205:}
    %%%%%: 6205-block  0
call    0 never executed
    $$$$$: 6205-block  1
call    1 never executed
        -: 6206:
        -: 6207:// Sets the OS stack trace getter.
        -: 6208://
        -: 6209:// Does nothing if the input and the current OS stack trace getter are
        -: 6210:// the same; otherwise, deletes the old getter and makes the input the
        -: 6211:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6212:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6213:    OsStackTraceGetterInterface* getter) {
    #####: 6214:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6214-block  0
branch  0 never executed
branch  1 never executed
    #####: 6215:    delete os_stack_trace_getter_;
    %%%%%: 6215-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6215-block  1
call    2 never executed
    #####: 6216:    os_stack_trace_getter_ = getter;
    %%%%%: 6216-block  0
        -: 6217:  }
    #####: 6218:}
        -: 6219:
        -: 6220:// Returns the current OS stack trace getter if it is not NULL;
        -: 6221:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6222:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 7 returned 100% blocks executed 100%
        7: 6223:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
        7: 6224:  if (os_stack_trace_getter_ == nullptr) {
        7: 6224-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        -: 6225:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6226:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6227:#else
        1: 6228:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6228-block  0
call    0 returned 1
call    1 returned 1
        -: 6229:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6230:  }
        -: 6231:
        7: 6232:  return os_stack_trace_getter_;
        7: 6232-block  0
        -: 6233:}
        -: 6234:
        -: 6235:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 6 returned 100% blocks executed 83%
        6: 6236:TestResult* UnitTestImpl::current_test_result() {
        6: 6237:  if (current_test_info_ != nullptr) {
        6: 6237-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4: 6238:    return &current_test_info_->result_;
        4: 6238-block  0
        -: 6239:  }
        2: 6240:  if (current_test_suite_ != nullptr) {
        2: 6240-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6241:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6241-block  0
        -: 6242:  }
        2: 6243:  return &ad_hoc_test_result_;
        2: 6243-block  0
        -: 6244:}
        -: 6245:
        -: 6246:// Shuffles all test suites, and the test within each test suite,
        -: 6247:// making sure that death test are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6248:void UnitTestImpl::ShuffleTests() {
        -: 6249:  // Shuffles the death test suites.
    #####: 6250:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6250-block  0
call    0 never executed
call    1 never executed
        -: 6251:
        -: 6252:  // Shuffles the non-death test suites.
    #####: 6253:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
    #####: 6254:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
        -: 6255:
        -: 6256:  // Shuffles the test inside each test suite.
    #####: 6257:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6257-block  0
call    2 never executed
    %%%%%: 6257-block  1
call    3 never executed
    %%%%%: 6257-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 6258:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6259:  }
    #####: 6260:}
    %%%%%: 6260-block  0
        -: 6261:
        -: 6262:// Restores the test suites and test to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6263:void UnitTestImpl::UnshuffleTests() {
        2: 6264:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6264-block  0
        2: 6264-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        -: 6265:    // Unshuffles the test in each test suite.
        1: 6266:    test_suites_[i]->UnshuffleTests();
        1: 6266-block  0
call    0 returned 1
call    1 returned 1
        -: 6267:    // Resets the index of each test suite.
        1: 6268:    test_suite_indices_[i] = static_cast<int>(i);
call    0 returned 1
        -: 6269:  }
        1: 6270:}
        -: 6271:
        -: 6272:// Returns the current OS stack trace as an std::string.
        -: 6273://
        -: 6274:// The maximum number of stack frames to be included is specified by
        -: 6275:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6276:// specifies the number of top frames to be skipped, which doesn't
        -: 6277:// count against the number of frames to be included.
        -: 6278://
        -: 6279:// For example, if Foo() calls Bar(), which in turn calls
        -: 6280:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6281:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
        -: 6282:GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_ std::string
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 6283:GetCurrentOsStackTraceExceptTop(int skip_count) {
        -: 6284:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6285:  // to what the user really wants to skip.
    #####: 6286:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6286-block  0
call    0 never executed
call    1 never executed
        -: 6287:}
        -: 6288:
        -: 6289:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6290:// suppress unreachable code warnings.
        -: 6291:namespace {
        -: 6292:class ClassUniqueToAlwaysTrue {};
        -: 6293:}  // namespace
        -: 6294:
function _ZN7testing8internal6IsTrueEb called 35 returned 100% blocks executed 100%
       35: 6295:bool IsTrue(bool condition) { return condition; }
       35: 6295-block  0
        -: 6296:
function _ZN7testing8internal10AlwaysTrueEv called 10 returned 100% blocks executed 67%
       10: 6297:bool AlwaysTrue() {
        -: 6298:#if GTEST_HAS_EXCEPTIONS
        -: 6299:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6300:  // but it makes the compiler think that it may throw.
      10*: 6301:  if (IsTrue(false)) throw ClassUniqueToAlwaysTrue();
       10: 6301-block  0
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
    %%%%%: 6301-block  1
call    3 never executed
call    4 never executed
        -: 6302:#endif  // GTEST_HAS_EXCEPTIONS
       10: 6303:  return true;
       10: 6303-block  0
        -: 6304:}
        -: 6305:
        -: 6306:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6307:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6308:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6309:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6310:  const size_t prefix_len = strlen(prefix);
    #####: 6311:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6311-block  0
branch  0 never executed
branch  1 never executed
    #####: 6312:    *pstr += prefix_len;
    #####: 6313:    return true;
    %%%%%: 6313-block  0
        -: 6314:  }
    #####: 6315:  return false;
    %%%%%: 6315-block  0
        -: 6316:}
        -: 6317:
        -: 6318:// Parses a string as a command line flag.  The string should have
        -: 6319:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6320:// part can be omitted.
        -: 6321://
        -: 6322:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 4 returned 100% blocks executed 61%
        4: 6323:static const char* ParseFlagValue(const char* str, const char* flag_name,
        -: 6324:                                  bool def_optional) {
        -: 6325:  // str and flag must not be NULL.
       4*: 6326:  if (str == nullptr || flag_name == nullptr) return nullptr;
        4: 6326-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6326-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    %%%%%: 6326-block  2
        -: 6327:
        -: 6328:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        -: 6329:  const std::string flag_str =
        8: 6330:      std::string("--") + GTEST_FLAG_PREFIX_ + flag_name;
        4: 6330-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4: 6330-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4: 6330-block  2
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 4
call   11 returned 4
    $$$$$: 6330-block  3
    $$$$$: 6330-block  4
    $$$$$: 6330-block  5
        4: 6331:  const size_t flag_len = flag_str.length();
call    0 returned 4
        4: 6332:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 6332-block  0
        -: 6333:
        -: 6334:  // Skips the flag name.
        1: 6335:  const char* flag_end = str + flag_len;
        -: 6336:
        -: 6337:  // When def_optional is true, it's OK to not have a "=value" part.
       1*: 6338:  if (def_optional && (flag_end[0] == '\0')) {
        1: 6338-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6338-block  1
branch  2 never executed
branch  3 never executed
    #####: 6339:    return flag_end;
    %%%%%: 6339-block  0
        -: 6340:  }
        -: 6341:
        -: 6342:  // If def_optional is true and there are more characters after the
        -: 6343:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6344:  // the flag name.
       1*: 6345:  if (flag_end[0] != '=') return nullptr;
        1: 6345-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6345-block  1
        -: 6346:
        -: 6347:  // Returns the string after "=".
        1: 6348:  return flag_end + 1;
        1: 6348-block  0
        4: 6349:}
        4: 6349-block  0
call    0 returned 4
        -: 6350:
        -: 6351:// Parses a string for a bool flag, in the form of either
        -: 6352:// "--flag=value" or "--flag".
        -: 6353://
        -: 6354:// In the former case, the value is taken as true as long as it does
        -: 6355:// not start with '0', 'f', or 'F'.
        -: 6356://
        -: 6357:// In the latter case, the value is taken as true.
        -: 6358://
        -: 6359:// On success, stores the value of the flag in *value, and returns
        -: 6360:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL9ParseFlagEPKcS2_Pb called 3 returned 100% blocks executed 40%
        3: 6361:static bool ParseFlag(const char* str, const char* flag_name, bool* value) {
        -: 6362:  // Gets the value of the flag as a string.
        3: 6363:  const char* const value_str = ParseFlagValue(str, flag_name, true);
        3: 6363-block  0
call    0 returned 3
        -: 6364:
        -: 6365:  // Aborts if the parsing failed.
        3: 6366:  if (value_str == nullptr) return false;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 6366-block  0
        -: 6367:
        -: 6368:  // Converts the string value to a bool.
    #####: 6369:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6369-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6369-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 6369-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 6369-block  3
    %%%%%: 6369-block  4
    #####: 6370:  return true;
    %%%%%: 6370-block  0
        -: 6371:}
        -: 6372:
        -: 6373:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6374://
        -: 6375:// On success, stores the value of the flag in *value, and returns
        -: 6376:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal9ParseFlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6377:bool ParseFlag(const char* str, const char* flag_name, int32_t* value) {
        -: 6378:  // Gets the value of the flag as a string.
    #####: 6379:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6379-block  0
call    0 never executed
        -: 6380:
        -: 6381:  // Aborts if the parsing failed.
    #####: 6382:  if (value_str == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 6382-block  0
        -: 6383:
        -: 6384:  // Sets *value to the value of the flag.
    #####: 6385:  return ParseInt32(Message() << "The value of flag --" << flag_name, value_str,
    %%%%%: 6385-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6385-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6385-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6385-block  3
call   10 never executed
    $$$$$: 6385-block  4
call   11 never executed
    #####: 6386:                    value);
    %%%%%: 6386-block  0
        -: 6387:}
        -: 6388:
        -: 6389:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6390://
        -: 6391:// On success, stores the value of the flag in *value, and returns
        -: 6392:// true.  On failure, returns false without changing *value.
        -: 6393:template <typename String>
function _ZN7testing8internalL9ParseFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 1 returned 100% blocks executed 83%
        1: 6394:static bool ParseFlag(const char* str, const char* flag_name, String* value) {
        -: 6395:  // Gets the value of the flag as a string.
        1: 6396:  const char* const value_str = ParseFlagValue(str, flag_name, false);
        1: 6396-block  0
call    0 returned 1
        -: 6397:
        -: 6398:  // Aborts if the parsing failed.
       1*: 6399:  if (value_str == nullptr) return false;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6399-block  0
        -: 6400:
        -: 6401:  // Sets *value to the value of the flag.
        1: 6402:  *value = value_str;
        1: 6402-block  0
call    0 returned 1
        1: 6403:  return true;
        -: 6404:}
        -: 6405:
        -: 6406:// Determines whether a string has a prefix that Google Test uses for its
        -: 6407:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6408:// If Google Test detects that a command line flag has its prefix but is not
        -: 6409:// recognized, it will print its help message. Flags starting with
        -: 6410:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6411:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6412:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6413:  return (SkipPrefix("--", &str) || SkipPrefix("-", &str) ||
    %%%%%: 6413-block  0
call    0 never executed
    %%%%%: 6413-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6414:          SkipPrefix("/", &str)) &&
    %%%%%: 6414-block  0
call    0 never executed
    #####: 6415:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 6415-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6415-block  1
    %%%%%: 6415-block  2
    #####: 6416:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6416-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6417:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6417-block  0
call    0 never executed
    %%%%%: 6417-block  1
        -: 6418:}
        -: 6419:
        -: 6420:// Prints a string containing code-encoded text.  The following escape
        -: 6421:// sequences can be used in the string to control the text color:
        -: 6422://
        -: 6423://   @@    prints a single '@' character.
        -: 6424://   @R    changes the color to red.
        -: 6425://   @G    changes the color to green.
        -: 6426://   @Y    changes the color to yellow.
        -: 6427://   @D    changes to the default terminal text color.
        -: 6428://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6429:static void PrintColorEncoded(const char* str) {
    #####: 6430:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6430-block  0
        -: 6431:
        -: 6432:  // Conceptually, we split the string into segments divided by escape
        -: 6433:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6434:  // each iteration, the str pointer advances to the beginning of the
        -: 6435:  // next segment.
        -: 6436:  for (;;) {
    #####: 6437:    const char* p = strchr(str, '@');
    #####: 6438:    if (p == nullptr) {
    %%%%%: 6438-block  0
branch  0 never executed
branch  1 never executed
    #####: 6439:      ColoredPrintf(color, "%s", str);
    %%%%%: 6439-block  0
call    0 never executed
    #####: 6440:      return;
    %%%%%: 6440-block  0
        -: 6441:    }
        -: 6442:
    #####: 6443:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6443-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6443-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6443-block  2
call    8 never executed
call    9 never executed
    $$$$$: 6443-block  3
call   10 never executed
    $$$$$: 6443-block  4
    $$$$$: 6443-block  5
call   11 never executed
        -: 6444:
    #####: 6445:    const char ch = p[1];
    #####: 6446:    str = p + 2;
    #####: 6447:    if (ch == '@') {
branch  0 never executed
branch  1 never executed
    #####: 6448:      ColoredPrintf(color, "@");
    %%%%%: 6448-block  0
call    0 never executed
    #####: 6449:    } else if (ch == 'D') {
    %%%%%: 6449-block  0
branch  0 never executed
branch  1 never executed
    #####: 6450:      color = GTestColor::kDefault;
    %%%%%: 6450-block  0
    #####: 6451:    } else if (ch == 'R') {
    %%%%%: 6451-block  0
branch  0 never executed
branch  1 never executed
    #####: 6452:      color = GTestColor::kRed;
    %%%%%: 6452-block  0
    #####: 6453:    } else if (ch == 'G') {
    %%%%%: 6453-block  0
branch  0 never executed
branch  1 never executed
    #####: 6454:      color = GTestColor::kGreen;
    %%%%%: 6454-block  0
    #####: 6455:    } else if (ch == 'Y') {
    %%%%%: 6455-block  0
branch  0 never executed
branch  1 never executed
    #####: 6456:      color = GTestColor::kYellow;
    %%%%%: 6456-block  0
        -: 6457:    } else {
    #####: 6458:      --str;
    %%%%%: 6458-block  0
        -: 6459:    }
    #####: 6460:  }
    %%%%%: 6460-block  0
        -: 6461:}
        -: 6462:
        -: 6463:static const char kColorEncodedHelpMessage[] =
        -: 6464:    "This program contains test written using " GTEST_NAME_
        -: 6465:    ". You can use the\n"
        -: 6466:    "following command line flags to control its behavior:\n"
        -: 6467:    "\n"
        -: 6468:    "Test Selection:\n"
        -: 6469:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6470:    "list_tests@D\n"
        -: 6471:    "      List the names of all test instead of running them. The name of\n"
        -: 6472:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6473:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6474:    "filter=@YPOSITIVE_PATTERNS"
        -: 6475:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6476:    "      Run only the test whose name matches one of the positive patterns "
        -: 6477:    "but\n"
        -: 6478:    "      none of the negative patterns. '?' matches any single character; "
        -: 6479:    "'*'\n"
        -: 6480:    "      matches any substring; ':' separates two patterns.\n"
        -: 6481:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6482:    "also_run_disabled_tests@D\n"
        -: 6483:    "      Run all disabled test too.\n"
        -: 6484:    "\n"
        -: 6485:    "Test Execution:\n"
        -: 6486:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6487:    "repeat=@Y[COUNT]@D\n"
        -: 6488:    "      Run the test repeatedly; use a negative count to repeat forever.\n"
        -: 6489:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6490:    "shuffle@D\n"
        -: 6491:    "      Randomize test' orders on every iteration.\n"
        -: 6492:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6493:    "random_seed=@Y[NUMBER]@D\n"
        -: 6494:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6495:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6496:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6497:    "recreate_environments_when_repeating@D\n"
        -: 6498:    "      Sets up and tears down the global test environment on each repeat\n"
        -: 6499:    "      of the test.\n"
        -: 6500:    "\n"
        -: 6501:    "Test Output:\n"
        -: 6502:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6503:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6504:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6505:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6506:    "brief=1@D\n"
        -: 6507:    "      Only print test failures.\n"
        -: 6508:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6509:    "print_time=0@D\n"
        -: 6510:    "      Don't print the elapsed time of each test.\n"
        -: 6511:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6512:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6513:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6514:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6515:    "given\n"
        -: 6516:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6517:#if GTEST_CAN_STREAM_RESULTS_
        -: 6518:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6519:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6520:    "      Stream test results to the given server.\n"
        -: 6521:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6522:    "\n"
        -: 6523:    "Assertion Behavior:\n"
        -: 6524:#if defined(GTEST_HAS_DEATH_TEST) && !defined(GTEST_OS_WINDOWS)
        -: 6525:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6526:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6527:    "      Set the default death test style.\n"
        -: 6528:#endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6529:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6530:    "break_on_failure@D\n"
        -: 6531:    "      Turn assertion failures into debugger break-points.\n"
        -: 6532:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6533:    "throw_on_failure@D\n"
        -: 6534:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6535:    "      test framework.\n"
        -: 6536:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6537:    "catch_exceptions=0@D\n"
        -: 6538:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6539:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6540:    "\n"
        -: 6541:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6542:    "list_tests@D, you can alternatively set "
        -: 6543:    "the corresponding\n"
        -: 6544:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6545:    "to\n"
        -: 6546:    "disable colored text output, you can either specify "
        -: 6547:    "@G--" GTEST_FLAG_PREFIX_
        -: 6548:    "color=no@D or set\n"
        -: 6549:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6550:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6551:    "\n"
        -: 6552:    "For more information, please read the " GTEST_NAME_
        -: 6553:    " documentation at\n"
        -: 6554:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6555:    "\n"
        -: 6556:    "(not one in your own code or test), please report it to\n"
        -: 6557:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6558:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 1 returned 100% blocks executed 11%
        1: 6559:static bool ParseGoogleTestFlag(const char* const arg) {
        -: 6560:#define GTEST_INTERNAL_PARSE_FLAG(flag_name)  \
        -: 6561:  do {                                        \
        -: 6562:    auto value = GTEST_FLAG_GET(flag_name);   \
        -: 6563:    if (ParseFlag(arg, #flag_name, &value)) { \
        -: 6564:      GTEST_FLAG_SET(flag_name, value);       \
        -: 6565:      return true;                            \
        -: 6566:    }                                         \
        -: 6567:  } while (false)
        -: 6568:
       1*: 6569:  GTEST_INTERNAL_PARSE_FLAG(also_run_disabled_tests);
        1: 6569-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6569-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6569-block  2
       1*: 6570:  GTEST_INTERNAL_PARSE_FLAG(break_on_failure);
        1: 6570-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6570-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6570-block  2
       1*: 6571:  GTEST_INTERNAL_PARSE_FLAG(catch_exceptions);
        1: 6571-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6571-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6571-block  2
       1*: 6572:  GTEST_INTERNAL_PARSE_FLAG(color);
        1: 6572-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6572-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6572-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1: 6572-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 6572-block  4
    %%%%%: 6572-block  5
        1: 6572-block  6
call   11 returned 1
branch 12 taken 0 (fallthrough)
branch 13 taken 1
    $$$$$: 6572-block  7
call   14 never executed
    #####: 6573:  GTEST_INTERNAL_PARSE_FLAG(death_test_style);
    %%%%%: 6573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6573-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6573-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6573-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6573-block  4
    %%%%%: 6573-block  5
    %%%%%: 6573-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 6573-block  7
call   14 never executed
    #####: 6574:  GTEST_INTERNAL_PARSE_FLAG(death_test_use_fork);
    %%%%%: 6574-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6574-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6574-block  2
    #####: 6575:  GTEST_INTERNAL_PARSE_FLAG(fail_fast);
    %%%%%: 6575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6575-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6575-block  2
    #####: 6576:  GTEST_INTERNAL_PARSE_FLAG(filter);
    %%%%%: 6576-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6576-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6576-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6576-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6576-block  4
    %%%%%: 6576-block  5
    %%%%%: 6576-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 6576-block  7
call   14 never executed
    #####: 6577:  GTEST_INTERNAL_PARSE_FLAG(internal_run_death_test);
    %%%%%: 6577-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6577-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6577-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6577-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6577-block  4
    %%%%%: 6577-block  5
    %%%%%: 6577-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 6577-block  7
call   14 never executed
    #####: 6578:  GTEST_INTERNAL_PARSE_FLAG(list_tests);
    %%%%%: 6578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6578-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6578-block  2
    #####: 6579:  GTEST_INTERNAL_PARSE_FLAG(output);
    %%%%%: 6579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6579-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6579-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6579-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6579-block  4
    %%%%%: 6579-block  5
    %%%%%: 6579-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 6579-block  7
call   14 never executed
    #####: 6580:  GTEST_INTERNAL_PARSE_FLAG(brief);
    %%%%%: 6580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6580-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6580-block  2
    #####: 6581:  GTEST_INTERNAL_PARSE_FLAG(print_time);
    %%%%%: 6581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6581-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6581-block  2
    #####: 6582:  GTEST_INTERNAL_PARSE_FLAG(print_utf8);
    %%%%%: 6582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6582-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6582-block  2
    #####: 6583:  GTEST_INTERNAL_PARSE_FLAG(random_seed);
    %%%%%: 6583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6583-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6583-block  2
    #####: 6584:  GTEST_INTERNAL_PARSE_FLAG(repeat);
    %%%%%: 6584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6584-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6584-block  2
    #####: 6585:  GTEST_INTERNAL_PARSE_FLAG(recreate_environments_when_repeating);
    %%%%%: 6585-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6585-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6585-block  2
    #####: 6586:  GTEST_INTERNAL_PARSE_FLAG(shuffle);
    %%%%%: 6586-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6586-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6586-block  2
    #####: 6587:  GTEST_INTERNAL_PARSE_FLAG(stack_trace_depth);
    %%%%%: 6587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6587-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6587-block  2
    #####: 6588:  GTEST_INTERNAL_PARSE_FLAG(stream_result_to);
    %%%%%: 6588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6588-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6588-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6588-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6588-block  4
    %%%%%: 6588-block  5
    %%%%%: 6588-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 6588-block  7
call   14 never executed
    #####: 6589:  GTEST_INTERNAL_PARSE_FLAG(throw_on_failure);
    %%%%%: 6589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6589-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6589-block  2
    #####: 6590:  return false;
    %%%%%: 6590-block  0
        -: 6591:}
        -: 6592:
        -: 6593:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6594:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6595:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6595-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6596:  if (!flagfile) {
    %%%%%: 6596-block  0
branch  0 never executed
branch  1 never executed
    #####: 6597:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG_GET(flagfile)
    %%%%%: 6597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6597-block  1
call    3 never executed
    %%%%%: 6597-block  2
call    4 never executed
    $$$$$: 6597-block  3
call    5 never executed
    $$$$$: 6597-block  4
    #####: 6598:                      << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6598-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6598-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 6599:  }
    #####: 6600:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6600-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6601:  posix::FClose(flagfile);
    %%%%%: 6601-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6602:  std::vector<std::string> lines;
    %%%%%: 6602-block  0
call    0 never executed
    #####: 6603:  SplitString(contents, '\n', &lines);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6604:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6604-block  0
    %%%%%: 6604-block  1
    %%%%%: 6604-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6605:    if (lines[i].empty()) continue;
    %%%%%: 6605-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6605-block  1
    #####: 6606:    if (!ParseGoogleTestFlag(lines[i].c_str())) g_help_flag = true;
    %%%%%: 6606-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6606-block  1
branch  5 never executed
branch  6 never executed
    %%%%%: 6606-block  2
        -: 6607:  }
    #####: 6608:}
    %%%%%: 6608-block  0
call    0 never executed
call    1 never executed
    $$$$$: 6608-block  1
call    2 never executed
    $$$$$: 6608-block  2
call    3 never executed
        -: 6609:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
        -: 6610:
        -: 6611:// Parses the command line for Google Test flags, without initializing
        -: 6612:// other parts of Google Test.  The type parameter CharType can be
        -: 6613:// instantiated to either char or wchar_t.
        -: 6614:template <typename CharType>
       1*: 6615:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       1*: 6616:  std::string flagfile_value;
       2*: 6617:  for (int i = 1; i < *argc; i++) {
       1*: 6618:    const std::string arg_string = StreamableToString(argv[i]);
       1*: 6619:    const char* const arg = arg_string.c_str();
        -: 6620:
        -: 6621:    using internal::ParseFlag;
        -: 6622:
       1*: 6623:    bool remove_flag = false;
       1*: 6624:    if (ParseGoogleTestFlag(arg)) {
       1*: 6625:      remove_flag = true;
        -: 6626:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6627:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    #####: 6628:      GTEST_FLAG_SET(flagfile, flagfile_value);
    #####: 6629:      LoadFlagsFromFile(flagfile_value);
    #####: 6630:      remove_flag = true;
        -: 6631:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6632:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
        -: 6633:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6634:      // internal ones) trigger help display.
    #####: 6635:      g_help_flag = true;
        -: 6636:    }
        -: 6637:
       1*: 6638:    if (remove_flag) {
        -: 6639:      // Shift the remainder of the argv list left by one.  Note
        -: 6640:      // that argv has (*argc + 1) elements, the last one always being
        -: 6641:      // NULL.  The following loop moves the trailing NULL element as
        -: 6642:      // well.
       2*: 6643:      for (int j = i; j != *argc; j++) {
       1*: 6644:        argv[j] = argv[j + 1];
        -: 6645:      }
        -: 6646:
        -: 6647:      // Decrements the argument count.
       1*: 6648:      (*argc)--;
        -: 6649:
        -: 6650:      // We also need to decrement the iterator as we just removed
        -: 6651:      // an element.
       1*: 6652:      i--;
        -: 6653:    }
        -: 6654:  }
        -: 6655:
       1*: 6656:  if (g_help_flag) {
        -: 6657:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6658:    // latter may not be called at all if the user is using Google
        -: 6659:    // Test with another testing framework.
    #####: 6660:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6661:  }
       1*: 6662:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6615:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6616:  std::string flagfile_value;
    %%%%%: 6616-block  0
call    0 never executed
    #####: 6617:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6617-block  0
call    0 never executed
    %%%%%: 6617-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 6617-block  2
call    3 never executed
    #####: 6618:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6618-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6619:    const char* const arg = arg_string.c_str();
    %%%%%: 6619-block  0
call    0 never executed
        -: 6620:
        -: 6621:    using internal::ParseFlag;
        -: 6622:
    #####: 6623:    bool remove_flag = false;
    #####: 6624:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6624-block  0
branch  3 never executed
branch  4 never executed
    #####: 6625:      remove_flag = true;
    %%%%%: 6625-block  0
        -: 6626:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6627:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6627-block  1
branch  3 never executed
branch  4 never executed
    #####: 6628:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6628-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6629:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6630:      remove_flag = true;
    %%%%%: 6630-block  0
        -: 6631:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6632:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6632-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6632-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6632-block  2
    %%%%%: 6632-block  3
    %%%%%: 6632-block  4
branch  6 never executed
branch  7 never executed
        -: 6633:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6634:      // internal ones) trigger help display.
    #####: 6635:      g_help_flag = true;
    %%%%%: 6635-block  0
        -: 6636:    }
        -: 6637:
    #####: 6638:    if (remove_flag) {
    %%%%%: 6638-block  0
branch  0 never executed
branch  1 never executed
        -: 6639:      // Shift the remainder of the argv list left by one.  Note
        -: 6640:      // that argv has (*argc + 1) elements, the last one always being
        -: 6641:      // NULL.  The following loop moves the trailing NULL element as
        -: 6642:      // well.
    #####: 6643:      for (int j = i; j != *argc; j++) {
    %%%%%: 6643-block  0
    %%%%%: 6643-block  1
branch  0 never executed
branch  1 never executed
    #####: 6644:        argv[j] = argv[j + 1];
    %%%%%: 6644-block  0
        -: 6645:      }
        -: 6646:
        -: 6647:      // Decrements the argument count.
    #####: 6648:      (*argc)--;
        -: 6649:
        -: 6650:      // We also need to decrement the iterator as we just removed
        -: 6651:      // an element.
    #####: 6652:      i--;
    %%%%%: 6652-block  0
        -: 6653:    }
        -: 6654:  }
        -: 6655:
    #####: 6656:  if (g_help_flag) {
    %%%%%: 6656-block  0
branch  0 never executed
branch  1 never executed
        -: 6657:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6658:    // latter may not be called at all if the user is using Google
        -: 6659:    // Test with another testing framework.
    #####: 6660:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6661:  }
    #####: 6662:}
    %%%%%: 6662-block  0
call    0 never executed
    $$$$$: 6662-block  1
call    1 never executed
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 50%
        1: 6615:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        1: 6616:  std::string flagfile_value;
        1: 6616-block  0
call    0 returned 1
        2: 6617:  for (int i = 1; i < *argc; i++) {
        1: 6617-block  0
call    0 returned 1
        2: 6617-block  1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
    $$$$$: 6617-block  2
call    3 never executed
        1: 6618:    const std::string arg_string = StreamableToString(argv[i]);
        1: 6618-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6619:    const char* const arg = arg_string.c_str();
        1: 6619-block  0
call    0 returned 1
        -: 6620:
        -: 6621:    using internal::ParseFlag;
        -: 6622:
        1: 6623:    bool remove_flag = false;
        1: 6624:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6624-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 6625:      remove_flag = true;
        1: 6625-block  0
        -: 6626:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6627:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6627-block  1
branch  3 never executed
branch  4 never executed
    #####: 6628:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6628-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6629:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6630:      remove_flag = true;
    %%%%%: 6630-block  0
        -: 6631:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6632:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6632-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6632-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6632-block  2
    %%%%%: 6632-block  3
    %%%%%: 6632-block  4
branch  6 never executed
branch  7 never executed
        -: 6633:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6634:      // internal ones) trigger help display.
    #####: 6635:      g_help_flag = true;
    %%%%%: 6635-block  0
        -: 6636:    }
        -: 6637:
        1: 6638:    if (remove_flag) {
        1: 6638-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 6639:      // Shift the remainder of the argv list left by one.  Note
        -: 6640:      // that argv has (*argc + 1) elements, the last one always being
        -: 6641:      // NULL.  The following loop moves the trailing NULL element as
        -: 6642:      // well.
        2: 6643:      for (int j = i; j != *argc; j++) {
        1: 6643-block  0
        2: 6643-block  1
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1: 6644:        argv[j] = argv[j + 1];
        1: 6644-block  0
        -: 6645:      }
        -: 6646:
        -: 6647:      // Decrements the argument count.
        1: 6648:      (*argc)--;
        -: 6649:
        -: 6650:      // We also need to decrement the iterator as we just removed
        -: 6651:      // an element.
        1: 6652:      i--;
        1: 6652-block  0
        -: 6653:    }
        -: 6654:  }
        -: 6655:
        1: 6656:  if (g_help_flag) {
        1: 6656-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6657:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6658:    // latter may not be called at all if the user is using Google
        -: 6659:    // Test with another testing framework.
    #####: 6660:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6661:  }
        1: 6662:}
        1: 6662-block  0
call    0 returned 1
    $$$$$: 6662-block  1
call    1 never executed
------------------
        -: 6663:
        -: 6664:// Parses the command line for Google Test flags, without initializing
        -: 6665:// other parts of Google Test.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 6666:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        -: 6667:#ifdef GTEST_HAS_ABSL
        -: 6668:  if (*argc > 0) {
        -: 6669:    // absl::ParseCommandLine() requires *argc > 0.
        -: 6670:    auto positional_args = absl::flags_internal::ParseCommandLineImpl(
        -: 6671:        *argc, argv, absl::flags_internal::UsageFlagsAction::kHandleUsage,
        -: 6672:        absl::flags_internal::OnUndefinedFlag::kReportUndefined);
        -: 6673:    // Any command-line positional arguments not part of any command-line flag
        -: 6674:    // (or arguments to a flag) are copied back out to argv, with the program
        -: 6675:    // invocation name at position 0, and argc is resized. This includes
        -: 6676:    // positional arguments after the flag-terminating delimiter '--'.
        -: 6677:    // See https://abseil.io/docs/cpp/guides/flags.
        -: 6678:    std::copy(positional_args.begin(), positional_args.end(), argv);
        -: 6679:    if (static_cast<int>(positional_args.size()) < *argc) {
        -: 6680:      argv[positional_args.size()] = nullptr;
        -: 6681:      *argc = static_cast<int>(positional_args.size());
        -: 6682:    }
        -: 6683:  }
        -: 6684:#else
        1: 6685:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 6685-block  0
call    0 returned 1
        -: 6686:#endif
        -: 6687:
        -: 6688:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6689:  // *_NSGetArgv() == argv
        -: 6690:  // Only applicable to char** version of argv
        -: 6691:#ifdef GTEST_OS_MAC
        -: 6692:#ifndef GTEST_OS_IOS
        -: 6693:  if (*_NSGetArgv() == argv) {
        -: 6694:    *_NSGetArgc() = *argc;
        -: 6695:  }
        -: 6696:#endif
        -: 6697:#endif
        1: 6698:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6699:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6700:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6700-block  0
call    0 never executed
    #####: 6701:}
        -: 6702:
        -: 6703:// The internal implementation of InitGoogleTest().
        -: 6704://
        -: 6705:// The type parameter CharType can be instantiated to either char or
        -: 6706:// wchar_t.
        -: 6707:template <typename CharType>
       1*: 6708:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6709:  // We don't want to run the initialization code twice.
       1*: 6710:  if (GTestIsInitialized()) return;
        -: 6711:
       1*: 6712:  if (*argc <= 0) return;
        -: 6713:
       1*: 6714:  g_argvs.clear();
       3*: 6715:  for (int i = 0; i != *argc; i++) {
       2*: 6716:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6717:  }
        -: 6718:
        -: 6719:#ifdef GTEST_HAS_ABSL
        -: 6720:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6721:
        -: 6722:  // When using the Abseil Flags library, set the program usage message to the
        -: 6723:  // help message, but remove the color-encoding from the message first.
        -: 6724:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6725:      kColorEncodedHelpMessage,
        -: 6726:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6727:#endif  // GTEST_HAS_ABSL
        -: 6728:
       1*: 6729:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 6730:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6731:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6708:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6709:  // We don't want to run the initialization code twice.
    #####: 6710:  if (GTestIsInitialized()) return;
    %%%%%: 6710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6710-block  1
        -: 6711:
    #####: 6712:  if (*argc <= 0) return;
    %%%%%: 6712-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6712-block  1
        -: 6713:
    #####: 6714:  g_argvs.clear();
    %%%%%: 6714-block  0
call    0 never executed
    #####: 6715:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6715-block  0
branch  0 never executed
branch  1 never executed
    #####: 6716:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6716-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6716-block  1
call    4 never executed
    $$$$$: 6716-block  2
call    5 never executed
        -: 6717:  }
        -: 6718:
        -: 6719:#ifdef GTEST_HAS_ABSL
        -: 6720:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6721:
        -: 6722:  // When using the Abseil Flags library, set the program usage message to the
        -: 6723:  // help message, but remove the color-encoding from the message first.
        -: 6724:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6725:      kColorEncodedHelpMessage,
        -: 6726:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6727:#endif  // GTEST_HAS_ABSL
        -: 6728:
    #####: 6729:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6729-block  0
call    0 never executed
    #####: 6730:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6731:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 79%
        1: 6708:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6709:  // We don't want to run the initialization code twice.
       1*: 6710:  if (GTestIsInitialized()) return;
        1: 6710-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6710-block  1
        -: 6711:
       1*: 6712:  if (*argc <= 0) return;
        1: 6712-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6712-block  1
        -: 6713:
        1: 6714:  g_argvs.clear();
        1: 6714-block  0
call    0 returned 1
        3: 6715:  for (int i = 0; i != *argc; i++) {
        3: 6715-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2: 6716:    g_argvs.push_back(StreamableToString(argv[i]));
        2: 6716-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 6716-block  1
call    4 returned 2
    $$$$$: 6716-block  2
call    5 never executed
        -: 6717:  }
        -: 6718:
        -: 6719:#ifdef GTEST_HAS_ABSL
        -: 6720:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6721:
        -: 6722:  // When using the Abseil Flags library, set the program usage message to the
        -: 6723:  // help message, but remove the color-encoding from the message first.
        -: 6724:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6725:      kColorEncodedHelpMessage,
        -: 6726:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6727:#endif  // GTEST_HAS_ABSL
        -: 6728:
        1: 6729:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 6729-block  0
call    0 returned 1
        1: 6730:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
        -: 6731:}
------------------
        -: 6732:
        -: 6733:}  // namespace internal
        -: 6734:
        -: 6735:// Initializes Google Test.  This must be called before calling
        -: 6736:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6737:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6738:// seen, it is removed from argv, and *argc is decremented.
        -: 6739://
        -: 6740:// No value is returned.  Instead, the Google Test flag variables are
        -: 6741:// updated.
        -: 6742://
        -: 6743:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 6744:void InitGoogleTest(int* argc, char** argv) {
        -: 6745:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6746:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6747:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6748:  internal::InitGoogleTestImpl(argc, argv);
        1: 6748-block  0
call    0 returned 1
        -: 6749:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6750:}
        -: 6751:
        -: 6752:// This overloaded version can be used in Windows programs compiled in
        -: 6753:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6754:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6755:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6756:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6757:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6758:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6758-block  0
call    0 never executed
        -: 6759:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6760:}
        -: 6761:
        -: 6762:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6763:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 6764:void InitGoogleTest() {
        -: 6765:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6766:  int argc = 1;
    #####: 6767:  const auto arg0 = "dummy";
    #####: 6768:  char* argv0 = const_cast<char*>(arg0);
    #####: 6769:  char** argv = &argv0;
        -: 6770:
        -: 6771:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6772:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6773:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6774:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 6774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6775:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6776:}
    %%%%%: 6776-block  0
        -: 6777:
        -: 6778:#if !defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_) || \
        -: 6779:    !defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6780:// Returns the value of the first environment variable that is set and contains
        -: 6781:// a non-empty string. If there are none, returns the "fallback" string. Adds
        -: 6782:// the director-separator character as a suffix if not provided in the
        -: 6783:// environment variable value.
function _ZN7testingL13GetDirFromEnvESt16initializer_listIPKcES2_c called 0 returned 0% blocks executed 0%
    #####: 6784:static std::string GetDirFromEnv(
        -: 6785:    std::initializer_list<const char*> environment_variables,
        -: 6786:    const char* fallback, char separator) {
    #####: 6787:  for (const char* variable_name : environment_variables) {
    %%%%%: 6787-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6787-block  1
    %%%%%: 6787-block  2
branch  2 never executed
branch  3 never executed
    #####: 6788:    const char* value = internal::posix::GetEnv(variable_name);
    %%%%%: 6788-block  0
call    0 never executed
    #####: 6789:    if (value != nullptr && value[0] != '\0') {
branch  0 never executed
branch  1 never executed
    %%%%%: 6789-block  0
branch  2 never executed
branch  3 never executed
    #####: 6790:      if (value[strlen(value) - 1] != separator) {
    %%%%%: 6790-block  0
branch  0 never executed
branch  1 never executed
    #####: 6791:        return std::string(value).append(1, separator);
    %%%%%: 6791-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6791-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6791-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6791-block  3
call   10 never executed
call   11 never executed
    $$$$$: 6791-block  4
call   12 never executed
    $$$$$: 6791-block  5
    $$$$$: 6791-block  6
call   13 never executed
    $$$$$: 6791-block  7
        -: 6792:      }
    #####: 6793:      return value;
    %%%%%: 6793-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6793-block  1
call    4 never executed
    $$$$$: 6793-block  2
call    5 never executed
    $$$$$: 6793-block  3
        -: 6794:    }
        -: 6795:  }
    #####: 6796:  return fallback;
    %%%%%: 6796-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6796-block  1
call    4 never executed
    $$$$$: 6796-block  2
call    5 never executed
        -: 6797:}
        -: 6798:#endif
        -: 6799:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6800:std::string TempDir() {
        -: 6801:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6802:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6803:#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)
    #####: 6804:  return GetDirFromEnv({"TEST_TMPDIR", "TEMP"}, "\\temp\\", '\\');
    %%%%%: 6804-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6804-block  1
    %%%%%: 6804-block  2
        -: 6805:#elif defined(GTEST_OS_LINUX_ANDROID)
        -: 6806:  return GetDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/data/local/tmp/", '/');
        -: 6807:#else
        -: 6808:  return GetDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/tmp/", '/');
        -: 6809:#endif
        -: 6810:}
        -: 6811:
        -: 6812:#if GTEST_HAS_FILE_SYSTEM && !defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6813:// Returns the directory path (including terminating separator) of the current
        -: 6814:// executable as derived from argv[0].
function _ZN7testingL29GetCurrentExecutableDirectoryEv called 0 returned 0% blocks executed 0%
    #####: 6815:static std::string GetCurrentExecutableDirectory() {
    #####: 6816:  internal::FilePath argv_0(internal::GetArgvs()[0]);
    %%%%%: 6816-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6816-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 6816-block  2
    #####: 6817:  return argv_0.RemoveFileName().string();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6817-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6817-block  1
call    7 never executed
    %%%%%: 6817-block  2
    $$$$$: 6817-block  3
call    8 never executed
    $$$$$: 6817-block  4
    #####: 6818:}
call    0 never executed
    $$$$$: 6818-block  0
call    1 never executed
        -: 6819:#endif
        -: 6820:
        -: 6821:#if GTEST_HAS_FILE_SYSTEM
function _ZN7testing6SrcDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6822:std::string SrcDir() {
        -: 6823:#if defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6824:  return GTEST_CUSTOM_SRCDIR_FUNCTION_();
        -: 6825:#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)
    #####: 6826:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
    %%%%%: 6826-block  0
call    0 never executed
    $$$$$: 6826-block  1
call    1 never executed
    #####: 6827:                       '\\');
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6827-block  0
call    4 never executed
    %%%%%: 6827-block  1
    $$$$$: 6827-block  2
        -: 6828:#elif defined(GTEST_OS_LINUX_ANDROID)
        -: 6829:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
        -: 6830:                       '/');
        -: 6831:#else
        -: 6832:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
        -: 6833:                       '/');
        -: 6834:#endif
        -: 6835:}
        -: 6836:#endif
        -: 6837:
        -: 6838:// Class ScopedTrace
        -: 6839:
        -: 6840:// Pushes the given source file location and message onto a per-thread
        -: 6841:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6842:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6843:  internal::TraceInfo trace;
    %%%%%: 6843-block  0
call    0 never executed
    #####: 6844:  trace.file = file;
    #####: 6845:  trace.line = line;
    #####: 6846:  trace.message.swap(message);
call    0 never executed
        -: 6847:
    #####: 6848:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6848-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6849:}
    %%%%%: 6849-block  0
call    0 never executed
    $$$$$: 6849-block  1
call    1 never executed
        -: 6850:
        -: 6851:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 6852:ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6853:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6853-block  0
call    0 never executed
call    1 never executed
    #####: 6854:}
        -: 6855:
        -: 6856:}  // namespace testing
