        -:    0:Source:D:/BUAA_Files/Learning_Files/Senior_Three_2/BUAA_SE/Pair_Project/2023_Pair/src/FileIO.h
        -:    0:Graph:D:\BUAA_Files\Learning_Files\Senior_Three_2\BUAA_SE\Pair_Project\2023_Pair\cmake-build-debug-coverage\CMakeFiles\coretest.dir\test\coretest\coretest.cpp.gcno
        -:    0:Data:D:\BUAA_Files\Learning_Files\Senior_Three_2\BUAA_SE\Pair_Project\2023_Pair\cmake-build-debug-coverage\CMakeFiles\coretest.dir\test\coretest\coretest.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef WORDLIST_FILEIO_H
        -:    2:#define WORDLIST_FILEIO_H
        -:    3:
        -:    4:#include "bits/stdc++.h"
        -:    5:#include "Node.h"
        -:    6:
        -:    7:using namespace std;
        -:    8:
        -:    9:class FileIO {
        -:   10:public:
        -:   11:    // 读文件，输出文件
function _ZN6FileIO9read_fileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 71%
        1:   12:    int read_file(const string &filename) {
        1:   13:        ifstream file;
        1:   13-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   14:        file.open(filename, ios::in);
        1:   14-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   15:        if (!file.is_open()) {
        1:   15-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   15-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####:   16:            cerr << "cannot open file!" << endl;
    %%%%%:   16-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   16-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   17:            return -1;
    %%%%%:   17-block  0
        -:   18:        }
        1:   19:        string temp;
        1:   19-block  0
call    0 returned 1
       12:   20:        while (getline(file, temp)) {
       12:   20-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:   20-block  1
call    3 returned 12
branch  4 taken 12 (fallthrough)
branch  5 taken 0 (throw)
       12:   20-block  2
branch  6 taken 11
branch  7 taken 1 (fallthrough)
       11:   21:            parse_words(temp);
       11:   21-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
        -:   22:        }
        1:   23:        file.close();
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24:        words_cnt = int(words.size());
        1:   24-block  0
call    0 returned 1
        1:   25:        return 1;
        1:   26:    }
call    0 returned 1
        1:   26-block  0
call    1 returned 1
    $$$$$:   26-block  1
call    2 never executed
    $$$$$:   26-block  2
call    3 never executed
        -:   27:
function _ZN6FileIO13output_screenESt6vectorIS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EESaIS8_EE called 0 returned 0% blocks executed 0%
    #####:   28:    int output_screen(vector<vector<string>> all_chains) {
    #####:   29:        int all_chains_size = (int) all_chains.size();
    %%%%%:   29-block  0
call    0 never executed
    #####:   30:        cout << all_chains_size << endl;
call    0 never executed
call    1 never executed
    #####:   31:        for (int i = 0; i < all_chains_size; i++) {
    %%%%%:   31-block  0
branch  0 never executed
branch  1 never executed
    #####:   32:            int single_size = (int) all_chains[i].size();
    %%%%%:   32-block  0
call    0 never executed
call    1 never executed
    #####:   33:            for (int j = 0; j < single_size; j++) {
    %%%%%:   33-block  0
branch  0 never executed
branch  1 never executed
    #####:   34:                cout << all_chains[i][j] << " ";
    %%%%%:   34-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   35:            }
    #####:   36:            cout << endl;
    %%%%%:   36-block  0
call    0 never executed
        -:   37:        }
    #####:   38:        return 1;
    %%%%%:   38-block  0
        -:   39:    }
        -:   40:
function _ZN6FileIO11output_fileESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 1 returned 100% blocks executed 59%
        1:   41:    int output_file(vector<string> longest_chain) {
        1:   42:        ofstream file;
        1:   42-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   43:        file.open("solution.txt", ios::out);
        1:   43-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   44:        if (!file.is_open()) {
        1:   44-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   44-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####:   45:            cerr << "cannot output to solution.txt!" << endl;
    %%%%%:   45-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   45-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   46:            return -1;
    %%%%%:   46-block  0
        -:   47:        }
        1:   48:        int longest_chain_size = (int) longest_chain.size();
        1:   48-block  0
call    0 returned 1
       1*:   49:        for (int i = 0; i < longest_chain_size; i++) {
    %%%%%:   49-block  0
        1:   49-block  1
branch  0 taken 0
branch  1 taken 1 (fallthrough)
    #####:   50:            file << longest_chain[i] << endl;
    %%%%%:   50-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   50-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:   51:        }
        1:   52:        file.close();
        1:   52-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   53:        return 1;
        1:   53-block  0
        1:   54:    }
        1:   54-block  0
call    0 returned 1
    $$$$$:   54-block  1
call    1 never executed
        -:   55:
function _ZN6FileIO9get_wordsB5cxx11ERi called 1 returned 100% blocks executed 100%
        1:   56:    vector<string> get_words(int &size) {
        1:   57:        size = words_cnt;
        1:   58:        return words;
        1:   58-block  0
call    0 returned 1
        -:   59:    }
        -:   60:
        -:   61:private:
        -:   62:    // 读入时，单词储存相关
        -:   63:    unordered_map<string, int> word_map;    //记录单词是否重复，int同时记录单词长度
        -:   64:    vector<string> words;
        -:   65:    int words_cnt = 0;
        -:   66:
function _ZN6FileIO11parse_wordsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 11 returned 100% blocks executed 71%
       11:   67:    void parse_words(const string &context) {   /* 解析单词的函数 */
       11:   68:        int size = int(context.length());
       11:   68-block  0
call    0 returned 11
       11:   69:        int i = 0;
       11:   70:        string word;
call    0 returned 11
       88:   71:        while (i < size) {
       88:   71-block  0
branch  0 taken 77
branch  1 taken 11 (fallthrough)
       77:   72:            if (isalpha(context[i])) {
       77:   72-block  0
call    0 returned 77
branch  1 taken 77 (fallthrough)
branch  2 taken 0
       77:   73:                word.append(1, context[i]);
       77:   73-block  0
call    0 returned 77
call    1 returned 77
branch  2 taken 77 (fallthrough)
branch  3 taken 0 (throw)
    #####:   74:            } else if (!word.empty()) {
    %%%%%:   74-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   75:                store_word(word);
    %%%%%:   75-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:                word.clear();
    %%%%%:   76-block  0
call    0 never executed
        -:   77:            }
       77:   78:            i++;
       77:   78-block  0
        -:   79:        }
       11:   80:        if (!word.empty()) {
       11:   80-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0
       11:   81:            store_word(word);
       11:   81-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
        -:   82:        }
       11:   83:    }
       11:   83-block  0
call    0 returned 11
    $$$$$:   83-block  1
call    1 never executed
        -:   84:
function _ZN6FileIO10store_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 11 returned 100% blocks executed 100%
       11:   85:    void store_word(string &word) {     /* 储存单词的函数 */
       11:   86:        transform(word.begin(), word.end(), word.begin(), ::tolower);
       11:   86-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
call    3 returned 11
       11:   87:        if (word_map.find(word) == word_map.end()) {    //添加单词操作
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11:   87-block  0
call    4 returned 11
branch  5 taken 11 (fallthrough)
branch  6 taken 0
       11:   88:            words.push_back(word);
       11:   88-block  0
call    0 returned 11
       11:   89:            word_map[word] = (int) word.length();
call    0 returned 11
call    1 returned 11
        -:   90:        }
       11:   91:    }
       11:   91-block  0
        -:   92:};
        -:   93:
        -:   94:
        -:   95:#endif //WORDLIST_FILEIO_H
