        -:    0:Source:D:/BUAA_Files/Learning_Files/Senior_Three_2/BUAA_SE/Pair_Project/2023_Pair/lib/googletest/src/gtest-death-test.cc
        -:    0:Graph:D:\BUAA_Files\Learning_Files\Senior_Three_2\BUAA_SE\Pair_Project\2023_Pair\cmake-build-debug-coverage\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\BUAA_Files\Learning_Files\Senior_Three_2\BUAA_SE\Pair_Project\2023_Pair\cmake-build-debug-coverage\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// This file implements death test.
        -:   32:
        -:   33:#include "gtest/gtest-death-test.h"
        -:   34:
        -:   35:#include <functional>
        -:   36:#include <memory>
        -:   37:#include <utility>
        -:   38:#include <vector>
        -:   39:
        -:   40:#include "gtest/internal/custom/gtest.h"
        -:   41:#include "gtest/internal/gtest-port.h"
        -:   42:
        -:   43:#ifdef GTEST_HAS_DEATH_TEST
        -:   44:
        -:   45:#ifdef GTEST_OS_MAC
        -:   46:#include <crt_externs.h>
        -:   47:#endif  // GTEST_OS_MAC
        -:   48:
        -:   49:#include <errno.h>
        -:   50:#include <fcntl.h>
        -:   51:#include <limits.h>
        -:   52:
        -:   53:#ifdef GTEST_OS_LINUX
        -:   54:#include <signal.h>
        -:   55:#endif  // GTEST_OS_LINUX
        -:   56:
        -:   57:#include <stdarg.h>
        -:   58:
        -:   59:#ifdef GTEST_OS_WINDOWS
        -:   60:#include <windows.h>
        -:   61:#else
        -:   62:#include <sys/mman.h>
        -:   63:#include <sys/wait.h>
        -:   64:#endif  // GTEST_OS_WINDOWS
        -:   65:
        -:   66:#ifdef GTEST_OS_QNX
        -:   67:#include <spawn.h>
        -:   68:#endif  // GTEST_OS_QNX
        -:   69:
        -:   70:#ifdef GTEST_OS_FUCHSIA
        -:   71:#include <lib/fdio/fd.h>
        -:   72:#include <lib/fdio/io.h>
        -:   73:#include <lib/fdio/spawn.h>
        -:   74:#include <lib/zx/channel.h>
        -:   75:#include <lib/zx/port.h>
        -:   76:#include <lib/zx/process.h>
        -:   77:#include <lib/zx/socket.h>
        -:   78:#include <zircon/processargs.h>
        -:   79:#include <zircon/syscalls.h>
        -:   80:#include <zircon/syscalls/policy.h>
        -:   81:#include <zircon/syscalls/port.h>
        -:   82:#endif  // GTEST_OS_FUCHSIA
        -:   83:
        -:   84:#endif  // GTEST_HAS_DEATH_TEST
        -:   85:
        -:   86:#include "gtest/gtest-message.h"
        -:   87:#include "gtest/internal/gtest-string.h"
        -:   88:#include "src/gtest-internal-inl.h"
        -:   89:
        -:   90:namespace testing {
        -:   91:
        -:   92:// Constants.
        -:   93:
        -:   94:// The default death test style.
        -:   95://
        -:   96:// This is defined in internal/gtest-port.h as "fast", but can be overridden by
        -:   97:// a definition in internal/custom/gtest-port.h. The recommended value, which is
        -:   98:// used internally at Google, is "threadsafe".
        -:   99:static const char kDefaultDeathTestStyle[] = GTEST_DEFAULT_DEATH_TEST_STYLE;
        -:  100:
        -:  101:}  // namespace testing
        -:  102:
        -:  103:GTEST_DEFINE_string_(
        -:  104:    death_test_style,
        -:  105:    testing::internal::StringFromGTestEnv("death_test_style",
        -:  106:                                          testing::kDefaultDeathTestStyle),
        -:  107:    "Indicates how to run a death test in a forked child process: "
        -:  108:    "\"threadsafe\" (child process re-executes the test binary "
        -:  109:    "from the beginning, running only the specific death test) or "
        -:  110:    "\"fast\" (child process runs the death test immediately "
        -:  111:    "after forking).");
        -:  112:
        -:  113:GTEST_DEFINE_bool_(
        -:  114:    death_test_use_fork,
        -:  115:    testing::internal::BoolFromGTestEnv("death_test_use_fork", false),
        -:  116:    "Instructs to use fork()/_exit() instead of clone() in death test. "
        -:  117:    "Ignored and always uses fork() on POSIX systems where clone() is not "
        -:  118:    "implemented. Useful when running under valgrind or similar tools if "
        -:  119:    "those do not support clone(). Valgrind 3.3.1 will just fail if "
        -:  120:    "it sees an unsupported combination of clone() flags. "
        -:  121:    "It is not recommended to use this flag w/o valgrind though it will "
        -:  122:    "work in 99% of the cases. Once valgrind is fixed, this flag will "
        -:  123:    "most likely be removed.");
        -:  124:
        -:  125:GTEST_DEFINE_string_(
        -:  126:    internal_run_death_test, "",
        -:  127:    "Indicates the file, line number, temporal index of "
        -:  128:    "the single death test to run, and a file descriptor to "
        -:  129:    "which a success code may be sent, all separated by "
        -:  130:    "the '|' characters.  This flag is specified if and only if the "
        -:  131:    "current process is a sub-process launched for running a thread-safe "
        -:  132:    "death test.  FOR INTERNAL USE ONLY.");
        -:  133:
        -:  134:namespace testing {
        -:  135:
        -:  136:#ifdef GTEST_HAS_DEATH_TEST
        -:  137:
        -:  138:namespace internal {
        -:  139:
        -:  140:// Valid only for fast death test. Indicates the code is running in the
        -:  141:// child process of a fast style death test.
        -:  142:#if !defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_FUCHSIA)
        -:  143:static bool g_in_fast_death_test_child = false;
        -:  144:#endif
        -:  145:
        -:  146:// Returns a Boolean value indicating whether the caller is currently
        -:  147:// executing in the context of the death test child process.  Tools such as
        -:  148:// Valgrind heap checkers may need this to modify their behavior in death
        -:  149:// test.  IMPORTANT: This is an internal utility.  Using it may break the
        -:  150:// implementation of death test.  User code MUST NOT use it.
function _ZN7testing8internal16InDeathTestChildEv called 0 returned 0% blocks executed 0%
    #####:  151:bool InDeathTestChild() {
        -:  152:#if defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_FUCHSIA)
        -:  153:
        -:  154:  // On Windows and Fuchsia, death test are thread-safe regardless of the value
        -:  155:  // of the death_test_style flag.
    #####:  156:  return !GTEST_FLAG_GET(internal_run_death_test).empty();
    %%%%%:  156-block  0
call    0 never executed
        -:  157:
        -:  158:#else
        -:  159:
        -:  160:  if (GTEST_FLAG_GET(death_test_style) == "threadsafe")
        -:  161:    return !GTEST_FLAG_GET(internal_run_death_test).empty();
        -:  162:  else
        -:  163:    return g_in_fast_death_test_child;
        -:  164:#endif
        -:  165:}
        -:  166:
        -:  167:}  // namespace internal
        -:  168:
        -:  169:// ExitedWithCode constructor.
function _ZN7testing14ExitedWithCodeC2Ei called 0 returned 0% blocks executed 0%
    #####:  170:ExitedWithCode::ExitedWithCode(int exit_code) : exit_code_(exit_code) {}
        -:  171:
        -:  172:// ExitedWithCode function-call operator.
function _ZNK7testing14ExitedWithCodeclEi called 0 returned 0% blocks executed 0%
    #####:  173:bool ExitedWithCode::operator()(int exit_status) const {
        -:  174:#if defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_FUCHSIA)
        -:  175:
    #####:  176:  return exit_status == exit_code_;
    %%%%%:  176-block  0
        -:  177:
        -:  178:#else
        -:  179:
        -:  180:  return WIFEXITED(exit_status) && WEXITSTATUS(exit_status) == exit_code_;
        -:  181:
        -:  182:#endif  // GTEST_OS_WINDOWS || GTEST_OS_FUCHSIA
        -:  183:}
        -:  184:
        -:  185:#if !defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_FUCHSIA)
        -:  186:// KilledBySignal constructor.
        -:  187:KilledBySignal::KilledBySignal(int signum) : signum_(signum) {}
        -:  188:
        -:  189:// KilledBySignal function-call operator.
        -:  190:bool KilledBySignal::operator()(int exit_status) const {
        -:  191:#if defined(GTEST_KILLED_BY_SIGNAL_OVERRIDE_)
        -:  192:  {
        -:  193:    bool result;
        -:  194:    if (GTEST_KILLED_BY_SIGNAL_OVERRIDE_(signum_, exit_status, &result)) {
        -:  195:      return result;
        -:  196:    }
        -:  197:  }
        -:  198:#endif  // defined(GTEST_KILLED_BY_SIGNAL_OVERRIDE_)
        -:  199:  return WIFSIGNALED(exit_status) && WTERMSIG(exit_status) == signum_;
        -:  200:}
        -:  201:#endif  // !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA
        -:  202:
        -:  203:namespace internal {
        -:  204:
        -:  205:// Utilities needed for death test.
        -:  206:
        -:  207:// Generates a textual description of a given exit code, in the format
        -:  208:// specified by wait(2).
function _ZN7testing8internalL11ExitSummaryEi called 0 returned 0% blocks executed 0%
    #####:  209:static std::string ExitSummary(int exit_code) {
    #####:  210:  Message m;
    %%%%%:  210-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  211:
        -:  212:#if defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_FUCHSIA)
        -:  213:
    #####:  214:  m << "Exited with exit status " << exit_code;
    %%%%%:  214-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  214-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  215:
        -:  216:#else
        -:  217:
        -:  218:  if (WIFEXITED(exit_code)) {
        -:  219:    m << "Exited with exit status " << WEXITSTATUS(exit_code);
        -:  220:  } else if (WIFSIGNALED(exit_code)) {
        -:  221:    m << "Terminated by signal " << WTERMSIG(exit_code);
        -:  222:  }
        -:  223:#ifdef WCOREDUMP
        -:  224:  if (WCOREDUMP(exit_code)) {
        -:  225:    m << " (core dumped)";
        -:  226:  }
        -:  227:#endif
        -:  228:#endif  // GTEST_OS_WINDOWS || GTEST_OS_FUCHSIA
        -:  229:
    #####:  230:  return m.GetString();
    %%%%%:  230-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  230-block  1
    #####:  231:}
    %%%%%:  231-block  0
call    0 never executed
    $$$$$:  231-block  1
call    1 never executed
        -:  232:
        -:  233:// Returns true if exit_status describes a process that was terminated
        -:  234:// by a signal, or exited normally with a nonzero exit code.
function _ZN7testing8internal20ExitedUnsuccessfullyEi called 0 returned 0% blocks executed 0%
    #####:  235:bool ExitedUnsuccessfully(int exit_status) {
    #####:  236:  return !ExitedWithCode(0)(exit_status);
    %%%%%:  236-block  0
call    0 never executed
call    1 never executed
        -:  237:}
        -:  238:
        -:  239:#if !defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_FUCHSIA)
        -:  240:// Generates a textual failure message when a death test finds more than
        -:  241:// one thread running, or cannot determine the number of threads, prior
        -:  242:// to executing the given statement.  It is the responsibility of the
        -:  243:// caller not to pass a thread_count of 1.
        -:  244:static std::string DeathTestThreadWarning(size_t thread_count) {
        -:  245:  Message msg;
        -:  246:  msg << "Death test use fork(), which is unsafe particularly"
        -:  247:      << " in a threaded context. For this test, " << GTEST_NAME_ << " ";
        -:  248:  if (thread_count == 0) {
        -:  249:    msg << "couldn't detect the number of threads.";
        -:  250:  } else {
        -:  251:    msg << "detected " << thread_count << " threads.";
        -:  252:  }
        -:  253:  msg << " See "
        -:  254:         "https://github.com/google/googletest/blob/main/docs/"
        -:  255:         "advanced.md#death-test-and-threads"
        -:  256:      << " for more explanation and suggested solutions, especially if"
        -:  257:      << " this is the last message you see before your test times out.";
        -:  258:  return msg.GetString();
        -:  259:}
        -:  260:#endif  // !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA
        -:  261:
        -:  262:// Flag characters for reporting a death test that did not die.
        -:  263:static const char kDeathTestLived = 'L';
        -:  264:static const char kDeathTestReturned = 'R';
        -:  265:static const char kDeathTestThrew = 'T';
        -:  266:static const char kDeathTestInternalError = 'I';
        -:  267:
        -:  268:#ifdef GTEST_OS_FUCHSIA
        -:  269:
        -:  270:// File descriptor used for the pipe in the child process.
        -:  271:static const int kFuchsiaReadPipeFd = 3;
        -:  272:
        -:  273:#endif
        -:  274:
        -:  275:// An enumeration describing all of the possible ways that a death test can
        -:  276:// conclude.  DIED means that the process died while executing the test
        -:  277:// code; LIVED means that process lived beyond the end of the test code;
        -:  278:// RETURNED means that the test statement attempted to execute a return
        -:  279:// statement, which is not allowed; THREW means that the test statement
        -:  280:// returned control by throwing an exception.  IN_PROGRESS means the test
        -:  281:// has not yet concluded.
        -:  282:enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };
        -:  283:
        -:  284:// Routine for aborting the program which is safe to call from an
        -:  285:// exec-style death test child process, in which case the error
        -:  286:// message is propagated back to the parent process.  Otherwise, the
        -:  287:// message is simply printed to stderr.  In either case, the program
        -:  288:// then exits with status 1.
function _ZN7testing8internalL14DeathTestAbortERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  289:[[noreturn]] static void DeathTestAbort(const std::string& message) {
        -:  290:  // On a POSIX system, this function may be called from a threadsafe-style
        -:  291:  // death test child process, which operates on a very small stack.  Use
        -:  292:  // the heap for any additional non-minuscule memory requirements.
        -:  293:  const InternalRunDeathTestFlag* const flag =
    #####:  294:      GetUnitTestImpl()->internal_run_death_test_flag();
    %%%%%:  294-block  0
call    0 never executed
call    1 never executed
    #####:  295:  if (flag != nullptr) {
branch  0 never executed
branch  1 never executed
    #####:  296:    FILE* parent = posix::FDOpen(flag->write_fd(), "w");
    %%%%%:  296-block  0
call    0 never executed
call    1 never executed
    #####:  297:    fputc(kDeathTestInternalError, parent);
call    0 never executed
    #####:  298:    fprintf(parent, "%s", message.c_str());
call    0 never executed
call    1 never executed
    #####:  299:    fflush(parent);
call    0 never executed
    #####:  300:    _exit(1);
call    0 never executed
        -:  301:  } else {
    #####:  302:    fprintf(stderr, "%s", message.c_str());
    %%%%%:  302-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  303:    fflush(stderr);
call    0 never executed
call    1 never executed
    #####:  304:    posix::Abort();
        -:  305:  }
        -:  306:}
        -:  307:
        -:  308:// A replacement for CHECK that calls DeathTestAbort if the assertion
        -:  309:// fails.
        -:  310:#define GTEST_DEATH_TEST_CHECK_(expression)                              \
        -:  311:  do {                                                                   \
        -:  312:    if (!::testing::internal::IsTrue(expression)) {                      \
        -:  313:      DeathTestAbort(::std::string("CHECK failed: File ") + __FILE__ +   \
        -:  314:                     ", line " +                                         \
        -:  315:                     ::testing::internal::StreamableToString(__LINE__) + \
        -:  316:                     ": " + #expression);                                \
        -:  317:    }                                                                    \
        -:  318:  } while (::testing::internal::AlwaysFalse())
        -:  319:
        -:  320:// This macro is similar to GTEST_DEATH_TEST_CHECK_, but it is meant for
        -:  321:// evaluating any system call that fulfills two conditions: it must return
        -:  322:// -1 on failure, and set errno to EINTR when it is interrupted and
        -:  323:// should be tried again.  The macro expands to a loop that repeatedly
        -:  324:// evaluates the expression as long as it evaluates to -1 and sets
        -:  325:// errno to EINTR.  If the expression evaluates to -1 but errno is
        -:  326:// something other than EINTR, DeathTestAbort is called.
        -:  327:#define GTEST_DEATH_TEST_CHECK_SYSCALL_(expression)                      \
        -:  328:  do {                                                                   \
        -:  329:    int gtest_retval;                                                    \
        -:  330:    do {                                                                 \
        -:  331:      gtest_retval = (expression);                                       \
        -:  332:    } while (gtest_retval == -1 && errno == EINTR);                      \
        -:  333:    if (gtest_retval == -1) {                                            \
        -:  334:      DeathTestAbort(::std::string("CHECK failed: File ") + __FILE__ +   \
        -:  335:                     ", line " +                                         \
        -:  336:                     ::testing::internal::StreamableToString(__LINE__) + \
        -:  337:                     ": " + #expression + " != -1");                     \
        -:  338:    }                                                                    \
        -:  339:  } while (::testing::internal::AlwaysFalse())
        -:  340:
        -:  341:// Returns the message describing the last system error in errno.
function _ZN7testing8internal23GetLastErrnoDescriptionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  342:std::string GetLastErrnoDescription() {
    #####:  343:  return errno == 0 ? "" : posix::StrError(errno);
    %%%%%:  343-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  343-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:  343-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  343-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  343-block  4
    %%%%%:  343-block  5
    %%%%%:  343-block  6
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  343-block  7
call   15 never executed
    %%%%%:  343-block  8
    $$$$$:  343-block  9
call   16 never executed
        -:  344:}
        -:  345:
        -:  346:// This is called from a death test parent process to read a failure
        -:  347:// message from the death test child process and log it with the FATAL
        -:  348:// severity. On Windows, the message is read from a pipe handle. On other
        -:  349:// platforms, it is read from a file descriptor.
function _ZN7testing8internalL21FailFromInternalErrorEi called 0 returned 0% blocks executed 0%
    #####:  350:static void FailFromInternalError(int fd) {
    #####:  351:  Message error;
    %%%%%:  351-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  352:  char buffer[256];
        -:  353:  int num_read;
        -:  354:
        -:  355:  do {
    #####:  356:    while ((num_read = posix::Read(fd, buffer, 255)) > 0) {
    %%%%%:  356-block  0
    %%%%%:  356-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  356-block  2
branch  3 never executed
branch  4 never executed
    #####:  357:      buffer[num_read] = '\0';
    #####:  358:      error << buffer;
    %%%%%:  358-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  359:    }
    #####:  360:  } while (num_read == -1 && errno == EINTR);
    %%%%%:  360-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  360-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  360-block  2
branch  5 never executed
branch  6 never executed
    %%%%%:  360-block  3
    %%%%%:  360-block  4
    %%%%%:  360-block  5
branch  7 never executed
branch  8 never executed
        -:  361:
    #####:  362:  if (num_read == 0) {
    %%%%%:  362-block  0
branch  0 never executed
branch  1 never executed
    #####:  363:    GTEST_LOG_(FATAL) << error.GetString();
    %%%%%:  363-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  363-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  363-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  363-block  3
call   10 never executed
call   11 never executed
    $$$$$:  363-block  4
call   12 never executed
    $$$$$:  363-block  5
    $$$$$:  363-block  6
call   13 never executed
    $$$$$:  363-block  7
        -:  364:  } else {
    #####:  365:    const int last_error = errno;
    %%%%%:  365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  366:    GTEST_LOG_(FATAL) << "Error while reading death test internal: "
    %%%%%:  366-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  366-block  1
call    3 never executed
    $$$$$:  366-block  2
call    4 never executed
    $$$$$:  366-block  3
    #####:  367:                      << GetLastErrnoDescription() << " [" << last_error << "]";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  367-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  367-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  367-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  367-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  367-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:  367-block  5
call   18 never executed
call   19 never executed
    $$$$$:  367-block  6
call   20 never executed
    $$$$$:  367-block  7
        -:  368:  }
    #####:  369:}
    %%%%%:  369-block  0
call    0 never executed
    $$$$$:  369-block  1
call    1 never executed
        -:  370:
        -:  371:// Death test constructor.  Increments the running death test count
        -:  372:// for the current test.
function _ZN7testing8internal9DeathTestC2Ev called 0 returned 0% blocks executed 0%
    #####:  373:DeathTest::DeathTest() {
    #####:  374:  TestInfo* const info = GetUnitTestImpl()->current_test_info();
    %%%%%:  374-block  0
call    0 never executed
call    1 never executed
    #####:  375:  if (info == nullptr) {
branch  0 never executed
branch  1 never executed
    #####:  376:    DeathTestAbort(
    %%%%%:  376-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  376-block  1
call    4 never executed
    $$$$$:  376-block  2
call    5 never executed
    $$$$$:  376-block  3
    $$$$$:  376-block  4
call    6 never executed
        -:  377:        "Cannot run a death test outside of a TEST or "
        -:  378:        "TEST_F construct");
        -:  379:  }
    #####:  380:}
    %%%%%:  380-block  0
        -:  381:
        -:  382:// Creates and returns a death test by dispatching to the current
        -:  383:// death test factory.
function _ZN7testing8internal9DeathTest6CreateEPKcNS_7MatcherIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES3_iPPS1_ called 0 returned 0% blocks executed 0%
    #####:  384:bool DeathTest::Create(const char* statement,
        -:  385:                       Matcher<const std::string&> matcher, const char* file,
        -:  386:                       int line, DeathTest** test) {
    #####:  387:  return GetUnitTestImpl()->death_test_factory()->Create(
    %%%%%:  387-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  387-block  1
call    6 never executed
    $$$$$:  387-block  2
call    7 never executed
    #####:  388:      statement, std::move(matcher), file, line, test);
call    0 never executed
    %%%%%:  388-block  0
    %%%%%:  388-block  1
        -:  389:}
        -:  390:
function _ZN7testing8internal9DeathTest11LastMessageEv called 0 returned 0% blocks executed 0%
    #####:  391:const char* DeathTest::LastMessage() {
    #####:  392:  return last_death_test_message_.c_str();
    %%%%%:  392-block  0
call    0 never executed
        -:  393:}
        -:  394:
function _ZN7testing8internal9DeathTest27set_last_death_test_messageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  395:void DeathTest::set_last_death_test_message(const std::string& message) {
    #####:  396:  last_death_test_message_ = message;
    %%%%%:  396-block  0
call    0 never executed
    #####:  397:}
        -:  398:
        -:  399:std::string DeathTest::last_death_test_message_;
        -:  400:
        -:  401:// Provides cross platform implementation for some death functionality.
        -:  402:class DeathTestImpl : public DeathTest {
        -:  403: protected:
function _ZN7testing8internal13DeathTestImplC2EPKcNS_7MatcherIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE called 0 returned 0% blocks executed 0%
    #####:  404:  DeathTestImpl(const char* a_statement, Matcher<const std::string&> matcher)
    #####:  405:      : statement_(a_statement),
    #####:  406:        matcher_(std::move(matcher)),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  407:        spawned_(false),
    #####:  408:        status_(-1),
    #####:  409:        outcome_(IN_PROGRESS),
    #####:  410:        read_fd_(-1),
    #####:  411:        write_fd_(-1) {}
    %%%%%:  411-block  0
call    0 never executed
call    1 never executed
    %%%%%:  411-block  1
    $$$$$:  411-block  2
call    2 never executed
        -:  412:
        -:  413:  // read_fd_ is expected to be closed and cleared by a derived class.
function _ZN7testing8internal13DeathTestImplD2Ev called 0 returned 0% blocks executed 0%
    #####:  414:  ~DeathTestImpl() override { GTEST_DEATH_TEST_CHECK_(read_fd_ == -1); }
    %%%%%:  414-block  0
    %%%%%:  414-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  414-block  2
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    %%%%%:  414-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  414-block  4
call   15 never executed
call   16 never executed
        -:  415:
        -:  416:  void Abort(AbortReason reason) override;
        -:  417:  bool Passed(bool status_ok) override;
        -:  418:
function _ZNK7testing8internal13DeathTestImpl9statementEv called 0 returned 0% blocks executed 0%
    #####:  419:  const char* statement() const { return statement_; }
    %%%%%:  419-block  0
function _ZNK7testing8internal13DeathTestImpl7spawnedEv called 0 returned 0% blocks executed 0%
    #####:  420:  bool spawned() const { return spawned_; }
    %%%%%:  420-block  0
function _ZN7testing8internal13DeathTestImpl11set_spawnedEb called 0 returned 0% blocks executed 0%
    #####:  421:  void set_spawned(bool is_spawned) { spawned_ = is_spawned; }
function _ZNK7testing8internal13DeathTestImpl6statusEv called 0 returned 0% blocks executed 0%
    #####:  422:  int status() const { return status_; }
    %%%%%:  422-block  0
function _ZN7testing8internal13DeathTestImpl10set_statusEi called 0 returned 0% blocks executed 0%
    #####:  423:  void set_status(int a_status) { status_ = a_status; }
function _ZNK7testing8internal13DeathTestImpl7outcomeEv called 0 returned 0% blocks executed 0%
    #####:  424:  DeathTestOutcome outcome() const { return outcome_; }
    %%%%%:  424-block  0
function _ZN7testing8internal13DeathTestImpl11set_outcomeENS0_16DeathTestOutcomeE called 0 returned 0% blocks executed 0%
    #####:  425:  void set_outcome(DeathTestOutcome an_outcome) { outcome_ = an_outcome; }
function _ZNK7testing8internal13DeathTestImpl7read_fdEv called 0 returned 0% blocks executed 0%
    #####:  426:  int read_fd() const { return read_fd_; }
    %%%%%:  426-block  0
function _ZN7testing8internal13DeathTestImpl11set_read_fdEi called 0 returned 0% blocks executed 0%
    #####:  427:  void set_read_fd(int fd) { read_fd_ = fd; }
function _ZNK7testing8internal13DeathTestImpl8write_fdEv called 0 returned 0% blocks executed 0%
    #####:  428:  int write_fd() const { return write_fd_; }
    %%%%%:  428-block  0
function _ZN7testing8internal13DeathTestImpl12set_write_fdEi called 0 returned 0% blocks executed 0%
    #####:  429:  void set_write_fd(int fd) { write_fd_ = fd; }
        -:  430:
        -:  431:  // Called in the parent process only. Reads the result code of the death
        -:  432:  // test child process via a pipe, interprets it to set the outcome_
        -:  433:  // member, and closes read_fd_.  Outputs diagnostics and terminates in
        -:  434:  // case of unexpected codes.
        -:  435:  void ReadAndInterpretStatusByte();
        -:  436:
        -:  437:  // Returns stderr output from the child process.
        -:  438:  virtual std::string GetErrorLogs();
        -:  439:
        -:  440: private:
        -:  441:  // The textual content of the code this object is testing.  This class
        -:  442:  // doesn't own this string and should not attempt to delete it.
        -:  443:  const char* const statement_;
        -:  444:  // A matcher that's expected to match the stderr output by the child process.
        -:  445:  Matcher<const std::string&> matcher_;
        -:  446:  // True if the death test child process has been successfully spawned.
        -:  447:  bool spawned_;
        -:  448:  // The exit status of the child process.
        -:  449:  int status_;
        -:  450:  // How the death test concluded.
        -:  451:  DeathTestOutcome outcome_;
        -:  452:  // Descriptor to the read end of the pipe to the child process.  It is
        -:  453:  // always -1 in the child process.  The child keeps its write end of the
        -:  454:  // pipe in write_fd_.
        -:  455:  int read_fd_;
        -:  456:  // Descriptor to the child's write end of the pipe to the parent process.
        -:  457:  // It is always -1 in the parent process.  The parent keeps its end of the
        -:  458:  // pipe in read_fd_.
        -:  459:  int write_fd_;
        -:  460:};
        -:  461:
        -:  462:// Called in the parent process only. Reads the result code of the death
        -:  463:// test child process via a pipe, interprets it to set the outcome_
        -:  464:// member, and closes read_fd_.  Outputs diagnostics and terminates in
        -:  465:// case of unexpected codes.
function _ZN7testing8internal13DeathTestImpl26ReadAndInterpretStatusByteEv called 0 returned 0% blocks executed 0%
    #####:  466:void DeathTestImpl::ReadAndInterpretStatusByte() {
        -:  467:  char flag;
        -:  468:  int bytes_read;
        -:  469:
        -:  470:  // The read() here blocks until data is available (signifying the
        -:  471:  // failure of the death test) or until the pipe is closed (signifying
        -:  472:  // its success), so it's okay to call this in the parent before
        -:  473:  // the child process has exited.
        -:  474:  do {
    #####:  475:    bytes_read = posix::Read(read_fd(), &flag, 1);
    %%%%%:  475-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  476:  } while (bytes_read == -1 && errno == EINTR);
    %%%%%:  476-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  476-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  476-block  2
branch  5 never executed
branch  6 never executed
    %%%%%:  476-block  3
    %%%%%:  476-block  4
    %%%%%:  476-block  5
branch  7 never executed
branch  8 never executed
        -:  477:
    #####:  478:  if (bytes_read == 0) {
    %%%%%:  478-block  0
branch  0 never executed
branch  1 never executed
    #####:  479:    set_outcome(DIED);
    %%%%%:  479-block  0
call    0 never executed
    #####:  480:  } else if (bytes_read == 1) {
    %%%%%:  480-block  0
branch  0 never executed
branch  1 never executed
    #####:  481:    switch (flag) {
    %%%%%:  481-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  482:      case kDeathTestReturned:
    #####:  483:        set_outcome(RETURNED);
    %%%%%:  483-block  0
call    0 never executed
    #####:  484:        break;
    #####:  485:      case kDeathTestThrew:
    #####:  486:        set_outcome(THREW);
    %%%%%:  486-block  0
call    0 never executed
    #####:  487:        break;
    #####:  488:      case kDeathTestLived:
    #####:  489:        set_outcome(LIVED);
    %%%%%:  489-block  0
call    0 never executed
    #####:  490:        break;
    #####:  491:      case kDeathTestInternalError:
    #####:  492:        FailFromInternalError(read_fd());  // Does not return.
    %%%%%:  492-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  493:        break;
    %%%%%:  493-block  0
    #####:  494:      default:
    #####:  495:        GTEST_LOG_(FATAL) << "Death test child process reported "
    %%%%%:  495-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  495-block  1
call    3 never executed
    %%%%%:  495-block  2
call    4 never executed
    $$$$$:  495-block  3
call    5 never executed
    $$$$$:  495-block  4
    #####:  496:                          << "unexpected status byte ("
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  496-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  497:                          << static_cast<unsigned int>(flag) << ")";
    %%%%%:  497-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  497-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  498:    }
        -:  499:  } else {
    #####:  500:    GTEST_LOG_(FATAL) << "Read from death test child process failed: "
    %%%%%:  500-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  500-block  1
call    3 never executed
    $$$$$:  500-block  2
call    4 never executed
    $$$$$:  500-block  3
    #####:  501:                      << GetLastErrnoDescription();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  501-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  501-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  501-block  2
call    9 never executed
call   10 never executed
    $$$$$:  501-block  3
call   11 never executed
    $$$$$:  501-block  4
        -:  502:  }
    #####:  503:  GTEST_DEATH_TEST_CHECK_SYSCALL_(posix::Close(read_fd()));
    %%%%%:  503-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  503-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:  503-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  503-block  3
branch  9 never executed
branch 10 never executed
    %%%%%:  503-block  4
    %%%%%:  503-block  5
    %%%%%:  503-block  6
branch 11 never executed
branch 12 never executed
    %%%%%:  503-block  7
branch 13 never executed
branch 14 never executed
    %%%%%:  503-block  8
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:  503-block  9
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  503-block 10
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%:  503-block 11
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%:  503-block 12
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%:  503-block 13
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%:  503-block 14
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%:  503-block 15
call   37 never executed
branch 38 never executed
branch 39 never executed
    %%%%%:  503-block 16
call   40 never executed
    %%%%%:  503-block 17
call   41 never executed
branch 42 never executed
branch 43 never executed
    %%%%%:  503-block 18
branch 44 never executed
branch 45 never executed
    $$$$$:  503-block 19
call   46 never executed
    $$$$$:  503-block 20
    $$$$$:  503-block 21
call   47 never executed
    $$$$$:  503-block 22
    $$$$$:  503-block 23
call   48 never executed
    $$$$$:  503-block 24
    $$$$$:  503-block 25
call   49 never executed
    $$$$$:  503-block 26
    $$$$$:  503-block 27
call   50 never executed
    $$$$$:  503-block 28
    $$$$$:  503-block 29
call   51 never executed
    $$$$$:  503-block 30
    $$$$$:  503-block 31
call   52 never executed
    $$$$$:  503-block 32
    $$$$$:  503-block 33
call   53 never executed
    $$$$$:  503-block 34
    $$$$$:  503-block 35
call   54 never executed
    $$$$$:  503-block 36
    $$$$$:  503-block 37
    #####:  504:  set_read_fd(-1);
    %%%%%:  504-block  0
call    0 never executed
    #####:  505:}
        -:  506:
function _ZN7testing8internal13DeathTestImpl12GetErrorLogsB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  507:std::string DeathTestImpl::GetErrorLogs() { return GetCapturedStderr(); }
    %%%%%:  507-block  0
call    0 never executed
        -:  508:
        -:  509:// Signals that the death test code which should have exited, didn't.
        -:  510:// Should be called only in a death test child process.
        -:  511:// Writes a status byte to the child's status file descriptor, then
        -:  512:// calls _exit(1).
function _ZN7testing8internal13DeathTestImpl5AbortENS0_9DeathTest11AbortReasonE called 0 returned 0% blocks executed 0%
    #####:  513:void DeathTestImpl::Abort(AbortReason reason) {
        -:  514:  // The parent process considers the death test to be a failure if
        -:  515:  // it finds any data in our pipe.  So, here we write a single flag byte
        -:  516:  // to the pipe, then exit.
    #####:  517:  const char status_ch = reason == TEST_DID_NOT_DIE       ? kDeathTestLived
    %%%%%:  517-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  517-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  517-block  2
    %%%%%:  517-block  3
    %%%%%:  517-block  4
    %%%%%:  517-block  5
    %%%%%:  517-block  6
        -:  518:                         : reason == TEST_THREW_EXCEPTION ? kDeathTestThrew
        -:  519:                                                          : kDeathTestReturned;
        -:  520:
    #####:  521:  GTEST_DEATH_TEST_CHECK_SYSCALL_(posix::Write(write_fd(), &status_ch, 1));
    %%%%%:  521-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  521-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:  521-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  521-block  3
branch  9 never executed
branch 10 never executed
    %%%%%:  521-block  4
    %%%%%:  521-block  5
    %%%%%:  521-block  6
branch 11 never executed
branch 12 never executed
    %%%%%:  521-block  7
branch 13 never executed
branch 14 never executed
    %%%%%:  521-block  8
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:  521-block  9
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  521-block 10
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%:  521-block 11
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%:  521-block 12
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%:  521-block 13
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%:  521-block 14
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%:  521-block 15
call   37 never executed
branch 38 never executed
branch 39 never executed
    %%%%%:  521-block 16
call   40 never executed
    %%%%%:  521-block 17
call   41 never executed
branch 42 never executed
branch 43 never executed
    %%%%%:  521-block 18
branch 44 never executed
branch 45 never executed
    $$$$$:  521-block 19
call   46 never executed
    $$$$$:  521-block 20
    $$$$$:  521-block 21
call   47 never executed
    $$$$$:  521-block 22
    $$$$$:  521-block 23
call   48 never executed
    $$$$$:  521-block 24
    $$$$$:  521-block 25
call   49 never executed
    $$$$$:  521-block 26
    $$$$$:  521-block 27
call   50 never executed
    $$$$$:  521-block 28
    $$$$$:  521-block 29
call   51 never executed
    $$$$$:  521-block 30
    $$$$$:  521-block 31
call   52 never executed
    $$$$$:  521-block 32
    $$$$$:  521-block 33
call   53 never executed
    $$$$$:  521-block 34
    $$$$$:  521-block 35
call   54 never executed
    $$$$$:  521-block 36
    $$$$$:  521-block 37
        -:  522:  // We are leaking the descriptor here because on some platforms (i.e.,
        -:  523:  // when built as Windows DLL), destructors of global objects will still
        -:  524:  // run after calling _exit(). On such systems, write_fd_ will be
        -:  525:  // indirectly closed from the destructor of UnitTestImpl, causing double
        -:  526:  // close if it is also closed here. On debug configurations, double close
        -:  527:  // may assert. As there are no in-process buffers to flush here, we are
        -:  528:  // relying on the OS to close the descriptor after the process terminates
        -:  529:  // when the destructors are not run.
    #####:  530:  _exit(1);  // Exits w/o any normal exit hooks (we were supposed to crash)
    %%%%%:  530-block  0
call    0 never executed
        -:  531:}
        -:  532:
        -:  533:// Returns an indented copy of stderr output for a death test.
        -:  534:// This makes distinguishing death test output lines from regular log lines
        -:  535:// much easier.
function _ZN7testing8internalL21FormatDeathTestOutputERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  536:static ::std::string FormatDeathTestOutput(const ::std::string& output) {
    #####:  537:  ::std::string ret;
    %%%%%:  537-block  0
call    0 never executed
    #####:  538:  for (size_t at = 0;;) {
    #####:  539:    const size_t line_end = output.find('\n', at);
    %%%%%:  539-block  0
call    0 never executed
    #####:  540:    ret += "[  DEATH   ] ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  541:    if (line_end == ::std::string::npos) {
    %%%%%:  541-block  0
branch  0 never executed
branch  1 never executed
    #####:  542:      ret += output.substr(at);
    %%%%%:  542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  542-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  542-block  2
call    6 never executed
    $$$$$:  542-block  3
call    7 never executed
    $$$$$:  542-block  4
    #####:  543:      break;
        -:  544:    }
    #####:  545:    ret += output.substr(at, line_end + 1 - at);
    %%%%%:  545-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  545-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  545-block  2
call    6 never executed
    $$$$$:  545-block  3
call    7 never executed
    $$$$$:  545-block  4
    #####:  546:    at = line_end + 1;
    #####:  547:  }
    #####:  548:  return ret;
    %%%%%:  548-block  0
    %%%%%:  548-block  1
    =====:  549:}
    $$$$$:  549-block  0
call    0 never executed
        -:  550:
        -:  551:// Assesses the success or failure of a death test, using both private
        -:  552:// members which have previously been set, and one argument:
        -:  553://
        -:  554:// Private data members:
        -:  555://   outcome:  An enumeration describing how the death test
        -:  556://             concluded: DIED, LIVED, THREW, or RETURNED.  The death test
        -:  557://             fails in the latter three cases.
        -:  558://   status:   The exit status of the child process. On *nix, it is in the
        -:  559://             in the format specified by wait(2). On Windows, this is the
        -:  560://             value supplied to the ExitProcess() API or a numeric code
        -:  561://             of the exception that terminated the program.
        -:  562://   matcher_: A matcher that's expected to match the stderr output by the child
        -:  563://             process.
        -:  564://
        -:  565:// Argument:
        -:  566://   status_ok: true if exit_status is acceptable in the context of
        -:  567://              this particular death test, which fails if it is false
        -:  568://
        -:  569:// Returns true if and only if all of the above conditions are met.  Otherwise,
        -:  570:// the first failing condition, in the order given above, is the one that is
        -:  571:// reported. Also sets the last death test message string.
function _ZN7testing8internal13DeathTestImpl6PassedEb called 0 returned 0% blocks executed 0%
    #####:  572:bool DeathTestImpl::Passed(bool status_ok) {
    #####:  573:  if (!spawned()) return false;
    %%%%%:  573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  573-block  1
        -:  574:
    #####:  575:  const std::string error_message = GetErrorLogs();
    %%%%%:  575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  576:
    #####:  577:  bool success = false;
    #####:  578:  Message buffer;
    %%%%%:  578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  579:
    #####:  580:  buffer << "Death test: " << statement() << "\n";
    %%%%%:  580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  580-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  580-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  580-block  3
    #####:  581:  switch (outcome()) {
    %%%%%:  581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  582:    case LIVED:
    #####:  583:      buffer << "    Result: failed to die.\n"
    %%%%%:  583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  584:             << " Error msg:\n"
    %%%%%:  584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  585:             << FormatDeathTestOutput(error_message);
    %%%%%:  585-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  585-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  585-block  2
call    6 never executed
    $$$$$:  585-block  3
call    7 never executed
    $$$$$:  585-block  4
    #####:  586:      break;
    #####:  587:    case THREW:
    #####:  588:      buffer << "    Result: threw an exception.\n"
    %%%%%:  588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  589:             << " Error msg:\n"
    %%%%%:  589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  590:             << FormatDeathTestOutput(error_message);
    %%%%%:  590-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  590-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  590-block  2
call    6 never executed
    $$$$$:  590-block  3
call    7 never executed
    $$$$$:  590-block  4
    #####:  591:      break;
    #####:  592:    case RETURNED:
    #####:  593:      buffer << "    Result: illegal return in test statement.\n"
    %%%%%:  593-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  594:             << " Error msg:\n"
    %%%%%:  594-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  595:             << FormatDeathTestOutput(error_message);
    %%%%%:  595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  595-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  595-block  2
call    6 never executed
    $$$$$:  595-block  3
call    7 never executed
    $$$$$:  595-block  4
    #####:  596:      break;
    #####:  597:    case DIED:
    #####:  598:      if (status_ok) {
    %%%%%:  598-block  0
branch  0 never executed
branch  1 never executed
    #####:  599:        if (matcher_.Matches(error_message)) {
    %%%%%:  599-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  599-block  1
branch  3 never executed
branch  4 never executed
    #####:  600:          success = true;
    %%%%%:  600-block  0
        -:  601:        } else {
    #####:  602:          std::ostringstream stream;
    %%%%%:  602-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  603:          matcher_.DescribeTo(&stream);
    %%%%%:  603-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  604:          buffer << "    Result: died but not with expected error.\n"
    %%%%%:  604-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  605:                 << "  Expected: " << stream.str() << "\n"
    %%%%%:  605-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  605-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  605-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  605-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  605-block  4
call   12 never executed
    $$$$$:  605-block  5
    #####:  606:                 << "Actual msg:\n"
    %%%%%:  606-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  607:                 << FormatDeathTestOutput(error_message);
    %%%%%:  607-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  607-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  607-block  2
call    6 never executed
call    7 never executed
    $$$$$:  607-block  3
call    8 never executed
    $$$$$:  607-block  4
    #####:  608:        }
call    0 never executed
    $$$$$:  608-block  0
call    1 never executed
        -:  609:      } else {
    #####:  610:        buffer << "    Result: died but not with expected exit code:\n"
    %%%%%:  610-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  611:               << "            " << ExitSummary(status()) << "\n"
    %%%%%:  611-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  611-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  611-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  611-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$:  611-block  4
call   13 never executed
    $$$$$:  611-block  5
    #####:  612:               << "Actual msg:\n"
    %%%%%:  612-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  613:               << FormatDeathTestOutput(error_message);
    %%%%%:  613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  613-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  613-block  2
call    6 never executed
call    7 never executed
    $$$$$:  613-block  3
call    8 never executed
    $$$$$:  613-block  4
        -:  614:      }
    #####:  615:      break;
    %%%%%:  615-block  0
    #####:  616:    case IN_PROGRESS:
        -:  617:    default:
    #####:  618:      GTEST_LOG_(FATAL)
    %%%%%:  618-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  618-block  1
call    3 never executed
    %%%%%:  618-block  2
call    4 never executed
    $$$$$:  618-block  3
call    5 never executed
    $$$$$:  618-block  4
    #####:  619:          << "DeathTest::Passed somehow called before conclusion of test";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  620:  }
        -:  621:
    #####:  622:  DeathTest::set_last_death_test_message(buffer.GetString());
    %%%%%:  622-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  622-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  622-block  2
call    6 never executed
    $$$$$:  622-block  3
call    7 never executed
    $$$$$:  622-block  4
    #####:  623:  return success;
    #####:  624:}
call    0 never executed
call    1 never executed
    $$$$$:  624-block  0
call    2 never executed
    $$$$$:  624-block  1
call    3 never executed
        -:  625:
        -:  626:// Note: The return value points into args, so the return value's lifetime is
        -:  627:// bound to that of args.
function _ZN7testing8internal18CreateArgvFromArgsERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE called 0 returned 0% blocks executed 0%
    #####:  628:std::unique_ptr<char*[]> CreateArgvFromArgs(std::vector<std::string>& args) {
    #####:  629:  auto result = std::make_unique<char*[]>(args.size() + 1);
    %%%%%:  629-block  0
call    0 never executed
call    1 never executed
    #####:  630:  for (size_t i = 0; i < args.size(); ++i) {
    %%%%%:  630-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  631:    result[i] = &args[i][0];
    %%%%%:  631-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  631-block  1
        -:  632:  }
    #####:  633:  result[args.size()] = nullptr;  // extra null terminator
    %%%%%:  633-block  0
call    0 never executed
call    1 never executed
    #####:  634:  return result;
    %%%%%:  634-block  0
    =====:  635:}
    $$$$$:  635-block  0
call    0 never executed
        -:  636:
        -:  637:#ifdef GTEST_OS_WINDOWS
        -:  638:// WindowsDeathTest implements death test on Windows. Due to the
        -:  639:// specifics of starting new processes on Windows, death test there are
        -:  640:// always threadsafe, and Google Test considers the
        -:  641:// --gtest_death_test_style=fast setting to be equivalent to
        -:  642:// --gtest_death_test_style=threadsafe there.
        -:  643://
        -:  644:// A few implementation notes:  Like the Linux version, the Windows
        -:  645:// implementation uses pipes for child-to-parent communication. But due to
        -:  646:// the specifics of pipes on Windows, some extra steps are required:
        -:  647://
        -:  648:// 1. The parent creates a communication pipe and stores handles to both
        -:  649://    ends of it.
        -:  650:// 2. The parent starts the child and provides it with the information
        -:  651://    necessary to acquire the handle to the write end of the pipe.
        -:  652:// 3. The child acquires the write end of the pipe and signals the parent
        -:  653://    using a Windows event.
        -:  654:// 4. Now the parent can release the write end of the pipe on its side. If
        -:  655://    this is done before step 3, the object's reference count goes down to
        -:  656://    0 and it is destroyed, preventing the child from acquiring it. The
        -:  657://    parent now has to release it, or read operations on the read end of
        -:  658://    the pipe will not return when the child terminates.
        -:  659:// 5. The parent reads child's output through the pipe (outcome code and
        -:  660://    any possible error messages) from the pipe, and its stderr and then
        -:  661://    determines whether to fail the test.
        -:  662://
        -:  663:// Note: to distinguish Win32 API calls from the local method and function
        -:  664:// calls, the former are explicitly resolved in the global namespace.
        -:  665://
        -:  666:class WindowsDeathTest : public DeathTestImpl {
        -:  667: public:
function _ZN7testing8internal16WindowsDeathTestC1EPKcNS_7MatcherIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES3_i called 0 returned 0% blocks executed 0%
    #####:  668:  WindowsDeathTest(const char* a_statement, Matcher<const std::string&> matcher,
        -:  669:                   const char* file, int line)
    #####:  670:      : DeathTestImpl(a_statement, std::move(matcher)),
    #####:  671:        file_(file),
    #####:  672:        line_(line) {}
    %%%%%:  672-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  672-block  1
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  672-block  2
call    9 never executed
        -:  673:
        -:  674:  // All of these virtual functions are inherited from DeathTest.
        -:  675:  virtual int Wait();
        -:  676:  virtual TestRole AssumeRole();
        -:  677:
        -:  678: private:
        -:  679:  // The name of the file in which the death test is located.
        -:  680:  const char* const file_;
        -:  681:  // The line number on which the death test is located.
        -:  682:  const int line_;
        -:  683:  // Handle to the write end of the pipe to the child process.
        -:  684:  AutoHandle write_handle_;
        -:  685:  // Child process handle.
        -:  686:  AutoHandle child_handle_;
        -:  687:  // Event the child process uses to signal the parent that it has
        -:  688:  // acquired the handle to the write end of the pipe. After seeing this
        -:  689:  // event the parent can release its own handles to make sure its
        -:  690:  // ReadFile() calls return when the child terminates.
        -:  691:  AutoHandle event_handle_;
        -:  692:};
        -:  693:
        -:  694:// Waits for the child in a death test to exit, returning its exit
        -:  695:// status, or 0 if no child process exists.  As a side effect, sets the
        -:  696:// outcome data member.
function _ZN7testing8internal16WindowsDeathTest4WaitEv called 0 returned 0% blocks executed 0%
    #####:  697:int WindowsDeathTest::Wait() {
    #####:  698:  if (!spawned()) return 0;
    %%%%%:  698-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  698-block  1
        -:  699:
        -:  700:  // Wait until the child either signals that it has acquired the write end
        -:  701:  // of the pipe or it dies.
    #####:  702:  const HANDLE wait_handles[2] = {child_handle_.Get(), event_handle_.Get()};
    %%%%%:  702-block  0
call    0 never executed
call    1 never executed
    #####:  703:  switch (::WaitForMultipleObjects(2, wait_handles,
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  703-block  0
branch  3 never executed
branch  4 never executed
        -:  704:                                   FALSE,  // Waits for any of the handles.
        -:  705:                                   INFINITE)) {
    #####:  706:    case WAIT_OBJECT_0:
        -:  707:    case WAIT_OBJECT_0 + 1:
    #####:  708:      break;
    %%%%%:  708-block  0
    #####:  709:    default:
    %%%%%:  709-block  0
    #####:  710:      GTEST_DEATH_TEST_CHECK_(false);  // Should not get here.
    %%%%%:  710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  710-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  710-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  710-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  710-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  710-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  710-block  6
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  710-block  7
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%:  710-block  8
call   25 never executed
    %%%%%:  710-block  9
call   26 never executed
branch 27 never executed
branch 28 never executed
    %%%%%:  710-block 10
branch 29 never executed
branch 30 never executed
    $$$$$:  710-block 11
call   31 never executed
    $$$$$:  710-block 12
    $$$$$:  710-block 13
call   32 never executed
    $$$$$:  710-block 14
    $$$$$:  710-block 15
call   33 never executed
    $$$$$:  710-block 16
    $$$$$:  710-block 17
call   34 never executed
    $$$$$:  710-block 18
    $$$$$:  710-block 19
call   35 never executed
    $$$$$:  710-block 20
    $$$$$:  710-block 21
call   36 never executed
    $$$$$:  710-block 22
    $$$$$:  710-block 23
call   37 never executed
    $$$$$:  710-block 24
    $$$$$:  710-block 25
call   38 never executed
    $$$$$:  710-block 26
    $$$$$:  710-block 27
        -:  711:  }
        -:  712:
        -:  713:  // The child has acquired the write end of the pipe or exited.
        -:  714:  // We release the handle on our side and continue.
    #####:  715:  write_handle_.Reset();
    %%%%%:  715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  716:  event_handle_.Reset();
    %%%%%:  716-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  717:
    #####:  718:  ReadAndInterpretStatusByte();
    %%%%%:  718-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  719:
        -:  720:  // Waits for the child process to exit if it haven't already. This
        -:  721:  // returns immediately if the child has already exited, regardless of
        -:  722:  // whether previous calls to WaitForMultipleObjects synchronized on this
        -:  723:  // handle or not.
    #####:  724:  GTEST_DEATH_TEST_CHECK_(WAIT_OBJECT_0 ==
    %%%%%:  724-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  724-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  724-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  724-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  724-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  724-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  724-block  6
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%:  724-block  7
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%:  724-block  8
call   26 never executed
branch 27 never executed
branch 28 never executed
    %%%%%:  724-block  9
call   29 never executed
    %%%%%:  724-block 10
call   30 never executed
branch 31 never executed
branch 32 never executed
    %%%%%:  724-block 11
branch 33 never executed
branch 34 never executed
    $$$$$:  724-block 12
call   35 never executed
    $$$$$:  724-block 13
    $$$$$:  724-block 14
call   36 never executed
    $$$$$:  724-block 15
    $$$$$:  724-block 16
call   37 never executed
    $$$$$:  724-block 17
    $$$$$:  724-block 18
call   38 never executed
    $$$$$:  724-block 19
    $$$$$:  724-block 20
call   39 never executed
    $$$$$:  724-block 21
    $$$$$:  724-block 22
call   40 never executed
    $$$$$:  724-block 23
    $$$$$:  724-block 24
call   41 never executed
    $$$$$:  724-block 25
    $$$$$:  724-block 26
call   42 never executed
    $$$$$:  724-block 27
    $$$$$:  724-block 28
        -:  725:                          ::WaitForSingleObject(child_handle_.Get(), INFINITE));
        -:  726:  DWORD status_code;
    #####:  727:  GTEST_DEATH_TEST_CHECK_(
    %%%%%:  727-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  727-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  727-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  727-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  727-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  727-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  727-block  6
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%:  727-block  7
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%:  727-block  8
call   26 never executed
branch 27 never executed
branch 28 never executed
    %%%%%:  727-block  9
call   29 never executed
    %%%%%:  727-block 10
call   30 never executed
branch 31 never executed
branch 32 never executed
    %%%%%:  727-block 11
branch 33 never executed
branch 34 never executed
    $$$$$:  727-block 12
call   35 never executed
    $$$$$:  727-block 13
    $$$$$:  727-block 14
call   36 never executed
    $$$$$:  727-block 15
    $$$$$:  727-block 16
call   37 never executed
    $$$$$:  727-block 17
    $$$$$:  727-block 18
call   38 never executed
    $$$$$:  727-block 19
    $$$$$:  727-block 20
call   39 never executed
    $$$$$:  727-block 21
    $$$$$:  727-block 22
call   40 never executed
    $$$$$:  727-block 23
    $$$$$:  727-block 24
call   41 never executed
    $$$$$:  727-block 25
    $$$$$:  727-block 26
call   42 never executed
    $$$$$:  727-block 27
    $$$$$:  727-block 28
        -:  728:      ::GetExitCodeProcess(child_handle_.Get(), &status_code) != FALSE);
    #####:  729:  child_handle_.Reset();
    %%%%%:  729-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  730:  set_status(static_cast<int>(status_code));
    %%%%%:  730-block  0
call    0 never executed
    #####:  731:  return status();
call    0 never executed
        -:  732:}
        -:  733:
        -:  734:// The AssumeRole process for a Windows death test.  It creates a child
        -:  735:// process with the same executable as the current process to run the
        -:  736:// death test.  The child process is given the --gtest_filter and
        -:  737:// --gtest_internal_run_death_test flags such that it knows to run the
        -:  738:// current death test only.
function _ZN7testing8internal16WindowsDeathTest10AssumeRoleEv called 0 returned 0% blocks executed 0%
    #####:  739:DeathTest::TestRole WindowsDeathTest::AssumeRole() {
    #####:  740:  const UnitTestImpl* const impl = GetUnitTestImpl();
    %%%%%:  740-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  741:  const InternalRunDeathTestFlag* const flag =
    #####:  742:      impl->internal_run_death_test_flag();
    %%%%%:  742-block  0
call    0 never executed
    #####:  743:  const TestInfo* const info = impl->current_test_info();
call    0 never executed
    #####:  744:  const int death_test_index = info->result()->death_test_count();
call    0 never executed
call    1 never executed
        -:  745:
    #####:  746:  if (flag != nullptr) {
branch  0 never executed
branch  1 never executed
        -:  747:    // ParseInternalRunDeathTestFlag() has performed all the necessary
        -:  748:    // processing.
    #####:  749:    set_write_fd(flag->write_fd());
    %%%%%:  749-block  0
call    0 never executed
call    1 never executed
    #####:  750:    return EXECUTE_TEST;
        -:  751:  }
        -:  752:
        -:  753:  // WindowsDeathTest uses an anonymous pipe to communicate results of
        -:  754:  // a death test.
    #####:  755:  SECURITY_ATTRIBUTES handles_are_inheritable = {sizeof(SECURITY_ATTRIBUTES),
    %%%%%:  755-block  0
        -:  756:                                                 nullptr, TRUE};
        -:  757:  HANDLE read_handle, write_handle;
    #####:  758:  GTEST_DEATH_TEST_CHECK_(::CreatePipe(&read_handle, &write_handle,
    %%%%%:  758-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  758-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  758-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  758-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  758-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  758-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  758-block  6
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  758-block  7
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%:  758-block  8
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%:  758-block  9
call   28 never executed
    %%%%%:  758-block 10
call   29 never executed
branch 30 never executed
branch 31 never executed
    %%%%%:  758-block 11
branch 32 never executed
branch 33 never executed
    $$$$$:  758-block 12
call   34 never executed
    $$$$$:  758-block 13
    $$$$$:  758-block 14
call   35 never executed
    $$$$$:  758-block 15
    $$$$$:  758-block 16
call   36 never executed
    $$$$$:  758-block 17
    $$$$$:  758-block 18
call   37 never executed
    $$$$$:  758-block 19
    $$$$$:  758-block 20
call   38 never executed
    $$$$$:  758-block 21
    $$$$$:  758-block 22
call   39 never executed
    $$$$$:  758-block 23
    $$$$$:  758-block 24
call   40 never executed
    $$$$$:  758-block 25
    $$$$$:  758-block 26
call   41 never executed
    $$$$$:  758-block 27
    $$$$$:  758-block 28
        -:  759:                                       &handles_are_inheritable,
        -:  760:                                       0)  // Default buffer size.
        -:  761:                          != FALSE);
    #####:  762:  set_read_fd(
    %%%%%:  762-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  762-block  1
call    3 never executed
        -:  763:      ::_open_osfhandle(reinterpret_cast<intptr_t>(read_handle), O_RDONLY));
    #####:  764:  write_handle_.Reset(write_handle);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  765:  event_handle_.Reset(::CreateEvent(
    %%%%%:  765-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  765-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  766:      &handles_are_inheritable,
        -:  767:      TRUE,       // The event will automatically reset to non-signaled state.
        -:  768:      FALSE,      // The initial state is non-signalled.
        -:  769:      nullptr));  // The even is unnamed.
    #####:  770:  GTEST_DEATH_TEST_CHECK_(event_handle_.Get() != nullptr);
    %%%%%:  770-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  770-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  770-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  770-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  770-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  770-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  770-block  6
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%:  770-block  7
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%:  770-block  8
call   26 never executed
    %%%%%:  770-block  9
call   27 never executed
branch 28 never executed
branch 29 never executed
    %%%%%:  770-block 10
branch 30 never executed
branch 31 never executed
    $$$$$:  770-block 11
call   32 never executed
    $$$$$:  770-block 12
    $$$$$:  770-block 13
call   33 never executed
    $$$$$:  770-block 14
    $$$$$:  770-block 15
call   34 never executed
    $$$$$:  770-block 16
    $$$$$:  770-block 17
call   35 never executed
    $$$$$:  770-block 18
    $$$$$:  770-block 19
call   36 never executed
    $$$$$:  770-block 20
    $$$$$:  770-block 21
call   37 never executed
    $$$$$:  770-block 22
    $$$$$:  770-block 23
call   38 never executed
    $$$$$:  770-block 24
    $$$$$:  770-block 25
call   39 never executed
    $$$$$:  770-block 26
    $$$$$:  770-block 27
    #####:  771:  const std::string filter_flag = std::string("--") + GTEST_FLAG_PREFIX_ +
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  771-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  771-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  771-block  2
    $$$$$:  771-block  3
    $$$$$:  771-block  4
    $$$$$:  771-block  5
    #####:  772:                                  "filter=" + info->test_suite_name() + "." +
call    0 never executed
    %%%%%:  772-block  0
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  772-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  772-block  2
    $$$$$:  772-block  3
    #####:  773:                                  info->name();
    %%%%%:  773-block  0
call    0 never executed
    %%%%%:  773-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:  const std::string internal_flag =
    #####:  775:      std::string("--") + GTEST_FLAG_PREFIX_ +
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  775-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  775-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  775-block  2
    $$$$$:  775-block  3
    $$$$$:  775-block  4
    $$$$$:  775-block  5
    #####:  776:      "internal_run_death_test=" + file_ + "|" + StreamableToString(line_) +
    %%%%%:  776-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  776-block  1
call    3 never executed
    %%%%%:  776-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  776-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  776-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  776-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$:  776-block  6
    $$$$$:  776-block  7
    $$$$$:  776-block  8
    $$$$$:  776-block  9
    $$$$$:  776-block 10
    #####:  777:      "|" + StreamableToString(death_test_index) + "|" +
    %%%%%:  777-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  777-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  777-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  777-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$:  777-block  4
    $$$$$:  777-block  5
    $$$$$:  777-block  6
    $$$$$:  777-block  7
    #####:  778:      StreamableToString(static_cast<unsigned int>(::GetCurrentProcessId())) +
    %%%%%:  778-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  778-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  778-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$:  778-block  3
    $$$$$:  778-block  4
    $$$$$:  778-block  5
        -:  779:      // size_t has the same width as pointers on both 32-bit and 64-bit
        -:  780:      // Windows platforms.
        -:  781:      // See http://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx.
    #####:  782:      "|" + StreamableToString(reinterpret_cast<size_t>(write_handle)) + "|" +
    %%%%%:  782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  782-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  782-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:  782-block  3
    $$$$$:  782-block  4
    $$$$$:  782-block  5
    $$$$$:  782-block  6
    #####:  783:      StreamableToString(reinterpret_cast<size_t>(event_handle_.Get()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  783-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  783-block  1
    $$$$$:  783-block  2
        -:  784:
        -:  785:  char executable_path[_MAX_PATH + 1];  // NOLINT
    #####:  786:  GTEST_DEATH_TEST_CHECK_(_MAX_PATH + 1 != ::GetModuleFileNameA(nullptr,
    %%%%%:  786-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  786-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  786-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  786-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  786-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  786-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  786-block  6
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  786-block  7
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%:  786-block  8
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%:  786-block  9
call   28 never executed
    %%%%%:  786-block 10
call   29 never executed
branch 30 never executed
branch 31 never executed
    %%%%%:  786-block 11
branch 32 never executed
branch 33 never executed
    $$$$$:  786-block 12
call   34 never executed
    $$$$$:  786-block 13
    $$$$$:  786-block 14
call   35 never executed
    $$$$$:  786-block 15
    $$$$$:  786-block 16
call   36 never executed
    $$$$$:  786-block 17
    $$$$$:  786-block 18
call   37 never executed
    $$$$$:  786-block 19
    $$$$$:  786-block 20
call   38 never executed
    $$$$$:  786-block 21
    $$$$$:  786-block 22
call   39 never executed
    $$$$$:  786-block 23
    $$$$$:  786-block 24
call   40 never executed
    $$$$$:  786-block 25
    $$$$$:  786-block 26
call   41 never executed
    $$$$$:  786-block 27
    $$$$$:  786-block 28
        -:  787:                                                                executable_path,
        -:  788:                                                                _MAX_PATH));
        -:  789:
    #####:  790:  std::string command_line = std::string(::GetCommandLineA()) + " " +
    %%%%%:  790-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  790-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  790-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  790-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$:  790-block  4
    $$$$$:  790-block  5
    $$$$$:  790-block  6
    $$$$$:  790-block  7
    #####:  791:                             filter_flag + " \"" + internal_flag + "\"";
    %%%%%:  791-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  791-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  791-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$:  791-block  3
    $$$$$:  791-block  4
        -:  792:
    #####:  793:  DeathTest::set_last_death_test_message("");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  793-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  793-block  1
call    7 never executed
call    8 never executed
    $$$$$:  793-block  2
call    9 never executed
    $$$$$:  793-block  3
    $$$$$:  793-block  4
call   10 never executed
    $$$$$:  793-block  5
        -:  794:
    #####:  795:  CaptureStderr();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  796:  // Flush the log buffers since the log streams are shared with the child.
    #####:  797:  FlushInfoLog();
    %%%%%:  797-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  798:
        -:  799:  // The child process will share the standard handles with the parent.
        -:  800:  STARTUPINFOA startup_info;
    #####:  801:  memset(&startup_info, 0, sizeof(STARTUPINFO));
    #####:  802:  startup_info.dwFlags = STARTF_USESTDHANDLES;
    #####:  803:  startup_info.hStdInput = ::GetStdHandle(STD_INPUT_HANDLE);
    %%%%%:  803-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  804:  startup_info.hStdOutput = ::GetStdHandle(STD_OUTPUT_HANDLE);
    %%%%%:  804-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  805:  startup_info.hStdError = ::GetStdHandle(STD_ERROR_HANDLE);
    %%%%%:  805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  805-block  1
        -:  806:
        -:  807:  PROCESS_INFORMATION process_info;
    #####:  808:  GTEST_DEATH_TEST_CHECK_(
    %%%%%:  808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  808-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  808-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  808-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  808-block  4
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:  808-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:  808-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  808-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%:  808-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
    %%%%%:  808-block  9
call   30 never executed
branch 31 never executed
branch 32 never executed
    %%%%%:  808-block 10
call   33 never executed
    %%%%%:  808-block 11
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%:  808-block 12
branch 37 never executed
branch 38 never executed
    $$$$$:  808-block 13
call   39 never executed
    $$$$$:  808-block 14
    $$$$$:  808-block 15
call   40 never executed
    $$$$$:  808-block 16
    $$$$$:  808-block 17
call   41 never executed
    $$$$$:  808-block 18
    $$$$$:  808-block 19
call   42 never executed
    $$$$$:  808-block 20
    $$$$$:  808-block 21
call   43 never executed
    $$$$$:  808-block 22
    $$$$$:  808-block 23
call   44 never executed
    $$$$$:  808-block 24
    $$$$$:  808-block 25
call   45 never executed
    $$$$$:  808-block 26
    $$$$$:  808-block 27
call   46 never executed
    $$$$$:  808-block 28
    $$$$$:  808-block 29
        -:  809:      ::CreateProcessA(
        -:  810:          executable_path, const_cast<char*>(command_line.c_str()),
        -:  811:          nullptr,  // Returned process handle is not inheritable.
        -:  812:          nullptr,  // Returned thread handle is not inheritable.
        -:  813:          TRUE,  // Child inherits all inheritable handles (for write_handle_).
        -:  814:          0x0,   // Default creation flags.
        -:  815:          nullptr,  // Inherit the parent's environment.
        -:  816:          UnitTest::GetInstance()->original_working_dir(), &startup_info,
        -:  817:          &process_info) != FALSE);
    #####:  818:  child_handle_.Reset(process_info.hProcess);
    %%%%%:  818-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  819:  ::CloseHandle(process_info.hThread);
    %%%%%:  819-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  820:  set_spawned(true);
    %%%%%:  820-block  0
call    0 never executed
    #####:  821:  return OVERSEE_TEST;
    #####:  822:}
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$:  822-block  0
call    3 never executed
    $$$$$:  822-block  1
call    4 never executed
    $$$$$:  822-block  2
call    5 never executed
        -:  823:
        -:  824:#elif defined(GTEST_OS_FUCHSIA)
        -:  825:
        -:  826:class FuchsiaDeathTest : public DeathTestImpl {
        -:  827: public:
        -:  828:  FuchsiaDeathTest(const char* a_statement, Matcher<const std::string&> matcher,
        -:  829:                   const char* file, int line)
        -:  830:      : DeathTestImpl(a_statement, std::move(matcher)),
        -:  831:        file_(file),
        -:  832:        line_(line) {}
        -:  833:
        -:  834:  // All of these virtual functions are inherited from DeathTest.
        -:  835:  int Wait() override;
        -:  836:  TestRole AssumeRole() override;
        -:  837:  std::string GetErrorLogs() override;
        -:  838:
        -:  839: private:
        -:  840:  // The name of the file in which the death test is located.
        -:  841:  const char* const file_;
        -:  842:  // The line number on which the death test is located.
        -:  843:  const int line_;
        -:  844:  // The stderr data captured by the child process.
        -:  845:  std::string captured_stderr_;
        -:  846:
        -:  847:  zx::process child_process_;
        -:  848:  zx::channel exception_channel_;
        -:  849:  zx::socket stderr_socket_;
        -:  850:};
        -:  851:
        -:  852:// Waits for the child in a death test to exit, returning its exit
        -:  853:// status, or 0 if no child process exists.  As a side effect, sets the
        -:  854:// outcome data member.
        -:  855:int FuchsiaDeathTest::Wait() {
        -:  856:  const int kProcessKey = 0;
        -:  857:  const int kSocketKey = 1;
        -:  858:  const int kExceptionKey = 2;
        -:  859:
        -:  860:  if (!spawned()) return 0;
        -:  861:
        -:  862:  // Create a port to wait for socket/task/exception events.
        -:  863:  zx_status_t status_zx;
        -:  864:  zx::port port;
        -:  865:  status_zx = zx::port::create(0, &port);
        -:  866:  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -:  867:
        -:  868:  // Register to wait for the child process to terminate.
        -:  869:  status_zx =
        -:  870:      child_process_.wait_async(port, kProcessKey, ZX_PROCESS_TERMINATED, 0);
        -:  871:  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -:  872:
        -:  873:  // Register to wait for the socket to be readable or closed.
        -:  874:  status_zx = stderr_socket_.wait_async(
        -:  875:      port, kSocketKey, ZX_SOCKET_READABLE | ZX_SOCKET_PEER_CLOSED, 0);
        -:  876:  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -:  877:
        -:  878:  // Register to wait for an exception.
        -:  879:  status_zx = exception_channel_.wait_async(port, kExceptionKey,
        -:  880:                                            ZX_CHANNEL_READABLE, 0);
        -:  881:  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -:  882:
        -:  883:  bool process_terminated = false;
        -:  884:  bool socket_closed = false;
        -:  885:  do {
        -:  886:    zx_port_packet_t packet = {};
        -:  887:    status_zx = port.wait(zx::time::infinite(), &packet);
        -:  888:    GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -:  889:
        -:  890:    if (packet.key == kExceptionKey) {
        -:  891:      // Process encountered an exception. Kill it directly rather than
        -:  892:      // letting other handlers process the event. We will get a kProcessKey
        -:  893:      // event when the process actually terminates.
        -:  894:      status_zx = child_process_.kill();
        -:  895:      GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -:  896:    } else if (packet.key == kProcessKey) {
        -:  897:      // Process terminated.
        -:  898:      GTEST_DEATH_TEST_CHECK_(ZX_PKT_IS_SIGNAL_ONE(packet.type));
        -:  899:      GTEST_DEATH_TEST_CHECK_(packet.signal.observed & ZX_PROCESS_TERMINATED);
        -:  900:      process_terminated = true;
        -:  901:    } else if (packet.key == kSocketKey) {
        -:  902:      GTEST_DEATH_TEST_CHECK_(ZX_PKT_IS_SIGNAL_ONE(packet.type));
        -:  903:      if (packet.signal.observed & ZX_SOCKET_READABLE) {
        -:  904:        // Read data from the socket.
        -:  905:        constexpr size_t kBufferSize = 1024;
        -:  906:        do {
        -:  907:          size_t old_length = captured_stderr_.length();
        -:  908:          size_t bytes_read = 0;
        -:  909:          captured_stderr_.resize(old_length + kBufferSize);
        -:  910:          status_zx =
        -:  911:              stderr_socket_.read(0, &captured_stderr_.front() + old_length,
        -:  912:                                  kBufferSize, &bytes_read);
        -:  913:          captured_stderr_.resize(old_length + bytes_read);
        -:  914:        } while (status_zx == ZX_OK);
        -:  915:        if (status_zx == ZX_ERR_PEER_CLOSED) {
        -:  916:          socket_closed = true;
        -:  917:        } else {
        -:  918:          GTEST_DEATH_TEST_CHECK_(status_zx == ZX_ERR_SHOULD_WAIT);
        -:  919:          status_zx = stderr_socket_.wait_async(
        -:  920:              port, kSocketKey, ZX_SOCKET_READABLE | ZX_SOCKET_PEER_CLOSED, 0);
        -:  921:          GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -:  922:        }
        -:  923:      } else {
        -:  924:        GTEST_DEATH_TEST_CHECK_(packet.signal.observed & ZX_SOCKET_PEER_CLOSED);
        -:  925:        socket_closed = true;
        -:  926:      }
        -:  927:    }
        -:  928:  } while (!process_terminated && !socket_closed);
        -:  929:
        -:  930:  ReadAndInterpretStatusByte();
        -:  931:
        -:  932:  zx_info_process_t buffer;
        -:  933:  status_zx = child_process_.get_info(ZX_INFO_PROCESS, &buffer, sizeof(buffer),
        -:  934:                                      nullptr, nullptr);
        -:  935:  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -:  936:
        -:  937:  GTEST_DEATH_TEST_CHECK_(buffer.flags & ZX_INFO_PROCESS_FLAG_EXITED);
        -:  938:  set_status(static_cast<int>(buffer.return_code));
        -:  939:  return status();
        -:  940:}
        -:  941:
        -:  942:// The AssumeRole process for a Fuchsia death test.  It creates a child
        -:  943:// process with the same executable as the current process to run the
        -:  944:// death test.  The child process is given the --gtest_filter and
        -:  945:// --gtest_internal_run_death_test flags such that it knows to run the
        -:  946:// current death test only.
        -:  947:DeathTest::TestRole FuchsiaDeathTest::AssumeRole() {
        -:  948:  const UnitTestImpl* const impl = GetUnitTestImpl();
        -:  949:  const InternalRunDeathTestFlag* const flag =
        -:  950:      impl->internal_run_death_test_flag();
        -:  951:  const TestInfo* const info = impl->current_test_info();
        -:  952:  const int death_test_index = info->result()->death_test_count();
        -:  953:
        -:  954:  if (flag != nullptr) {
        -:  955:    // ParseInternalRunDeathTestFlag() has performed all the necessary
        -:  956:    // processing.
        -:  957:    set_write_fd(kFuchsiaReadPipeFd);
        -:  958:    return EXECUTE_TEST;
        -:  959:  }
        -:  960:
        -:  961:  // Flush the log buffers since the log streams are shared with the child.
        -:  962:  FlushInfoLog();
        -:  963:
        -:  964:  // Build the child process command line.
        -:  965:  const std::string filter_flag = std::string("--") + GTEST_FLAG_PREFIX_ +
        -:  966:                                  "filter=" + info->test_suite_name() + "." +
        -:  967:                                  info->name();
        -:  968:  const std::string internal_flag = std::string("--") + GTEST_FLAG_PREFIX_ +
        -:  969:                                    kInternalRunDeathTestFlag + "=" + file_ +
        -:  970:                                    "|" + StreamableToString(line_) + "|" +
        -:  971:                                    StreamableToString(death_test_index);
        -:  972:
        -:  973:  std::vector<std::string> args = GetInjectableArgvs();
        -:  974:  args.push_back(filter_flag);
        -:  975:  args.push_back(internal_flag);
        -:  976:
        -:  977:  // Build the pipe for communication with the child.
        -:  978:  zx_status_t status;
        -:  979:  zx_handle_t child_pipe_handle;
        -:  980:  int child_pipe_fd;
        -:  981:  status = fdio_pipe_half(&child_pipe_fd, &child_pipe_handle);
        -:  982:  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);
        -:  983:  set_read_fd(child_pipe_fd);
        -:  984:
        -:  985:  // Set the pipe handle for the child.
        -:  986:  fdio_spawn_action_t spawn_actions[2] = {};
        -:  987:  fdio_spawn_action_t* add_handle_action = &spawn_actions[0];
        -:  988:  add_handle_action->action = FDIO_SPAWN_ACTION_ADD_HANDLE;
        -:  989:  add_handle_action->h.id = PA_HND(PA_FD, kFuchsiaReadPipeFd);
        -:  990:  add_handle_action->h.handle = child_pipe_handle;
        -:  991:
        -:  992:  // Create a socket pair will be used to receive the child process' stderr.
        -:  993:  zx::socket stderr_producer_socket;
        -:  994:  status = zx::socket::create(0, &stderr_producer_socket, &stderr_socket_);
        -:  995:  GTEST_DEATH_TEST_CHECK_(status >= 0);
        -:  996:  int stderr_producer_fd = -1;
        -:  997:  status =
        -:  998:      fdio_fd_create(stderr_producer_socket.release(), &stderr_producer_fd);
        -:  999:  GTEST_DEATH_TEST_CHECK_(status >= 0);
        -: 1000:
        -: 1001:  // Make the stderr socket nonblocking.
        -: 1002:  GTEST_DEATH_TEST_CHECK_(fcntl(stderr_producer_fd, F_SETFL, 0) == 0);
        -: 1003:
        -: 1004:  fdio_spawn_action_t* add_stderr_action = &spawn_actions[1];
        -: 1005:  add_stderr_action->action = FDIO_SPAWN_ACTION_CLONE_FD;
        -: 1006:  add_stderr_action->fd.local_fd = stderr_producer_fd;
        -: 1007:  add_stderr_action->fd.target_fd = STDERR_FILENO;
        -: 1008:
        -: 1009:  // Create a child job.
        -: 1010:  zx_handle_t child_job = ZX_HANDLE_INVALID;
        -: 1011:  status = zx_job_create(zx_job_default(), 0, &child_job);
        -: 1012:  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);
        -: 1013:  zx_policy_basic_t policy;
        -: 1014:  policy.condition = ZX_POL_NEW_ANY;
        -: 1015:  policy.policy = ZX_POL_ACTION_ALLOW;
        -: 1016:  status = zx_job_set_policy(child_job, ZX_JOB_POL_RELATIVE, ZX_JOB_POL_BASIC,
        -: 1017:                             &policy, 1);
        -: 1018:  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);
        -: 1019:
        -: 1020:  // Create an exception channel attached to the |child_job|, to allow
        -: 1021:  // us to suppress the system default exception handler from firing.
        -: 1022:  status = zx_task_create_exception_channel(
        -: 1023:      child_job, 0, exception_channel_.reset_and_get_address());
        -: 1024:  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);
        -: 1025:
        -: 1026:  // Spawn the child process.
        -: 1027:  // Note: The test component must have `fuchsia.process.Launcher` declared
        -: 1028:  // in its manifest. (Fuchsia integration test require creating a
        -: 1029:  // "Fuchsia Test Component" which contains a "Fuchsia Component Manifest")
        -: 1030:  // Launching processes is a privileged operation in Fuschia, and the
        -: 1031:  // declaration indicates that the ability is required for the component.
        -: 1032:  std::unique_ptr<char*[]> argv = CreateArgvFromArgs(args);
        -: 1033:  status = fdio_spawn_etc(child_job, FDIO_SPAWN_CLONE_ALL, argv[0], argv.get(),
        -: 1034:                          nullptr, 2, spawn_actions,
        -: 1035:                          child_process_.reset_and_get_address(), nullptr);
        -: 1036:  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);
        -: 1037:
        -: 1038:  set_spawned(true);
        -: 1039:  return OVERSEE_TEST;
        -: 1040:}
        -: 1041:
        -: 1042:std::string FuchsiaDeathTest::GetErrorLogs() { return captured_stderr_; }
        -: 1043:
        -: 1044:#else  // We are neither on Windows, nor on Fuchsia.
        -: 1045:
        -: 1046:// ForkingDeathTest provides implementations for most of the abstract
        -: 1047:// methods of the DeathTest interface.  Only the AssumeRole method is
        -: 1048:// left undefined.
        -: 1049:class ForkingDeathTest : public DeathTestImpl {
        -: 1050: public:
        -: 1051:  ForkingDeathTest(const char* statement, Matcher<const std::string&> matcher);
        -: 1052:
        -: 1053:  // All of these virtual functions are inherited from DeathTest.
        -: 1054:  int Wait() override;
        -: 1055:
        -: 1056: protected:
        -: 1057:  void set_child_pid(pid_t child_pid) { child_pid_ = child_pid; }
        -: 1058:
        -: 1059: private:
        -: 1060:  // PID of child process during death test; 0 in the child process itself.
        -: 1061:  pid_t child_pid_;
        -: 1062:};
        -: 1063:
        -: 1064:// Constructs a ForkingDeathTest.
        -: 1065:ForkingDeathTest::ForkingDeathTest(const char* a_statement,
        -: 1066:                                   Matcher<const std::string&> matcher)
        -: 1067:    : DeathTestImpl(a_statement, std::move(matcher)), child_pid_(-1) {}
        -: 1068:
        -: 1069:// Waits for the child in a death test to exit, returning its exit
        -: 1070:// status, or 0 if no child process exists.  As a side effect, sets the
        -: 1071:// outcome data member.
        -: 1072:int ForkingDeathTest::Wait() {
        -: 1073:  if (!spawned()) return 0;
        -: 1074:
        -: 1075:  ReadAndInterpretStatusByte();
        -: 1076:
        -: 1077:  int status_value;
        -: 1078:  GTEST_DEATH_TEST_CHECK_SYSCALL_(waitpid(child_pid_, &status_value, 0));
        -: 1079:  set_status(status_value);
        -: 1080:  return status_value;
        -: 1081:}
        -: 1082:
        -: 1083:// A concrete death test class that forks, then immediately runs the test
        -: 1084:// in the child process.
        -: 1085:class NoExecDeathTest : public ForkingDeathTest {
        -: 1086: public:
        -: 1087:  NoExecDeathTest(const char* a_statement, Matcher<const std::string&> matcher)
        -: 1088:      : ForkingDeathTest(a_statement, std::move(matcher)) {}
        -: 1089:  TestRole AssumeRole() override;
        -: 1090:};
        -: 1091:
        -: 1092:// The AssumeRole process for a fork-and-run death test.  It implements a
        -: 1093:// straightforward fork, with a simple pipe to transmit the status byte.
        -: 1094:DeathTest::TestRole NoExecDeathTest::AssumeRole() {
        -: 1095:  const size_t thread_count = GetThreadCount();
        -: 1096:  if (thread_count != 1) {
        -: 1097:    GTEST_LOG_(WARNING) << DeathTestThreadWarning(thread_count);
        -: 1098:  }
        -: 1099:
        -: 1100:  int pipe_fd[2];
        -: 1101:  GTEST_DEATH_TEST_CHECK_(pipe(pipe_fd) != -1);
        -: 1102:
        -: 1103:  DeathTest::set_last_death_test_message("");
        -: 1104:  CaptureStderr();
        -: 1105:  // When we fork the process below, the log file buffers are copied, but the
        -: 1106:  // file descriptors are shared.  We flush all log files here so that closing
        -: 1107:  // the file descriptors in the child process doesn't throw off the
        -: 1108:  // synchronization between descriptors and buffers in the parent process.
        -: 1109:  // This is as close to the fork as possible to avoid a race condition in case
        -: 1110:  // there are multiple threads running before the death test, and another
        -: 1111:  // thread writes to the log file.
        -: 1112:  FlushInfoLog();
        -: 1113:
        -: 1114:  const pid_t child_pid = fork();
        -: 1115:  GTEST_DEATH_TEST_CHECK_(child_pid != -1);
        -: 1116:  set_child_pid(child_pid);
        -: 1117:  if (child_pid == 0) {
        -: 1118:    GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[0]));
        -: 1119:    set_write_fd(pipe_fd[1]);
        -: 1120:    // Redirects all logging to stderr in the child process to prevent
        -: 1121:    // concurrent writes to the log files.  We capture stderr in the parent
        -: 1122:    // process and append the child process' output to a log.
        -: 1123:    LogToStderr();
        -: 1124:    // Event forwarding to the listeners of event listener API mush be shut
        -: 1125:    // down in death test subprocesses.
        -: 1126:    GetUnitTestImpl()->listeners()->SuppressEventForwarding();
        -: 1127:    g_in_fast_death_test_child = true;
        -: 1128:    return EXECUTE_TEST;
        -: 1129:  } else {
        -: 1130:    GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[1]));
        -: 1131:    set_read_fd(pipe_fd[0]);
        -: 1132:    set_spawned(true);
        -: 1133:    return OVERSEE_TEST;
        -: 1134:  }
        -: 1135:}
        -: 1136:
        -: 1137:// A concrete death test class that forks and re-executes the main
        -: 1138:// program from the beginning, with command-line flags set that cause
        -: 1139:// only this specific death test to be run.
        -: 1140:class ExecDeathTest : public ForkingDeathTest {
        -: 1141: public:
        -: 1142:  ExecDeathTest(const char* a_statement, Matcher<const std::string&> matcher,
        -: 1143:                const char* file, int line)
        -: 1144:      : ForkingDeathTest(a_statement, std::move(matcher)),
        -: 1145:        file_(file),
        -: 1146:        line_(line) {}
        -: 1147:  TestRole AssumeRole() override;
        -: 1148:
        -: 1149: private:
        -: 1150:  static ::std::vector<std::string> GetArgvsForDeathTestChildProcess() {
        -: 1151:    ::std::vector<std::string> args = GetInjectableArgvs();
        -: 1152:#if defined(GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_)
        -: 1153:    ::std::vector<std::string> extra_args =
        -: 1154:        GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_();
        -: 1155:    args.insert(args.end(), extra_args.begin(), extra_args.end());
        -: 1156:#endif  // defined(GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_)
        -: 1157:    return args;
        -: 1158:  }
        -: 1159:  // The name of the file in which the death test is located.
        -: 1160:  const char* const file_;
        -: 1161:  // The line number on which the death test is located.
        -: 1162:  const int line_;
        -: 1163:};
        -: 1164:
        -: 1165:// A struct that encompasses the arguments to the child process of a
        -: 1166:// threadsafe-style death test process.
        -: 1167:struct ExecDeathTestArgs {
        -: 1168:  char* const* argv;  // Command-line arguments for the child's call to exec
        -: 1169:  int close_fd;       // File descriptor to close; the read end of a pipe
        -: 1170:};
        -: 1171:
        -: 1172:#ifdef GTEST_OS_QNX
        -: 1173:extern "C" char** environ;
        -: 1174:#else   // GTEST_OS_QNX
        -: 1175:// The main function for a threadsafe-style death test child process.
        -: 1176:// This function is called in a clone()-ed process and thus must avoid
        -: 1177:// any potentially unsafe operations like malloc or libc functions.
        -: 1178:static int ExecDeathTestChildMain(void* child_arg) {
        -: 1179:  ExecDeathTestArgs* const args = static_cast<ExecDeathTestArgs*>(child_arg);
        -: 1180:  GTEST_DEATH_TEST_CHECK_SYSCALL_(close(args->close_fd));
        -: 1181:
        -: 1182:  // We need to execute the test program in the same environment where
        -: 1183:  // it was originally invoked.  Therefore we change to the original
        -: 1184:  // working directory first.
        -: 1185:  const char* const original_dir =
        -: 1186:      UnitTest::GetInstance()->original_working_dir();
        -: 1187:  // We can safely call chdir() as it's a direct system call.
        -: 1188:  if (chdir(original_dir) != 0) {
        -: 1189:    DeathTestAbort(std::string("chdir(\"") + original_dir +
        -: 1190:                   "\") failed: " + GetLastErrnoDescription());
        -: 1191:    return EXIT_FAILURE;
        -: 1192:  }
        -: 1193:
        -: 1194:  // We can safely call execv() as it's almost a direct system call. We
        -: 1195:  // cannot use execvp() as it's a libc function and thus potentially
        -: 1196:  // unsafe.  Since execv() doesn't search the PATH, the user must
        -: 1197:  // invoke the test program via a valid path that contains at least
        -: 1198:  // one path separator.
        -: 1199:  execv(args->argv[0], args->argv);
        -: 1200:  DeathTestAbort(std::string("execv(") + args->argv[0] + ", ...) in " +
        -: 1201:                 original_dir + " failed: " + GetLastErrnoDescription());
        -: 1202:  return EXIT_FAILURE;
        -: 1203:}
        -: 1204:#endif  // GTEST_OS_QNX
        -: 1205:
        -: 1206:#if GTEST_HAS_CLONE
        -: 1207:// Two utility routines that together determine the direction the stack
        -: 1208:// grows.
        -: 1209:// This could be accomplished more elegantly by a single recursive
        -: 1210:// function, but we want to guard against the unlikely possibility of
        -: 1211:// a smart compiler optimizing the recursion away.
        -: 1212://
        -: 1213:// GTEST_NO_INLINE_ is required to prevent GCC 4.6 from inlining
        -: 1214:// StackLowerThanAddress into StackGrowsDown, which then doesn't give
        -: 1215:// correct answer.
        -: 1216:static void StackLowerThanAddress(const void* ptr,
        -: 1217:                                  bool* result) GTEST_NO_INLINE_;
        -: 1218:// Make sure sanitizers do not tamper with the stack here.
        -: 1219:// Ideally, we want to use `__builtin_frame_address` instead of a local variable
        -: 1220:// address with sanitizer disabled, but it does not work when the
        -: 1221:// compiler optimizes the stack frame out, which happens on PowerPC targets.
        -: 1222:// HWAddressSanitizer add a random tag to the MSB of the local variable address,
        -: 1223:// making comparison result unpredictable.
        -: 1224:GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -: 1225:GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_
        -: 1226:static void StackLowerThanAddress(const void* ptr, bool* result) {
        -: 1227:  int dummy = 0;
        -: 1228:  *result = std::less<const void*>()(&dummy, ptr);
        -: 1229:}
        -: 1230:
        -: 1231:// Make sure AddressSanitizer does not tamper with the stack here.
        -: 1232:GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -: 1233:GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_
        -: 1234:static bool StackGrowsDown() {
        -: 1235:  int dummy = 0;
        -: 1236:  bool result;
        -: 1237:  StackLowerThanAddress(&dummy, &result);
        -: 1238:  return result;
        -: 1239:}
        -: 1240:#endif  // GTEST_HAS_CLONE
        -: 1241:
        -: 1242:// Spawns a child process with the same executable as the current process in
        -: 1243:// a thread-safe manner and instructs it to run the death test.  The
        -: 1244:// implementation uses fork(2) + exec.  On systems where clone(2) is
        -: 1245:// available, it is used instead, being slightly more thread-safe.  On QNX,
        -: 1246:// fork supports only single-threaded environments, so this function uses
        -: 1247:// spawn(2) there instead.  The function dies with an error message if
        -: 1248:// anything goes wrong.
        -: 1249:static pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {
        -: 1250:  ExecDeathTestArgs args = {argv, close_fd};
        -: 1251:  pid_t child_pid = -1;
        -: 1252:
        -: 1253:#ifdef GTEST_OS_QNX
        -: 1254:  // Obtains the current directory and sets it to be closed in the child
        -: 1255:  // process.
        -: 1256:  const int cwd_fd = open(".", O_RDONLY);
        -: 1257:  GTEST_DEATH_TEST_CHECK_(cwd_fd != -1);
        -: 1258:  GTEST_DEATH_TEST_CHECK_SYSCALL_(fcntl(cwd_fd, F_SETFD, FD_CLOEXEC));
        -: 1259:  // We need to execute the test program in the same environment where
        -: 1260:  // it was originally invoked.  Therefore we change to the original
        -: 1261:  // working directory first.
        -: 1262:  const char* const original_dir =
        -: 1263:      UnitTest::GetInstance()->original_working_dir();
        -: 1264:  // We can safely call chdir() as it's a direct system call.
        -: 1265:  if (chdir(original_dir) != 0) {
        -: 1266:    DeathTestAbort(std::string("chdir(\"") + original_dir +
        -: 1267:                   "\") failed: " + GetLastErrnoDescription());
        -: 1268:    return EXIT_FAILURE;
        -: 1269:  }
        -: 1270:
        -: 1271:  int fd_flags;
        -: 1272:  // Set close_fd to be closed after spawn.
        -: 1273:  GTEST_DEATH_TEST_CHECK_SYSCALL_(fd_flags = fcntl(close_fd, F_GETFD));
        -: 1274:  GTEST_DEATH_TEST_CHECK_SYSCALL_(
        -: 1275:      fcntl(close_fd, F_SETFD, fd_flags | FD_CLOEXEC));
        -: 1276:  struct inheritance inherit = {0};
        -: 1277:  // spawn is a system call.
        -: 1278:  child_pid = spawn(args.argv[0], 0, nullptr, &inherit, args.argv, environ);
        -: 1279:  // Restores the current working directory.
        -: 1280:  GTEST_DEATH_TEST_CHECK_(fchdir(cwd_fd) != -1);
        -: 1281:  GTEST_DEATH_TEST_CHECK_SYSCALL_(close(cwd_fd));
        -: 1282:
        -: 1283:#else  // GTEST_OS_QNX
        -: 1284:#ifdef GTEST_OS_LINUX
        -: 1285:  // When a SIGPROF signal is received while fork() or clone() are executing,
        -: 1286:  // the process may hang. To avoid this, we ignore SIGPROF here and re-enable
        -: 1287:  // it after the call to fork()/clone() is complete.
        -: 1288:  struct sigaction saved_sigprof_action;
        -: 1289:  struct sigaction ignore_sigprof_action;
        -: 1290:  memset(&ignore_sigprof_action, 0, sizeof(ignore_sigprof_action));
        -: 1291:  sigemptyset(&ignore_sigprof_action.sa_mask);
        -: 1292:  ignore_sigprof_action.sa_handler = SIG_IGN;
        -: 1293:  GTEST_DEATH_TEST_CHECK_SYSCALL_(
        -: 1294:      sigaction(SIGPROF, &ignore_sigprof_action, &saved_sigprof_action));
        -: 1295:#endif  // GTEST_OS_LINUX
        -: 1296:
        -: 1297:#if GTEST_HAS_CLONE
        -: 1298:  const bool use_fork = GTEST_FLAG_GET(death_test_use_fork);
        -: 1299:
        -: 1300:  if (!use_fork) {
        -: 1301:    static const bool stack_grows_down = StackGrowsDown();
        -: 1302:    const auto stack_size = static_cast<size_t>(getpagesize() * 2);
        -: 1303:    // MMAP_ANONYMOUS is not defined on Mac, so we use MAP_ANON instead.
        -: 1304:    void* const stack = mmap(nullptr, stack_size, PROT_READ | PROT_WRITE,
        -: 1305:                             MAP_ANON | MAP_PRIVATE, -1, 0);
        -: 1306:    GTEST_DEATH_TEST_CHECK_(stack != MAP_FAILED);
        -: 1307:
        -: 1308:    // Maximum stack alignment in bytes:  For a downward-growing stack, this
        -: 1309:    // amount is subtracted from size of the stack space to get an address
        -: 1310:    // that is within the stack space and is aligned on all systems we care
        -: 1311:    // about.  As far as I know there is no ABI with stack alignment greater
        -: 1312:    // than 64.  We assume stack and stack_size already have alignment of
        -: 1313:    // kMaxStackAlignment.
        -: 1314:    const size_t kMaxStackAlignment = 64;
        -: 1315:    void* const stack_top =
        -: 1316:        static_cast<char*>(stack) +
        -: 1317:        (stack_grows_down ? stack_size - kMaxStackAlignment : 0);
        -: 1318:    GTEST_DEATH_TEST_CHECK_(
        -: 1319:        static_cast<size_t>(stack_size) > kMaxStackAlignment &&
        -: 1320:        reinterpret_cast<uintptr_t>(stack_top) % kMaxStackAlignment == 0);
        -: 1321:
        -: 1322:    child_pid = clone(&ExecDeathTestChildMain, stack_top, SIGCHLD, &args);
        -: 1323:
        -: 1324:    GTEST_DEATH_TEST_CHECK_(munmap(stack, stack_size) != -1);
        -: 1325:  }
        -: 1326:#else
        -: 1327:  const bool use_fork = true;
        -: 1328:#endif  // GTEST_HAS_CLONE
        -: 1329:
        -: 1330:  if (use_fork && (child_pid = fork()) == 0) {
        -: 1331:    ExecDeathTestChildMain(&args);
        -: 1332:    _exit(0);
        -: 1333:  }
        -: 1334:#endif  // GTEST_OS_QNX
        -: 1335:#ifdef GTEST_OS_LINUX
        -: 1336:  GTEST_DEATH_TEST_CHECK_SYSCALL_(
        -: 1337:      sigaction(SIGPROF, &saved_sigprof_action, nullptr));
        -: 1338:#endif  // GTEST_OS_LINUX
        -: 1339:
        -: 1340:  GTEST_DEATH_TEST_CHECK_(child_pid != -1);
        -: 1341:  return child_pid;
        -: 1342:}
        -: 1343:
        -: 1344:// The AssumeRole process for a fork-and-exec death test.  It re-executes the
        -: 1345:// main program from the beginning, setting the --gtest_filter
        -: 1346:// and --gtest_internal_run_death_test flags to cause only the current
        -: 1347:// death test to be re-run.
        -: 1348:DeathTest::TestRole ExecDeathTest::AssumeRole() {
        -: 1349:  const UnitTestImpl* const impl = GetUnitTestImpl();
        -: 1350:  const InternalRunDeathTestFlag* const flag =
        -: 1351:      impl->internal_run_death_test_flag();
        -: 1352:  const TestInfo* const info = impl->current_test_info();
        -: 1353:  const int death_test_index = info->result()->death_test_count();
        -: 1354:
        -: 1355:  if (flag != nullptr) {
        -: 1356:    set_write_fd(flag->write_fd());
        -: 1357:    return EXECUTE_TEST;
        -: 1358:  }
        -: 1359:
        -: 1360:  int pipe_fd[2];
        -: 1361:  GTEST_DEATH_TEST_CHECK_(pipe(pipe_fd) != -1);
        -: 1362:  // Clear the close-on-exec flag on the write end of the pipe, lest
        -: 1363:  // it be closed when the child process does an exec:
        -: 1364:  GTEST_DEATH_TEST_CHECK_(fcntl(pipe_fd[1], F_SETFD, 0) != -1);
        -: 1365:
        -: 1366:  const std::string filter_flag = std::string("--") + GTEST_FLAG_PREFIX_ +
        -: 1367:                                  "filter=" + info->test_suite_name() + "." +
        -: 1368:                                  info->name();
        -: 1369:  const std::string internal_flag = std::string("--") + GTEST_FLAG_PREFIX_ +
        -: 1370:                                    "internal_run_death_test=" + file_ + "|" +
        -: 1371:                                    StreamableToString(line_) + "|" +
        -: 1372:                                    StreamableToString(death_test_index) + "|" +
        -: 1373:                                    StreamableToString(pipe_fd[1]);
        -: 1374:  std::vector<std::string> args = GetArgvsForDeathTestChildProcess();
        -: 1375:  args.push_back(filter_flag);
        -: 1376:  args.push_back(internal_flag);
        -: 1377:
        -: 1378:  DeathTest::set_last_death_test_message("");
        -: 1379:
        -: 1380:  CaptureStderr();
        -: 1381:  // See the comment in NoExecDeathTest::AssumeRole for why the next line
        -: 1382:  // is necessary.
        -: 1383:  FlushInfoLog();
        -: 1384:
        -: 1385:  std::unique_ptr<char*[]> argv = CreateArgvFromArgs(args);
        -: 1386:  const pid_t child_pid = ExecDeathTestSpawnChild(argv.get(), pipe_fd[0]);
        -: 1387:  GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[1]));
        -: 1388:  set_child_pid(child_pid);
        -: 1389:  set_read_fd(pipe_fd[0]);
        -: 1390:  set_spawned(true);
        -: 1391:  return OVERSEE_TEST;
        -: 1392:}
        -: 1393:
        -: 1394:#endif  // !GTEST_OS_WINDOWS
        -: 1395:
        -: 1396:// Creates a concrete DeathTest-derived class that depends on the
        -: 1397:// --gtest_death_test_style flag, and sets the pointer pointed to
        -: 1398:// by the "test" argument to its address.  If the test should be
        -: 1399:// skipped, sets that pointer to NULL.  Returns true, unless the
        -: 1400:// flag is set to an invalid value.
function _ZN7testing8internal23DefaultDeathTestFactory6CreateEPKcNS_7MatcherIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES3_iPPNS0_9DeathTestE called 0 returned 0% blocks executed 0%
    #####: 1401:bool DefaultDeathTestFactory::Create(const char* statement,
        -: 1402:                                     Matcher<const std::string&> matcher,
        -: 1403:                                     const char* file, int line,
        -: 1404:                                     DeathTest** test) {
    #####: 1405:  UnitTestImpl* const impl = GetUnitTestImpl();
    %%%%%: 1405-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1406:  const InternalRunDeathTestFlag* const flag =
    #####: 1407:      impl->internal_run_death_test_flag();
    %%%%%: 1407-block  0
call    0 never executed
        -: 1408:  const int death_test_index =
    #####: 1409:      impl->current_test_info()->increment_death_test_count();
call    0 never executed
call    1 never executed
        -: 1410:
    #####: 1411:  if (flag != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 1412:    if (death_test_index > flag->index()) {
    %%%%%: 1412-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1413:      DeathTest::set_last_death_test_message(
    %%%%%: 1413-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1414:          "Death test count (" + StreamableToString(death_test_index) +
    %%%%%: 1414-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1414-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1414-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 1414-block  3
call   11 never executed
    $$$$$: 1414-block  4
    $$$$$: 1414-block  5
call   12 never executed
    $$$$$: 1414-block  6
    $$$$$: 1414-block  7
call   13 never executed
    $$$$$: 1414-block  8
    #####: 1415:          ") somehow exceeded expected maximum (" +
    %%%%%: 1415-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1415-block  1
call    4 never executed
    $$$$$: 1415-block  2
    #####: 1416:          StreamableToString(flag->index()) + ")");
    %%%%%: 1416-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1416-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1416-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 1416-block  3
call   10 never executed
    $$$$$: 1416-block  4
    $$$$$: 1416-block  5
call   11 never executed
    $$$$$: 1416-block  6
    $$$$$: 1416-block  7
    #####: 1417:      return false;
        -: 1418:    }
        -: 1419:
    #####: 1420:    if (!(flag->file() == file && flag->line() == line &&
    %%%%%: 1420-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1420-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1420-block  2
    %%%%%: 1420-block  3
    %%%%%: 1420-block  4
branch  7 never executed
branch  8 never executed
    #####: 1421:          flag->index() == death_test_index)) {
    %%%%%: 1421-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1422:      *test = nullptr;
    #####: 1423:      return true;
    %%%%%: 1423-block  0
        -: 1424:    }
        -: 1425:  }
        -: 1426:
        -: 1427:#ifdef GTEST_OS_WINDOWS
        -: 1428:
    #####: 1429:  if (GTEST_FLAG_GET(death_test_style) == "threadsafe" ||
    %%%%%: 1429-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1429-block  1
    %%%%%: 1429-block  2
    %%%%%: 1429-block  3
branch  5 never executed
branch  6 never executed
    #####: 1430:      GTEST_FLAG_GET(death_test_style) == "fast") {
    %%%%%: 1430-block  0
call    0 never executed
    #####: 1431:    *test = new WindowsDeathTest(statement, std::move(matcher), file, line);
    %%%%%: 1431-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1431-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1431-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1431-block  3
call   10 never executed
    $$$$$: 1431-block  4
call   11 never executed
    $$$$$: 1431-block  5
call   12 never executed
    $$$$$: 1431-block  6
        -: 1432:  }
        -: 1433:
        -: 1434:#elif defined(GTEST_OS_FUCHSIA)
        -: 1435:
        -: 1436:  if (GTEST_FLAG_GET(death_test_style) == "threadsafe" ||
        -: 1437:      GTEST_FLAG_GET(death_test_style) == "fast") {
        -: 1438:    *test = new FuchsiaDeathTest(statement, std::move(matcher), file, line);
        -: 1439:  }
        -: 1440:
        -: 1441:#else
        -: 1442:
        -: 1443:  if (GTEST_FLAG_GET(death_test_style) == "threadsafe") {
        -: 1444:    *test = new ExecDeathTest(statement, std::move(matcher), file, line);
        -: 1445:  } else if (GTEST_FLAG_GET(death_test_style) == "fast") {
        -: 1446:    *test = new NoExecDeathTest(statement, std::move(matcher));
        -: 1447:  }
        -: 1448:
        -: 1449:#endif  // GTEST_OS_WINDOWS
        -: 1450:
        -: 1451:  else {  // NOLINT - this is more readable than unbalanced brackets inside #if.
    #####: 1452:    DeathTest::set_last_death_test_message("Unknown death test style \"" +
    %%%%%: 1452-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1452-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1452-block  2
call    6 never executed
    $$$$$: 1452-block  3
    #####: 1453:                                           GTEST_FLAG_GET(death_test_style) +
    %%%%%: 1453-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1453-block  1
call    3 never executed
call    4 never executed
    $$$$$: 1453-block  2
call    5 never executed
    $$$$$: 1453-block  3
        -: 1454:                                           "\" encountered");
    #####: 1455:    return false;
        -: 1456:  }
        -: 1457:
    #####: 1458:  return true;
    %%%%%: 1458-block  0
        -: 1459:}
        -: 1460:
        -: 1461:#ifdef GTEST_OS_WINDOWS
        -: 1462:// Recreates the pipe and event handles from the provided parameters,
        -: 1463:// signals the event, and returns a file descriptor wrapped around the pipe
        -: 1464:// handle. This function is called in the child process only.
function _ZN7testing8internalL23GetStatusFileDescriptorEjyy called 0 returned 0% blocks executed 0%
    #####: 1465:static int GetStatusFileDescriptor(unsigned int parent_process_id,
        -: 1466:                                   size_t write_handle_as_size_t,
        -: 1467:                                   size_t event_handle_as_size_t) {
        -: 1468:  AutoHandle parent_process_handle(::OpenProcess(PROCESS_DUP_HANDLE,
        -: 1469:                                                 FALSE,  // Non-inheritable.
    #####: 1470:                                                 parent_process_id));
    %%%%%: 1470-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1470-block  1
call    3 never executed
    #####: 1471:  if (parent_process_handle.Get() == INVALID_HANDLE_VALUE) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1472:    DeathTestAbort("Unable to open parent process " +
    %%%%%: 1472-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1472-block  1
call    3 never executed
    $$$$$: 1472-block  2
call    4 never executed
    $$$$$: 1472-block  3
    #####: 1473:                   StreamableToString(parent_process_id));
    %%%%%: 1473-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1473-block  1
call    3 never executed
    $$$$$: 1473-block  2
        -: 1474:  }
        -: 1475:
    #####: 1476:  GTEST_CHECK_(sizeof(HANDLE) <= sizeof(size_t));
    %%%%%: 1476-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1476-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1476-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1476-block  3
call   10 never executed
    $$$$$: 1476-block  4
call   11 never executed
    $$$$$: 1476-block  5
        -: 1477:
    #####: 1478:  const HANDLE write_handle = reinterpret_cast<HANDLE>(write_handle_as_size_t);
        -: 1479:  HANDLE dup_write_handle;
        -: 1480:
        -: 1481:  // The newly initialized handle is accessible only in the parent
        -: 1482:  // process. To obtain one accessible within the child, we need to use
        -: 1483:  // DuplicateHandle.
    #####: 1484:  if (!::DuplicateHandle(parent_process_handle.Get(), write_handle,
    %%%%%: 1484-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1484-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1484-block  2
branch  7 never executed
branch  8 never executed
        -: 1485:                         ::GetCurrentProcess(), &dup_write_handle,
        -: 1486:                         0x0,    // Requested privileges ignored since
        -: 1487:                                 // DUPLICATE_SAME_ACCESS is used.
        -: 1488:                         FALSE,  // Request non-inheritable handler.
        -: 1489:                         DUPLICATE_SAME_ACCESS)) {
    #####: 1490:    DeathTestAbort("Unable to duplicate the pipe handle " +
    %%%%%: 1490-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1490-block  1
call    3 never executed
    $$$$$: 1490-block  2
call    4 never executed
    $$$$$: 1490-block  3
    #####: 1491:                   StreamableToString(write_handle_as_size_t) +
    %%%%%: 1491-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1491-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1491-block  2
call    6 never executed
    $$$$$: 1491-block  3
    $$$$$: 1491-block  4
call    7 never executed
    $$$$$: 1491-block  5
    #####: 1492:                   " from the parent process " +
    %%%%%: 1492-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1492-block  1
call    3 never executed
    $$$$$: 1492-block  2
    #####: 1493:                   StreamableToString(parent_process_id));
    %%%%%: 1493-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1493-block  1
call    3 never executed
    $$$$$: 1493-block  2
        -: 1494:  }
        -: 1495:
    #####: 1496:  const HANDLE event_handle = reinterpret_cast<HANDLE>(event_handle_as_size_t);
        -: 1497:  HANDLE dup_event_handle;
        -: 1498:
    #####: 1499:  if (!::DuplicateHandle(parent_process_handle.Get(), event_handle,
    %%%%%: 1499-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1499-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1499-block  2
branch  7 never executed
branch  8 never executed
        -: 1500:                         ::GetCurrentProcess(), &dup_event_handle, 0x0, FALSE,
        -: 1501:                         DUPLICATE_SAME_ACCESS)) {
    #####: 1502:    DeathTestAbort("Unable to duplicate the event handle " +
    %%%%%: 1502-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1502-block  1
call    3 never executed
    $$$$$: 1502-block  2
call    4 never executed
    $$$$$: 1502-block  3
    #####: 1503:                   StreamableToString(event_handle_as_size_t) +
    %%%%%: 1503-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1503-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1503-block  2
call    6 never executed
    $$$$$: 1503-block  3
    $$$$$: 1503-block  4
call    7 never executed
    $$$$$: 1503-block  5
    #####: 1504:                   " from the parent process " +
    %%%%%: 1504-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1504-block  1
call    3 never executed
    $$$$$: 1504-block  2
    #####: 1505:                   StreamableToString(parent_process_id));
    %%%%%: 1505-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1505-block  1
call    3 never executed
    $$$$$: 1505-block  2
        -: 1506:  }
        -: 1507:
        -: 1508:  const int write_fd =
    #####: 1509:      ::_open_osfhandle(reinterpret_cast<intptr_t>(dup_write_handle), O_APPEND);
    %%%%%: 1509-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1510:  if (write_fd == -1) {
    %%%%%: 1510-block  0
branch  0 never executed
branch  1 never executed
    #####: 1511:    DeathTestAbort("Unable to convert pipe handle " +
    %%%%%: 1511-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1511-block  1
call    3 never executed
    $$$$$: 1511-block  2
call    4 never executed
    $$$$$: 1511-block  3
    #####: 1512:                   StreamableToString(write_handle_as_size_t) +
    %%%%%: 1512-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1512-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1512-block  2
call    6 never executed
    $$$$$: 1512-block  3
    $$$$$: 1512-block  4
call    7 never executed
    $$$$$: 1512-block  5
        -: 1513:                   " to a file descriptor");
        -: 1514:  }
        -: 1515:
        -: 1516:  // Signals the parent that the write end of the pipe has been acquired
        -: 1517:  // so the parent can release its own write end.
    #####: 1518:  ::SetEvent(dup_event_handle);
    %%%%%: 1518-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1519:
    #####: 1520:  return write_fd;
    %%%%%: 1520-block  0
    #####: 1521:}
    %%%%%: 1521-block  0
call    0 never executed
    $$$$$: 1521-block  1
call    1 never executed
        -: 1522:#endif  // GTEST_OS_WINDOWS
        -: 1523:
        -: 1524:// Returns a newly created InternalRunDeathTestFlag object with fields
        -: 1525:// initialized from the GTEST_FLAG(internal_run_death_test) flag if
        -: 1526:// the flag is specified; otherwise returns NULL.
function _ZN7testing8internal29ParseInternalRunDeathTestFlagEv called 1 returned 100% blocks executed 14%
        1: 1527:InternalRunDeathTestFlag* ParseInternalRunDeathTestFlag() {
        1: 1528:  if (GTEST_FLAG_GET(internal_run_death_test) == "") return nullptr;
        1: 1528-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 1528-block  1
        -: 1529:
        -: 1530:  // GTEST_HAS_DEATH_TEST implies that we have ::std::string, so we
        -: 1531:  // can use it here.
    #####: 1532:  int line = -1;
    #####: 1533:  int index = -1;
    #####: 1534:  ::std::vector< ::std::string> fields;
    %%%%%: 1534-block  0
call    0 never executed
    #####: 1535:  SplitString(GTEST_FLAG_GET(internal_run_death_test), '|', &fields);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1536:  int write_fd = -1;
        -: 1537:
        -: 1538:#ifdef GTEST_OS_WINDOWS
        -: 1539:
    #####: 1540:  unsigned int parent_process_id = 0;
    #####: 1541:  size_t write_handle_as_size_t = 0;
    #####: 1542:  size_t event_handle_as_size_t = 0;
        -: 1543:
    #####: 1544:  if (fields.size() != 6 || !ParseNaturalNumber(fields[1], &line) ||
    %%%%%: 1544-block  0
call    0 never executed
    %%%%%: 1544-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1544-block  2
branch  5 never executed
branch  6 never executed
    #####: 1545:      !ParseNaturalNumber(fields[2], &index) ||
    %%%%%: 1545-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1545-block  1
branch  4 never executed
branch  5 never executed
    #####: 1546:      !ParseNaturalNumber(fields[3], &parent_process_id) ||
    %%%%%: 1546-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1546-block  1
branch  4 never executed
branch  5 never executed
    #####: 1547:      !ParseNaturalNumber(fields[4], &write_handle_as_size_t) ||
branch  0 never executed
branch  1 never executed
    %%%%%: 1547-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1547-block  1
branch  6 never executed
branch  7 never executed
    %%%%%: 1547-block  2
    %%%%%: 1547-block  3
    %%%%%: 1547-block  4
branch  8 never executed
branch  9 never executed
    #####: 1548:      !ParseNaturalNumber(fields[5], &event_handle_as_size_t)) {
    %%%%%: 1548-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1548-block  1
branch  4 never executed
branch  5 never executed
    #####: 1549:    DeathTestAbort("Bad --gtest_internal_run_death_test flag: " +
    %%%%%: 1549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1549-block  1
call    3 never executed
    $$$$$: 1549-block  2
call    4 never executed
    $$$$$: 1549-block  3
        -: 1550:                   GTEST_FLAG_GET(internal_run_death_test));
        -: 1551:  }
    #####: 1552:  write_fd = GetStatusFileDescriptor(parent_process_id, write_handle_as_size_t,
    %%%%%: 1552-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1553:                                     event_handle_as_size_t);
        -: 1554:
        -: 1555:#elif defined(GTEST_OS_FUCHSIA)
        -: 1556:
        -: 1557:  if (fields.size() != 3 || !ParseNaturalNumber(fields[1], &line) ||
        -: 1558:      !ParseNaturalNumber(fields[2], &index)) {
        -: 1559:    DeathTestAbort("Bad --gtest_internal_run_death_test flag: " +
        -: 1560:                   GTEST_FLAG_GET(internal_run_death_test));
        -: 1561:  }
        -: 1562:
        -: 1563:#else
        -: 1564:
        -: 1565:  if (fields.size() != 4 || !ParseNaturalNumber(fields[1], &line) ||
        -: 1566:      !ParseNaturalNumber(fields[2], &index) ||
        -: 1567:      !ParseNaturalNumber(fields[3], &write_fd)) {
        -: 1568:    DeathTestAbort("Bad --gtest_internal_run_death_test flag: " +
        -: 1569:                   GTEST_FLAG_GET(internal_run_death_test));
        -: 1570:  }
        -: 1571:
        -: 1572:#endif  // GTEST_OS_WINDOWS
        -: 1573:
    #####: 1574:  return new InternalRunDeathTestFlag(fields[0], line, index, write_fd);
    %%%%%: 1574-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1574-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1574-block  2
call    7 never executed
    #####: 1575:}
    %%%%%: 1575-block  0
call    0 never executed
    $$$$$: 1575-block  1
call    1 never executed
        -: 1576:
        -: 1577:}  // namespace internal
        -: 1578:
        -: 1579:#endif  // GTEST_HAS_DEATH_TEST
        -: 1580:
        -: 1581:}  // namespace testing
